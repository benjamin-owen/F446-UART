
F446dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005ec0  08005ec0  00015ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006020  08006020  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006028  08006028  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000005c  0800608c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  0800608c  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8a4  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002195  00000000  00000000  0002b973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  0002db08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8d  00000000  00000000  0002e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254de  00000000  00000000  0002f3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb70  00000000  00000000  0005489b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000def44  00000000  00000000  0006040b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004158  00000000  00000000  0013f350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001434a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ea4 	.word	0x08005ea4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005ea4 	.word	0x08005ea4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 b970 	b.w	8000d94 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	460d      	mov	r5, r1
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	460f      	mov	r7, r1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d14a      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4694      	mov	ip, r2
 8000ae0:	d965      	bls.n	8000bae <__udivmoddi4+0xe2>
 8000ae2:	fab2 f382 	clz	r3, r2
 8000ae6:	b143      	cbz	r3, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aec:	f1c3 0220 	rsb	r2, r3, #32
 8000af0:	409f      	lsls	r7, r3
 8000af2:	fa20 f202 	lsr.w	r2, r0, r2
 8000af6:	4317      	orrs	r7, r2
 8000af8:	409c      	lsls	r4, r3
 8000afa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000afe:	fa1f f58c 	uxth.w	r5, ip
 8000b02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b06:	0c22      	lsrs	r2, r4, #16
 8000b08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b10:	fb01 f005 	mul.w	r0, r1, r5
 8000b14:	4290      	cmp	r0, r2
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x62>
 8000b18:	eb1c 0202 	adds.w	r2, ip, r2
 8000b1c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b20:	f080 811c 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b24:	4290      	cmp	r0, r2
 8000b26:	f240 8119 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b2a:	3902      	subs	r1, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a12      	subs	r2, r2, r0
 8000b30:	b2a4      	uxth	r4, r4
 8000b32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b3e:	fb00 f505 	mul.w	r5, r0, r5
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	d90a      	bls.n	8000b5c <__udivmoddi4+0x90>
 8000b46:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b4e:	f080 8107 	bcs.w	8000d60 <__udivmoddi4+0x294>
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	f240 8104 	bls.w	8000d60 <__udivmoddi4+0x294>
 8000b58:	4464      	add	r4, ip
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b60:	1b64      	subs	r4, r4, r5
 8000b62:	2100      	movs	r1, #0
 8000b64:	b11e      	cbz	r6, 8000b6e <__udivmoddi4+0xa2>
 8000b66:	40dc      	lsrs	r4, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0xbc>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80ed 	beq.w	8000d56 <__udivmoddi4+0x28a>
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b82:	4608      	mov	r0, r1
 8000b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b88:	fab3 f183 	clz	r1, r3
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	d149      	bne.n	8000c24 <__udivmoddi4+0x158>
 8000b90:	42ab      	cmp	r3, r5
 8000b92:	d302      	bcc.n	8000b9a <__udivmoddi4+0xce>
 8000b94:	4282      	cmp	r2, r0
 8000b96:	f200 80f8 	bhi.w	8000d8a <__udivmoddi4+0x2be>
 8000b9a:	1a84      	subs	r4, r0, r2
 8000b9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4617      	mov	r7, r2
 8000ba4:	2e00      	cmp	r6, #0
 8000ba6:	d0e2      	beq.n	8000b6e <__udivmoddi4+0xa2>
 8000ba8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bac:	e7df      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000bae:	b902      	cbnz	r2, 8000bb2 <__udivmoddi4+0xe6>
 8000bb0:	deff      	udf	#255	; 0xff
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8090 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbc:	1a8a      	subs	r2, r1, r2
 8000bbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc2:	fa1f fe8c 	uxth.w	lr, ip
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd0:	0c22      	lsrs	r2, r4, #16
 8000bd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bd6:	fb0e f005 	mul.w	r0, lr, r5
 8000bda:	4290      	cmp	r0, r2
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000bde:	eb1c 0202 	adds.w	r2, ip, r2
 8000be2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4290      	cmp	r0, r2
 8000bea:	f200 80cb 	bhi.w	8000d84 <__udivmoddi4+0x2b8>
 8000bee:	4645      	mov	r5, r8
 8000bf0:	1a12      	subs	r2, r2, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c00:	fb0e fe00 	mul.w	lr, lr, r0
 8000c04:	45a6      	cmp	lr, r4
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x14e>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x14c>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f200 80bb 	bhi.w	8000d8e <__udivmoddi4+0x2c2>
 8000c18:	4610      	mov	r0, r2
 8000c1a:	eba4 040e 	sub.w	r4, r4, lr
 8000c1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c22:	e79f      	b.n	8000b64 <__udivmoddi4+0x98>
 8000c24:	f1c1 0720 	rsb	r7, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c32:	fa05 f401 	lsl.w	r4, r5, r1
 8000c36:	fa20 f307 	lsr.w	r3, r0, r7
 8000c3a:	40fd      	lsrs	r5, r7
 8000c3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c40:	4323      	orrs	r3, r4
 8000c42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c46:	fa1f fe8c 	uxth.w	lr, ip
 8000c4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c4e:	0c1c      	lsrs	r4, r3, #16
 8000c50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c54:	fb08 f50e 	mul.w	r5, r8, lr
 8000c58:	42a5      	cmp	r5, r4
 8000c5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c6c:	f080 8088 	bcs.w	8000d80 <__udivmoddi4+0x2b4>
 8000c70:	42a5      	cmp	r5, r4
 8000c72:	f240 8085 	bls.w	8000d80 <__udivmoddi4+0x2b4>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	4464      	add	r4, ip
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	b29d      	uxth	r5, r3
 8000c80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c84:	fb09 4413 	mls	r4, r9, r3, r4
 8000c88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c90:	45a6      	cmp	lr, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c9c:	d26c      	bcs.n	8000d78 <__udivmoddi4+0x2ac>
 8000c9e:	45a6      	cmp	lr, r4
 8000ca0:	d96a      	bls.n	8000d78 <__udivmoddi4+0x2ac>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	4464      	add	r4, ip
 8000ca6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000caa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cae:	eba4 040e 	sub.w	r4, r4, lr
 8000cb2:	42ac      	cmp	r4, r5
 8000cb4:	46c8      	mov	r8, r9
 8000cb6:	46ae      	mov	lr, r5
 8000cb8:	d356      	bcc.n	8000d68 <__udivmoddi4+0x29c>
 8000cba:	d053      	beq.n	8000d64 <__udivmoddi4+0x298>
 8000cbc:	b156      	cbz	r6, 8000cd4 <__udivmoddi4+0x208>
 8000cbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000cc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cca:	40ca      	lsrs	r2, r1
 8000ccc:	40cc      	lsrs	r4, r1
 8000cce:	4317      	orrs	r7, r2
 8000cd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cdc:	f1c3 0120 	rsb	r1, r3, #32
 8000ce0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cec:	409d      	lsls	r5, r3
 8000cee:	432a      	orrs	r2, r5
 8000cf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d06:	fb00 f50e 	mul.w	r5, r0, lr
 8000d0a:	428d      	cmp	r5, r1
 8000d0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x258>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d1a:	d22f      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d1c:	428d      	cmp	r5, r1
 8000d1e:	d92d      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4461      	add	r1, ip
 8000d24:	1b49      	subs	r1, r1, r5
 8000d26:	b292      	uxth	r2, r2
 8000d28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d34:	fb05 f10e 	mul.w	r1, r5, lr
 8000d38:	4291      	cmp	r1, r2
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x282>
 8000d3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d40:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d44:	d216      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000d46:	4291      	cmp	r1, r2
 8000d48:	d914      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000d4a:	3d02      	subs	r5, #2
 8000d4c:	4462      	add	r2, ip
 8000d4e:	1a52      	subs	r2, r2, r1
 8000d50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d54:	e738      	b.n	8000bc8 <__udivmoddi4+0xfc>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e708      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	e6e6      	b.n	8000b2e <__udivmoddi4+0x62>
 8000d60:	4610      	mov	r0, r2
 8000d62:	e6fb      	b.n	8000b5c <__udivmoddi4+0x90>
 8000d64:	4548      	cmp	r0, r9
 8000d66:	d2a9      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d68:	ebb9 0802 	subs.w	r8, r9, r2
 8000d6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d70:	3b01      	subs	r3, #1
 8000d72:	e7a3      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d74:	4645      	mov	r5, r8
 8000d76:	e7ea      	b.n	8000d4e <__udivmoddi4+0x282>
 8000d78:	462b      	mov	r3, r5
 8000d7a:	e794      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	e7d1      	b.n	8000d24 <__udivmoddi4+0x258>
 8000d80:	46d0      	mov	r8, sl
 8000d82:	e77b      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d84:	3d02      	subs	r5, #2
 8000d86:	4462      	add	r2, ip
 8000d88:	e732      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e70a      	b.n	8000ba4 <__udivmoddi4+0xd8>
 8000d8e:	4464      	add	r4, ip
 8000d90:	3802      	subs	r0, #2
 8000d92:	e742      	b.n	8000c1a <__udivmoddi4+0x14e>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000d98:	b4b0      	push	{r4, r5, r7}
 8000d9a:	b08f      	sub	sp, #60	; 0x3c
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000da0:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000da6:	2307      	movs	r3, #7
 8000da8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000dac:	2307      	movs	r3, #7
 8000dae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000db2:	2301      	movs	r3, #1
 8000db4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000db8:	23ff      	movs	r3, #255	; 0xff
 8000dba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000dbe:	2364      	movs	r3, #100	; 0x64
 8000dc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	461d      	mov	r5, r3
 8000dcc:	f107 040c 	add.w	r4, r7, #12
 8000dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ddc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	373c      	adds	r7, #60	; 0x3c
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bcb0      	pop	{r4, r5, r7}
 8000de8:	4770      	bx	lr

08000dea <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6898      	ldr	r0, [r3, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	899b      	ldrh	r3, [r3, #12]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f002 fbeb 	bl	80035d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f002 f94a 	bl	800309c <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6898      	ldr	r0, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	899b      	ldrh	r3, [r3, #12]
 8000e10:	2201      	movs	r2, #1
 8000e12:	4619      	mov	r1, r3
 8000e14:	f002 fbe0 	bl	80035d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e18:	2064      	movs	r0, #100	; 0x64
 8000e1a:	f002 f93f 	bl	800309c <HAL_Delay>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000e30:	2101      	movs	r1, #1
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f9ff 	bl	8001236 <LoRa_read>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000e3c:	7bbb      	ldrb	r3, [r7, #14]
 8000e3e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d107      	bne.n	8000e56 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	f023 0307 	bic.w	r3, r3, #7
 8000e4c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	61da      	str	r2, [r3, #28]
 8000e54:	e03e      	b.n	8000ed4 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d10c      	bne.n	8000e76 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e60:	f023 0307 	bic.w	r3, r3, #7
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	61da      	str	r2, [r3, #28]
 8000e74:	e02e      	b.n	8000ed4 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d10c      	bne.n	8000e96 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000e7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e80:	f023 0307 	bic.w	r3, r3, #7
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	f043 0303 	orr.w	r3, r3, #3
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2203      	movs	r2, #3
 8000e92:	61da      	str	r2, [r3, #28]
 8000e94:	e01e      	b.n	8000ed4 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d10c      	bne.n	8000eb6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000e9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ea0:	f023 0307 	bic.w	r3, r3, #7
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	f043 0305 	orr.w	r3, r3, #5
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2205      	movs	r2, #5
 8000eb2:	61da      	str	r2, [r3, #28]
 8000eb4:	e00e      	b.n	8000ed4 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b06      	cmp	r3, #6
 8000eba:	d10b      	bne.n	8000ed4 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ec0:	f023 0307 	bic.w	r3, r3, #7
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	f043 0306 	orr.w	r3, r3, #6
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2206      	movs	r2, #6
 8000ed2:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2101      	movs	r1, #1
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f9c5 	bl	800126a <LoRa_write>
	//HAL_Delay(10);
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	889b      	ldrh	r3, [r3, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	f002 fb68 	bl	80035d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6998      	ldr	r0, [r3, #24]
 8000f0c:	88fa      	ldrh	r2, [r7, #6]
 8000f0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f12:	68b9      	ldr	r1, [r7, #8]
 8000f14:	f002 fc02 	bl	800371c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f18:	bf00      	nop
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 ffeb 	bl	8003efa <HAL_SPI_GetState>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d1f7      	bne.n	8000f1a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6998      	ldr	r0, [r3, #24]
 8000f2e:	8b3a      	ldrh	r2, [r7, #24]
 8000f30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f34:	6839      	ldr	r1, [r7, #0]
 8000f36:	f002 fd2d 	bl	8003994 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f3a:	bf00      	nop
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 ffda 	bl	8003efa <HAL_SPI_GetState>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d1f7      	bne.n	8000f3c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	889b      	ldrh	r3, [r3, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	f002 fb3e 	bl	80035d8 <HAL_GPIO_WritePin>
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	889b      	ldrh	r3, [r3, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f002 fb2a 	bl	80035d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6998      	ldr	r0, [r3, #24]
 8000f88:	88fa      	ldrh	r2, [r7, #6]
 8000f8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	f002 fbc4 	bl	800371c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f94:	bf00      	nop
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 ffad 	bl	8003efa <HAL_SPI_GetState>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d1f7      	bne.n	8000f96 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6998      	ldr	r0, [r3, #24]
 8000faa:	8b3a      	ldrh	r2, [r7, #24]
 8000fac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	f002 fbb3 	bl	800371c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fb6:	bf00      	nop
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 ff9c 	bl	8003efa <HAL_SPI_GetState>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d1f7      	bne.n	8000fb8 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	889b      	ldrh	r3, [r3, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f002 fb00 	bl	80035d8 <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000fec:	2126      	movs	r1, #38	; 0x26
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f921 	bl	8001236 <LoRa_read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e003      	b.n	8001010 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	f023 0308 	bic.w	r3, r3, #8
 800100e:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	461a      	mov	r2, r3
 8001014:	2126      	movs	r1, #38	; 0x26
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f927 	bl	800126a <LoRa_write>
	HAL_Delay(10);
 800101c:	200a      	movs	r0, #10
 800101e:	f002 f83d 	bl	800309c <HAL_Delay>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 800102c:	b580      	push	{r7, lr}
 800102e:	b096      	sub	sp, #88	; 0x58
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001034:	4a17      	ldr	r2, [pc, #92]	; (8001094 <LoRa_setAutoLDO+0x68>)
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4611      	mov	r1, r2
 800103c:	2250      	movs	r2, #80	; 0x50
 800103e:	4618      	mov	r0, r3
 8001040:	f004 fae0 	bl	8005604 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	4093      	lsls	r3, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa7f 	bl	8000554 <__aeabi_i2d>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	3358      	adds	r3, #88	; 0x58
 8001060:	443b      	add	r3, r7
 8001062:	3b50      	subs	r3, #80	; 0x50
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fc08 	bl	800087c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fcea 	bl	8000a4c <__aeabi_d2iz>
 8001078:	4603      	mov	r3, r0
 800107a:	2b10      	cmp	r3, #16
 800107c:	bfcc      	ite	gt
 800107e:	2301      	movgt	r3, #1
 8001080:	2300      	movle	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffaa 	bl	8000fe0 <LoRa_setLowDaraRateOptimization>
}
 800108c:	bf00      	nop
 800108e:	3758      	adds	r7, #88	; 0x58
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08005ec0 	.word	0x08005ec0

08001098 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	04db      	lsls	r3, r3, #19
 80010a6:	115b      	asrs	r3, r3, #5
 80010a8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	0c1b      	lsrs	r3, r3, #16
 80010ae:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80010b0:	7afb      	ldrb	r3, [r7, #11]
 80010b2:	461a      	mov	r2, r3
 80010b4:	2106      	movs	r1, #6
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f8d7 	bl	800126a <LoRa_write>
	HAL_Delay(5);
 80010bc:	2005      	movs	r0, #5
 80010be:	f001 ffed 	bl	800309c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80010c8:	7afb      	ldrb	r3, [r7, #11]
 80010ca:	461a      	mov	r2, r3
 80010cc:	2107      	movs	r1, #7
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f8cb 	bl	800126a <LoRa_write>
	HAL_Delay(5);
 80010d4:	2005      	movs	r0, #5
 80010d6:	f001 ffe1 	bl	800309c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	461a      	mov	r2, r3
 80010e2:	2108      	movs	r1, #8
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f8c0 	bl	800126a <LoRa_write>
	HAL_Delay(5);
 80010ea:	2005      	movs	r0, #5
 80010ec:	f001 ffd6 	bl	800309c <HAL_Delay>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b0c      	cmp	r3, #12
 8001106:	dd01      	ble.n	800110c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001108:	230c      	movs	r3, #12
 800110a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b06      	cmp	r3, #6
 8001110:	dc01      	bgt.n	8001116 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001112:	2307      	movs	r3, #7
 8001114:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001116:	211e      	movs	r1, #30
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f88c 	bl	8001236 <LoRa_read>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f001 ffba 	bl	800309c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	b2da      	uxtb	r2, r3
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4413      	add	r3, r2
 800113a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	461a      	mov	r2, r3
 8001140:	211e      	movs	r1, #30
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f891 	bl	800126a <LoRa_write>
	HAL_Delay(10);
 8001148:	200a      	movs	r0, #10
 800114a:	f001 ffa7 	bl	800309c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ff6c 	bl	800102c <LoRa_setAutoLDO>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	461a      	mov	r2, r3
 800116c:	2109      	movs	r1, #9
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f87b 	bl	800126a <LoRa_write>
	HAL_Delay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f001 ff91 	bl	800309c <HAL_Delay>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b2c      	cmp	r3, #44	; 0x2c
 8001198:	d801      	bhi.n	800119e <LoRa_setOCP+0x1a>
		current = 45;
 800119a:	232d      	movs	r3, #45	; 0x2d
 800119c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	2bf0      	cmp	r3, #240	; 0xf0
 80011a2:	d901      	bls.n	80011a8 <LoRa_setOCP+0x24>
		current = 240;
 80011a4:	23f0      	movs	r3, #240	; 0xf0
 80011a6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	2b78      	cmp	r3, #120	; 0x78
 80011ac:	d809      	bhi.n	80011c2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	3b2d      	subs	r3, #45	; 0x2d
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <LoRa_setOCP+0x78>)
 80011b4:	fb82 1203 	smull	r1, r2, r2, r3
 80011b8:	1052      	asrs	r2, r2, #1
 80011ba:	17db      	asrs	r3, r3, #31
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e00b      	b.n	80011da <LoRa_setOCP+0x56>
	else if(current <= 240)
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	2bf0      	cmp	r3, #240	; 0xf0
 80011c6:	d808      	bhi.n	80011da <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	331e      	adds	r3, #30
 80011cc:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <LoRa_setOCP+0x78>)
 80011ce:	fb82 1203 	smull	r1, r2, r2, r3
 80011d2:	1092      	asrs	r2, r2, #2
 80011d4:	17db      	asrs	r3, r3, #31
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3320      	adds	r3, #32
 80011de:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	461a      	mov	r2, r3
 80011e4:	210b      	movs	r1, #11
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f83f 	bl	800126a <LoRa_write>
	HAL_Delay(10);
 80011ec:	200a      	movs	r0, #10
 80011ee:	f001 ff55 	bl	800309c <HAL_Delay>
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	66666667 	.word	0x66666667

08001200 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001208:	211e      	movs	r1, #30
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f813 	bl	8001236 <LoRa_read>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	f043 0307 	orr.w	r3, r3, #7
 800121a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	461a      	mov	r2, r3
 8001220:	211e      	movs	r1, #30
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f821 	bl	800126a <LoRa_write>
	HAL_Delay(10);
 8001228:	200a      	movs	r0, #10
 800122a:	f001 ff37 	bl	800309c <HAL_Delay>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af02      	add	r7, sp, #8
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001248:	b2db      	uxtb	r3, r3
 800124a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800124c:	f107 030f 	add.w	r3, r7, #15
 8001250:	f107 010e 	add.w	r1, r7, #14
 8001254:	2201      	movs	r2, #1
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	2201      	movs	r2, #1
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fe44 	bl	8000ee8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af02      	add	r7, sp, #8
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	70fb      	strb	r3, [r7, #3]
 8001276:	4613      	mov	r3, r2
 8001278:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001280:	b2db      	uxtb	r3, r3
 8001282:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001284:	78bb      	ldrb	r3, [r7, #2]
 8001286:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001288:	f107 030f 	add.w	r3, r7, #15
 800128c:	f107 010e 	add.w	r1, r7, #14
 8001290:	2201      	movs	r2, #1
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fe64 	bl	8000f64 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

	return 1;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80012c2:	2105      	movs	r1, #5
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fdae 	bl	8000e26 <LoRa_gotoMode>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80012d2:	b590      	push	{r4, r7, lr}
 80012d4:	b089      	sub	sp, #36	; 0x24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	4613      	mov	r3, r2
 80012de:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	e007      	b.n	80012fa <LoRa_receive+0x28>
		data[i]=0;
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	4413      	add	r3, r2
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	3301      	adds	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbf3      	blt.n	80012ea <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001302:	2101      	movs	r1, #1
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f7ff fd8e 	bl	8000e26 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800130a:	2112      	movs	r1, #18
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff ff92 	bl	8001236 <LoRa_read>
 8001312:	4603      	mov	r3, r0
 8001314:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001316:	7cfb      	ldrb	r3, [r7, #19]
 8001318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131c:	2b00      	cmp	r3, #0
 800131e:	d02f      	beq.n	8001380 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001320:	22ff      	movs	r2, #255	; 0xff
 8001322:	2112      	movs	r1, #18
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff ffa0 	bl	800126a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800132a:	2113      	movs	r1, #19
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7ff ff82 	bl	8001236 <LoRa_read>
 8001332:	4603      	mov	r3, r0
 8001334:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001336:	2110      	movs	r1, #16
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f7ff ff7c 	bl	8001236 <LoRa_read>
 800133e:	4603      	mov	r3, r0
 8001340:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001342:	7cfb      	ldrb	r3, [r7, #19]
 8001344:	461a      	mov	r2, r3
 8001346:	210d      	movs	r1, #13
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f7ff ff8e 	bl	800126a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800134e:	7cba      	ldrb	r2, [r7, #18]
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4293      	cmp	r3, r2
 8001354:	bf28      	it	cs
 8001356:	4613      	movcs	r3, r2
 8001358:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e00b      	b.n	8001378 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	18d4      	adds	r4, r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff ff64 	bl	8001236 <LoRa_read>
 800136e:	4603      	mov	r3, r0
 8001370:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	7ffb      	ldrb	r3, [r7, #31]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	429a      	cmp	r2, r3
 800137e:	dbef      	blt.n	8001360 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001380:	2105      	movs	r1, #5
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff fd4f 	bl	8000e26 <LoRa_gotoMode>
    return min;
 8001388:	7ffb      	ldrb	r3, [r7, #31]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}

08001392 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff82 	bl	80012a4 <LoRa_isvalid>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8096 	beq.w	80014d4 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80013a8:	2100      	movs	r1, #0
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fd3b 	bl	8000e26 <LoRa_gotoMode>
			HAL_Delay(10);
 80013b0:	200a      	movs	r0, #10
 80013b2:	f001 fe73 	bl	800309c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80013b6:	2101      	movs	r1, #1
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff3c 	bl	8001236 <LoRa_read>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f001 fe6a 	bl	800309c <HAL_Delay>
			data = read | 0x80;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ce:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	461a      	mov	r2, r3
 80013d4:	2101      	movs	r1, #1
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff47 	bl	800126a <LoRa_write>
			HAL_Delay(100);
 80013dc:	2064      	movs	r0, #100	; 0x64
 80013de:	f001 fe5d 	bl	800309c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4619      	mov	r1, r3
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fe55 	bl	8001098 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80013f4:	4619      	mov	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff feb0 	bl	800115c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001402:	4619      	mov	r1, r3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff febd 	bl	8001184 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800140a:	2223      	movs	r2, #35	; 0x23
 800140c:	210c      	movs	r1, #12
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff2b 	bl	800126a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fef3 	bl	8001200 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fe68 	bl	80010f8 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001428:	22ff      	movs	r2, #255	; 0xff
 800142a:	211f      	movs	r1, #31
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff1c 	bl	800126a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	b2da      	uxtb	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4413      	add	r3, r2
 800144c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	461a      	mov	r2, r3
 8001452:	211d      	movs	r1, #29
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff08 	bl	800126a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fde6 	bl	800102c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	b29b      	uxth	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	2120      	movs	r1, #32
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fefb 	bl	800126a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	2121      	movs	r1, #33	; 0x21
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fef3 	bl	800126a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fed5 	bl	8001236 <LoRa_read>
 800148c:	4603      	mov	r3, r0
 800148e:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001496:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	461a      	mov	r2, r3
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fee3 	bl	800126a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80014a4:	2101      	movs	r1, #1
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fcbd 	bl	8000e26 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80014b2:	200a      	movs	r0, #10
 80014b4:	f001 fdf2 	bl	800309c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80014b8:	2142      	movs	r1, #66	; 0x42
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff febb 	bl	8001236 <LoRa_read>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d101      	bne.n	80014ce <LoRa_init+0x13c>
				return LORA_OK;
 80014ca:	23c8      	movs	r3, #200	; 0xc8
 80014cc:	e004      	b.n	80014d8 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80014ce:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80014d2:	e001      	b.n	80014d8 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80014d4:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <LL_DMA_SetDataTransferDirection+0x44>)
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	4413      	add	r3, r2
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001614:	4908      	ldr	r1, [pc, #32]	; (8001638 <LL_DMA_SetDataTransferDirection+0x44>)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	440b      	add	r3, r1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	440b      	add	r3, r1
 8001622:	4619      	mov	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	08005fb4 	.word	0x08005fb4

0800163c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <LL_DMA_SetMode+0x44>)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4413      	add	r3, r2
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800165c:	4908      	ldr	r1, [pc, #32]	; (8001680 <LL_DMA_SetMode+0x44>)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	440b      	add	r3, r1
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	440b      	add	r3, r1
 800166a:	4619      	mov	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	08005fb4 	.word	0x08005fb4

08001684 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <LL_DMA_SetPeriphIncMode+0x44>)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80016a4:	4908      	ldr	r1, [pc, #32]	; (80016c8 <LL_DMA_SetPeriphIncMode+0x44>)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	440b      	add	r3, r1
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	440b      	add	r3, r1
 80016b2:	4619      	mov	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	08005fb4 	.word	0x08005fb4

080016cc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <LL_DMA_SetMemoryIncMode+0x44>)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80016ec:	4908      	ldr	r1, [pc, #32]	; (8001710 <LL_DMA_SetMemoryIncMode+0x44>)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	440b      	add	r3, r1
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	440b      	add	r3, r1
 80016fa:	4619      	mov	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	08005fb4 	.word	0x08005fb4

08001714 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <LL_DMA_SetPeriphSize+0x44>)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4413      	add	r3, r2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001734:	4908      	ldr	r1, [pc, #32]	; (8001758 <LL_DMA_SetPeriphSize+0x44>)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	440b      	add	r3, r1
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	440b      	add	r3, r1
 8001742:	4619      	mov	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	08005fb4 	.word	0x08005fb4

0800175c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <LL_DMA_SetMemorySize+0x44>)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	4413      	add	r3, r2
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800177c:	4908      	ldr	r1, [pc, #32]	; (80017a0 <LL_DMA_SetMemorySize+0x44>)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	440b      	add	r3, r1
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	440b      	add	r3, r1
 800178a:	4619      	mov	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	08005fb4 	.word	0x08005fb4

080017a4 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4413      	add	r3, r2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017c4:	4908      	ldr	r1, [pc, #32]	; (80017e8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	440b      	add	r3, r1
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	440b      	add	r3, r1
 80017d2:	4619      	mov	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	08005fb4 	.word	0x08005fb4

080017ec <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <LL_DMA_SetDataLength+0x44>)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	4413      	add	r3, r2
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4413      	add	r3, r2
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	041b      	lsls	r3, r3, #16
 800180c:	4908      	ldr	r1, [pc, #32]	; (8001830 <LL_DMA_SetDataLength+0x44>)
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	440a      	add	r2, r1
 8001812:	7812      	ldrb	r2, [r2, #0]
 8001814:	4611      	mov	r1, r2
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	440a      	add	r2, r1
 800181a:	4611      	mov	r1, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	08005fb4 	.word	0x08005fb4

08001834 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001840:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <LL_DMA_SetChannelSelection+0x44>)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	4413      	add	r3, r2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001854:	4908      	ldr	r1, [pc, #32]	; (8001878 <LL_DMA_SetChannelSelection+0x44>)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	440b      	add	r3, r1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	440b      	add	r3, r1
 8001862:	4619      	mov	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	08005fb4 	.word	0x08005fb4

0800187c <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001886:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <LL_DMA_DisableFifoMode+0x3c>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4413      	add	r3, r2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <LL_DMA_DisableFifoMode+0x3c>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	440a      	add	r2, r1
 800189c:	7812      	ldrb	r2, [r2, #0]
 800189e:	4611      	mov	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	440a      	add	r2, r1
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	6153      	str	r3, [r2, #20]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	08005fb4 	.word	0x08005fb4

080018bc <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2b40      	cmp	r3, #64	; 0x40
 80018ce:	d114      	bne.n	80018fa <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 80018d0:	4a17      	ldr	r2, [pc, #92]	; (8001930 <LL_DMA_ConfigAddresses+0x74>)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	4413      	add	r3, r2
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	461a      	mov	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <LL_DMA_ConfigAddresses+0x74>)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	4413      	add	r3, r2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	461a      	mov	r2, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 80018f8:	e013      	b.n	8001922 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80018fa:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <LL_DMA_ConfigAddresses+0x74>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4413      	add	r3, r2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 800190e:	4a08      	ldr	r2, [pc, #32]	; (8001930 <LL_DMA_ConfigAddresses+0x74>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	461a      	mov	r2, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	60d3      	str	r3, [r2, #12]
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	08005fb4 	.word	0x08005fb4

08001934 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <LL_DMA_EnableIT_TC+0x3c>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <LL_DMA_EnableIT_TC+0x3c>)
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	440a      	add	r2, r1
 8001954:	7812      	ldrb	r2, [r2, #0]
 8001956:	4611      	mov	r1, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	440a      	add	r2, r1
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	6013      	str	r3, [r2, #0]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	08005fb4 	.word	0x08005fb4

08001974 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <LL_RCC_HSI_Enable+0x1c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <LL_RCC_HSI_Enable+0x1c>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800

08001994 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <LL_RCC_HSI_IsReady+0x20>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40023800 	.word	0x40023800

080019b8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4904      	ldr	r1, [pc, #16]	; (80019e0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <LL_RCC_SetSysClkSource+0x24>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 0203 	bic.w	r2, r3, #3
 80019f4:	4904      	ldr	r1, [pc, #16]	; (8001a08 <LL_RCC_SetSysClkSource+0x24>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40023800 	.word	0x40023800

08001a0c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <LL_RCC_GetSysClkSource+0x18>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	4904      	ldr	r1, [pc, #16]	; (8001a4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40023800 	.word	0x40023800

08001a50 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a60:	4904      	ldr	r1, [pc, #16]	; (8001a74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40023800 	.word	0x40023800

08001a78 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a88:	4904      	ldr	r1, [pc, #16]	; (8001a9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <LL_RCC_SetTIMPrescaler+0x28>)
 8001aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ab2:	4905      	ldr	r1, [pc, #20]	; (8001ac8 <LL_RCC_SetTIMPrescaler+0x28>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40023800 	.word	0x40023800

08001acc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <LL_RCC_PLL_Enable+0x1c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <LL_RCC_PLL_Enable+0x1c>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800

08001aec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <LL_RCC_PLL_IsReady+0x24>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	68f9      	ldr	r1, [r7, #12]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	0192      	lsls	r2, r2, #6
 8001b34:	430a      	orrs	r2, r1
 8001b36:	490c      	ldr	r1, [pc, #48]	; (8001b68 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b44:	4908      	ldr	r1, [pc, #32]	; (8001b68 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8001b54:	4904      	ldr	r1, [pc, #16]	; (8001b68 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	ffbf8000 	.word	0xffbf8000

08001b70 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b7c:	4907      	ldr	r1, [pc, #28]	; (8001b9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <LL_SYSCFG_SetEXTISource+0x58>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	43db      	mvns	r3, r3
 8001bec:	ea02 0103 	and.w	r1, r2, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	fa03 f202 	lsl.w	r2, r3, r2
 8001c0e:	4806      	ldr	r0, [pc, #24]	; (8001c28 <LL_SYSCFG_SetEXTISource+0x58>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	430a      	orrs	r2, r1
 8001c16:	3302      	adds	r3, #2
 8001c18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40013800 	.word	0x40013800

08001c2c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <LL_FLASH_SetLatency+0x24>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 020f 	bic.w	r2, r3, #15
 8001c3c:	4904      	ldr	r1, [pc, #16]	; (8001c50 <LL_FLASH_SetLatency+0x24>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40023c00 	.word	0x40023c00

08001c54 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <LL_FLASH_GetLatency+0x18>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 030f 	and.w	r3, r3, #15
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023c00 	.word	0x40023c00

08001c70 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <LL_PWR_EnableOverDriveMode+0x1c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <LL_PWR_EnableOverDriveMode+0x1c>)
 8001c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40007000 	.word	0x40007000

08001c90 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ca0:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40007000 	.word	0x40007000

08001ce0 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	601a      	str	r2, [r3, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d01c      	beq.n	8001d4a <LL_TIM_OC_DisableFast+0x4a>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d017      	beq.n	8001d46 <LL_TIM_OC_DisableFast+0x46>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d012      	beq.n	8001d42 <LL_TIM_OC_DisableFast+0x42>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b40      	cmp	r3, #64	; 0x40
 8001d20:	d00d      	beq.n	8001d3e <LL_TIM_OC_DisableFast+0x3e>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d28:	d007      	beq.n	8001d3a <LL_TIM_OC_DisableFast+0x3a>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d30:	d101      	bne.n	8001d36 <LL_TIM_OC_DisableFast+0x36>
 8001d32:	2305      	movs	r3, #5
 8001d34:	e00a      	b.n	8001d4c <LL_TIM_OC_DisableFast+0x4c>
 8001d36:	2306      	movs	r3, #6
 8001d38:	e008      	b.n	8001d4c <LL_TIM_OC_DisableFast+0x4c>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e006      	b.n	8001d4c <LL_TIM_OC_DisableFast+0x4c>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <LL_TIM_OC_DisableFast+0x4c>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <LL_TIM_OC_DisableFast+0x4c>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <LL_TIM_OC_DisableFast+0x4c>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3318      	adds	r3, #24
 8001d52:	4619      	mov	r1, r3
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <LL_TIM_OC_DisableFast+0x84>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	440b      	add	r3, r1
 8001d5c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	4908      	ldr	r1, [pc, #32]	; (8001d88 <LL_TIM_OC_DisableFast+0x88>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	408b      	lsls	r3, r1
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	401a      	ands	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	601a      	str	r2, [r3, #0]

}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	08005fbc 	.word	0x08005fbc
 8001d88:	08005fc4 	.word	0x08005fc4

08001d8c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d01c      	beq.n	8001dd6 <LL_TIM_OC_EnablePreload+0x4a>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d017      	beq.n	8001dd2 <LL_TIM_OC_EnablePreload+0x46>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b10      	cmp	r3, #16
 8001da6:	d012      	beq.n	8001dce <LL_TIM_OC_EnablePreload+0x42>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b40      	cmp	r3, #64	; 0x40
 8001dac:	d00d      	beq.n	8001dca <LL_TIM_OC_EnablePreload+0x3e>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db4:	d007      	beq.n	8001dc6 <LL_TIM_OC_EnablePreload+0x3a>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dbc:	d101      	bne.n	8001dc2 <LL_TIM_OC_EnablePreload+0x36>
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e00a      	b.n	8001dd8 <LL_TIM_OC_EnablePreload+0x4c>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e008      	b.n	8001dd8 <LL_TIM_OC_EnablePreload+0x4c>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e006      	b.n	8001dd8 <LL_TIM_OC_EnablePreload+0x4c>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <LL_TIM_OC_EnablePreload+0x4c>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <LL_TIM_OC_EnablePreload+0x4c>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <LL_TIM_OC_EnablePreload+0x4c>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3318      	adds	r3, #24
 8001dde:	4619      	mov	r1, r3
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <LL_TIM_OC_EnablePreload+0x80>)
 8001de4:	5cd3      	ldrb	r3, [r2, r3]
 8001de6:	440b      	add	r3, r1
 8001de8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	4907      	ldr	r1, [pc, #28]	; (8001e10 <LL_TIM_OC_EnablePreload+0x84>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	4619      	mov	r1, r3
 8001df6:	2308      	movs	r3, #8
 8001df8:	408b      	lsls	r3, r1
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	601a      	str	r2, [r3, #0]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	08005fbc 	.word	0x08005fbc
 8001e10:	08005fc4 	.word	0x08005fc4

08001e14 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e42:	f023 0307 	bic.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	605a      	str	r2, [r3, #4]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	609a      	str	r2, [r3, #8]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60da      	str	r2, [r3, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	615a      	str	r2, [r3, #20]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b089      	sub	sp, #36	; 0x24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	330c      	adds	r3, #12
 8001f1e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	e853 3f00 	ldrex	r3, [r3]
 8001f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f043 0320 	orr.w	r3, r3, #32
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	330c      	adds	r3, #12
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	61ba      	str	r2, [r7, #24]
 8001f38:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f3a:	6979      	ldr	r1, [r7, #20]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	e841 2300 	strex	r3, r2, [r1]
 8001f42:	613b      	str	r3, [r7, #16]
   return(result);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1e7      	bne.n	8001f1a <LL_USART_EnableIT_RXNE+0x8>
}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	3724      	adds	r7, #36	; 0x24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3314      	adds	r3, #20
 8001f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	e853 3f00 	ldrex	r3, [r3]
 8001f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3314      	adds	r3, #20
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	61ba      	str	r2, [r7, #24]
 8001f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f80:	6979      	ldr	r1, [r7, #20]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	e841 2300 	strex	r3, r2, [r1]
 8001f88:	613b      	str	r3, [r7, #16]
   return(result);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e7      	bne.n	8001f60 <LL_USART_EnableDMAReq_TX+0x8>
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	605a      	str	r2, [r3, #4]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	613b      	str	r3, [r7, #16]
  return result;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2103      	movs	r1, #3
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	61bb      	str	r3, [r7, #24]
  return result;
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	431a      	orrs	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	601a      	str	r2, [r3, #0]
}
 8002026:	bf00      	nop
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002032:	b480      	push	{r7}
 8002034:	b089      	sub	sp, #36	; 0x24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	613b      	str	r3, [r7, #16]
  return result;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2103      	movs	r1, #3
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	401a      	ands	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	61bb      	str	r3, [r7, #24]
  return result;
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	431a      	orrs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	60da      	str	r2, [r3, #12]
}
 8002084:	bf00      	nop
 8002086:	3724      	adds	r7, #36	; 0x24
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	619a      	str	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	041a      	lsls	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b0ec      	sub	sp, #432	; 0x1b0
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d2:	f000 ff71 	bl	8002fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d6:	f000 f977 	bl	80023c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020da:	f000 fba5 	bl	8002828 <MX_GPIO_Init>
  MX_DMA_Init();
 80020de:	f000 fb8b 	bl	80027f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020e2:	f000 fa71 	bl	80025c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80020e6:	f000 fb0d 	bl	8002704 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80020ea:	f000 f9f9 	bl	80024e0 <MX_TIM3_Init>
  MX_SPI2_Init();
 80020ee:	f000 f9c1 	bl	8002474 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t welcome_msg[] = "\e[2J\e[HAMP Kart UART Interface\r\n=======================\r\n";
 80020f2:	4bab      	ldr	r3, [pc, #684]	; (80023a0 <main+0x2d4>)
 80020f4:	f507 74ac 	add.w	r4, r7, #344	; 0x158
 80020f8:	461d      	mov	r5, r3
 80020fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002106:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800210a:	c403      	stmia	r4!, {r0, r1}
 800210c:	8022      	strh	r2, [r4, #0]
//  HAL_UART_Transmit_IT(&huart2, welcome_msg, sizeof(welcome_msg));
  for (int i = 0; i < sizeof(welcome_msg); i++)
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002114:	e015      	b.n	8002142 <main+0x76>
  {
	  LL_USART_TransmitData8(USART2, welcome_msg[i]);
 8002116:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800211a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800211e:	4413      	add	r3, r2
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	489f      	ldr	r0, [pc, #636]	; (80023a4 <main+0x2d8>)
 8002126:	f7ff ff46 	bl	8001fb6 <LL_USART_TransmitData8>
	  while (!LL_USART_IsActiveFlag_TXE(USART2));
 800212a:	bf00      	nop
 800212c:	489d      	ldr	r0, [pc, #628]	; (80023a4 <main+0x2d8>)
 800212e:	f7ff fedd 	bl	8001eec <LL_USART_IsActiveFlag_TXE>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f9      	beq.n	800212c <main+0x60>
  for (int i = 0; i < sizeof(welcome_msg); i++)
 8002138:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800213c:	3301      	adds	r3, #1
 800213e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002142:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002146:	2b39      	cmp	r3, #57	; 0x39
 8002148:	d9e5      	bls.n	8002116 <main+0x4a>
  }

  LoRa lora;
  lora = newLoRa();
 800214a:	463b      	mov	r3, r7
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fe23 	bl	8000d98 <newLoRa>
 8002152:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002156:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800215a:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 800215e:	461d      	mov	r5, r3
 8002160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002168:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800216c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  lora.CS_port = SPI2_CS_GPIO_Port;
 8002170:	4b8d      	ldr	r3, [pc, #564]	; (80023a8 <main+0x2dc>)
 8002172:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  lora.CS_pin = SPI2_CS_Pin;
 8002176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217a:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
  lora.reset_port = RFM_RST_GPIO_Port;
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <main+0x2e0>)
 8002180:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  lora.reset_pin = RFM_RST_Pin;
 8002184:	2308      	movs	r3, #8
 8002186:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
  lora.DIO0_port = RFM_G0_GPIO_Port;
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <main+0x2e0>)
 800218c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  lora.DIO0_pin = RFM_G0_Pin;
 8002190:	2301      	movs	r3, #1
 8002192:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
  lora.hSPIx = &hspi2;
 8002196:	4b86      	ldr	r3, [pc, #536]	; (80023b0 <main+0x2e4>)
 8002198:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

  lora.frequency = 915;
 800219c:	f240 3393 	movw	r3, #915	; 0x393
 80021a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  LoRa_reset(&lora);
 80021a4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe fe1e 	bl	8000dea <LoRa_reset>
  uint16_t lora_status = LoRa_init(&lora);
 80021ae:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f8ed 	bl	8001392 <LoRa_init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
  if (lora_status == LORA_OK)
 80021be:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 80021c2:	2bc8      	cmp	r3, #200	; 0xc8
 80021c4:	d128      	bne.n	8002218 <main+0x14c>
  {
  	  uint8_t msg[] = "LoRa OK\r\n";
 80021c6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80021ca:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80021ce:	4a79      	ldr	r2, [pc, #484]	; (80023b4 <main+0x2e8>)
 80021d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80021d2:	c303      	stmia	r3!, {r0, r1}
 80021d4:	801a      	strh	r2, [r3, #0]
  	  //  HAL_UART_Transmit_IT(&huart2, welcome_msg, sizeof(welcome_msg));
  	  for (int i = 0; i < sizeof(msg); i++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80021dc:	e017      	b.n	800220e <main+0x142>
  	  {
  		  LL_USART_TransmitData8(USART2, msg[i]);
 80021de:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80021e2:	f5a3 72ac 	sub.w	r2, r3, #344	; 0x158
 80021e6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80021ea:	4413      	add	r3, r2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	486c      	ldr	r0, [pc, #432]	; (80023a4 <main+0x2d8>)
 80021f2:	f7ff fee0 	bl	8001fb6 <LL_USART_TransmitData8>
  		  while (!LL_USART_IsActiveFlag_TXE(USART2));
 80021f6:	bf00      	nop
 80021f8:	486a      	ldr	r0, [pc, #424]	; (80023a4 <main+0x2d8>)
 80021fa:	f7ff fe77 	bl	8001eec <LL_USART_IsActiveFlag_TXE>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f9      	beq.n	80021f8 <main+0x12c>
  	  for (int i = 0; i < sizeof(msg); i++)
 8002204:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002208:	3301      	adds	r3, #1
 800220a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800220e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002212:	2b09      	cmp	r3, #9
 8002214:	d9e3      	bls.n	80021de <main+0x112>
 8002216:	e029      	b.n	800226c <main+0x1a0>
  	  }
  }
  else
  {
  	  uint8_t msg[] = "LoRa FAILED\r\n";
 8002218:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800221c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002220:	4a65      	ldr	r2, [pc, #404]	; (80023b8 <main+0x2ec>)
 8002222:	461c      	mov	r4, r3
 8002224:	4613      	mov	r3, r2
 8002226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002228:	c407      	stmia	r4!, {r0, r1, r2}
 800222a:	8023      	strh	r3, [r4, #0]
  	  //  HAL_UART_Transmit_IT(&huart2, welcome_msg, sizeof(welcome_msg));
  	  for (int i = 0; i < sizeof(msg); i++)
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002232:	e017      	b.n	8002264 <main+0x198>
  	  {
  		  LL_USART_TransmitData8(USART2, msg[i]);
 8002234:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002238:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 800223c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002240:	4413      	add	r3, r2
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	4857      	ldr	r0, [pc, #348]	; (80023a4 <main+0x2d8>)
 8002248:	f7ff feb5 	bl	8001fb6 <LL_USART_TransmitData8>
  		  while (!LL_USART_IsActiveFlag_TXE(USART2));
 800224c:	bf00      	nop
 800224e:	4855      	ldr	r0, [pc, #340]	; (80023a4 <main+0x2d8>)
 8002250:	f7ff fe4c 	bl	8001eec <LL_USART_IsActiveFlag_TXE>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f9      	beq.n	800224e <main+0x182>
  	  for (int i = 0; i < sizeof(msg); i++)
 800225a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800225e:	3301      	adds	r3, #1
 8002260:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002264:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002268:	2b0d      	cmp	r3, #13
 800226a:	d9e3      	bls.n	8002234 <main+0x168>
//  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_12); // SPI2 CS
//  printf(recv_data);

  uint8_t recv_data[200];
  uint8_t packet_size;
  LoRa_startReceiving(&lora);
 800226c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f822 	bl	80012ba <LoRa_startReceiving>
  while (1)
  {
	  LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8002276:	2120      	movs	r1, #32
 8002278:	4850      	ldr	r0, [pc, #320]	; (80023bc <main+0x2f0>)
 800227a:	f7ff ff09 	bl	8002090 <LL_GPIO_SetOutputPin>
	  packet_size = LoRa_receive(&lora, recv_data, 8);
 800227e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002282:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8002286:	2208      	movs	r2, #8
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f822 	bl	80012d2 <LoRa_receive>
 800228e:	4603      	mov	r3, r0
 8002290:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
	  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8002294:	2120      	movs	r1, #32
 8002296:	4849      	ldr	r0, [pc, #292]	; (80023bc <main+0x2f0>)
 8002298:	f7ff ff08 	bl	80020ac <LL_GPIO_ResetOutputPin>
	  if (packet_size > 0)
 800229c:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d04d      	beq.n	8002340 <main+0x274>
	  {
		  // data was received
		  for (int i = 0; i < packet_size; i++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022aa:	e017      	b.n	80022dc <main+0x210>
		  {
			  LL_USART_TransmitData8(USART2, recv_data[i]);
 80022ac:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80022b0:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 80022b4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022b8:	4413      	add	r3, r2
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	4839      	ldr	r0, [pc, #228]	; (80023a4 <main+0x2d8>)
 80022c0:	f7ff fe79 	bl	8001fb6 <LL_USART_TransmitData8>
			  while (!LL_USART_IsActiveFlag_TXE(USART2));
 80022c4:	bf00      	nop
 80022c6:	4837      	ldr	r0, [pc, #220]	; (80023a4 <main+0x2d8>)
 80022c8:	f7ff fe10 	bl	8001eec <LL_USART_IsActiveFlag_TXE>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f9      	beq.n	80022c6 <main+0x1fa>
		  for (int i = 0; i < packet_size; i++)
 80022d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022d6:	3301      	adds	r3, #1
 80022d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022dc:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 80022e0:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbe1      	blt.n	80022ac <main+0x1e0>
		  }

		  uint8_t msg[] = "\r\n";
 80022e8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80022ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022f0:	4a33      	ldr	r2, [pc, #204]	; (80023c0 <main+0x2f4>)
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	4611      	mov	r1, r2
 80022f6:	8019      	strh	r1, [r3, #0]
 80022f8:	3302      	adds	r3, #2
 80022fa:	0c12      	lsrs	r2, r2, #16
 80022fc:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < sizeof(msg); i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002304:	e017      	b.n	8002336 <main+0x26a>
		  {
			  LL_USART_TransmitData8(USART2, msg[i]);
 8002306:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800230a:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 800230e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002312:	4413      	add	r3, r2
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	4822      	ldr	r0, [pc, #136]	; (80023a4 <main+0x2d8>)
 800231a:	f7ff fe4c 	bl	8001fb6 <LL_USART_TransmitData8>
			  while (!LL_USART_IsActiveFlag_TXE(USART2));
 800231e:	bf00      	nop
 8002320:	4820      	ldr	r0, [pc, #128]	; (80023a4 <main+0x2d8>)
 8002322:	f7ff fde3 	bl	8001eec <LL_USART_IsActiveFlag_TXE>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f9      	beq.n	8002320 <main+0x254>
		  for (int i = 0; i < sizeof(msg); i++)
 800232c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002330:	3301      	adds	r3, #1
 8002332:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002336:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800233a:	2b02      	cmp	r3, #2
 800233c:	d9e3      	bls.n	8002306 <main+0x23a>
 800233e:	e02a      	b.n	8002396 <main+0x2ca>
		  }
	  }
	  else
	  {
		  uint8_t msg[] = "Nothing received!\r\n";
 8002340:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002344:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002348:	4a1e      	ldr	r2, [pc, #120]	; (80023c4 <main+0x2f8>)
 800234a:	461c      	mov	r4, r3
 800234c:	4615      	mov	r5, r2
 800234e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002352:	682b      	ldr	r3, [r5, #0]
 8002354:	6023      	str	r3, [r4, #0]
		  //  HAL_UART_Transmit_IT(&huart2, welcome_msg, sizeof(welcome_msg));
		  for (int i = 0; i < sizeof(msg); i++)
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800235c:	e017      	b.n	800238e <main+0x2c2>
		  {
			  LL_USART_TransmitData8(USART2, msg[i]);
 800235e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8002362:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8002366:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800236a:	4413      	add	r3, r2
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	4619      	mov	r1, r3
 8002370:	480c      	ldr	r0, [pc, #48]	; (80023a4 <main+0x2d8>)
 8002372:	f7ff fe20 	bl	8001fb6 <LL_USART_TransmitData8>
			  while (!LL_USART_IsActiveFlag_TXE(USART2));
 8002376:	bf00      	nop
 8002378:	480a      	ldr	r0, [pc, #40]	; (80023a4 <main+0x2d8>)
 800237a:	f7ff fdb7 	bl	8001eec <LL_USART_IsActiveFlag_TXE>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f9      	beq.n	8002378 <main+0x2ac>
		  for (int i = 0; i < sizeof(msg); i++)
 8002384:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002388:	3301      	adds	r3, #1
 800238a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800238e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002392:	2b13      	cmp	r3, #19
 8002394:	d9e3      	bls.n	800235e <main+0x292>
		  }
	  }
	  HAL_Delay(100);
 8002396:	2064      	movs	r0, #100	; 0x64
 8002398:	f000 fe80 	bl	800309c <HAL_Delay>
	  LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800239c:	e76b      	b.n	8002276 <main+0x1aa>
 800239e:	bf00      	nop
 80023a0:	08005f10 	.word	0x08005f10
 80023a4:	40004400 	.word	0x40004400
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	20000078 	.word	0x20000078
 80023b4:	08005f4c 	.word	0x08005f4c
 80023b8:	08005f58 	.word	0x08005f58
 80023bc:	40020000 	.word	0x40020000
 80023c0:	08005f68 	.word	0x08005f68
 80023c4:	08005f6c 	.word	0x08005f6c

080023c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80023cc:	2005      	movs	r0, #5
 80023ce:	f7ff fc2d 	bl	8001c2c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80023d2:	bf00      	nop
 80023d4:	f7ff fc3e 	bl	8001c54 <LL_FLASH_GetLatency>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d1fa      	bne.n	80023d4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80023de:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80023e2:	f7ff fc55 	bl	8001c90 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 80023e6:	f7ff fc43 	bl	8001c70 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 80023ea:	2010      	movs	r0, #16
 80023ec:	f7ff fae4 	bl	80019b8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80023f0:	f7ff fac0 	bl	8001974 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80023f4:	bf00      	nop
 80023f6:	f7ff facd 	bl	8001994 <LL_RCC_HSI_IsReady>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d1fa      	bne.n	80023f6 <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 180, LL_RCC_PLLP_DIV_2);
 8002400:	2300      	movs	r3, #0
 8002402:	22b4      	movs	r2, #180	; 0xb4
 8002404:	2108      	movs	r1, #8
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff fb84 	bl	8001b14 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800240c:	f7ff fb5e 	bl	8001acc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002410:	bf00      	nop
 8002412:	f7ff fb6b 	bl	8001aec <LL_RCC_PLL_IsReady>
 8002416:	4603      	mov	r3, r0
 8002418:	2b01      	cmp	r3, #1
 800241a:	d1fa      	bne.n	8002412 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800241c:	bf00      	nop
 800241e:	f7ff fc4b 	bl	8001cb8 <LL_PWR_IsActiveFlag_VOS>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0fa      	beq.n	800241e <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff fafd 	bl	8001a28 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800242e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002432:	f7ff fb0d 	bl	8001a50 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8002436:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800243a:	f7ff fb1d 	bl	8001a78 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800243e:	2002      	movs	r0, #2
 8002440:	f7ff fad0 	bl	80019e4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002444:	bf00      	nop
 8002446:	f7ff fae1 	bl	8001a0c <LL_RCC_GetSysClkSource>
 800244a:	4603      	mov	r3, r0
 800244c:	2b08      	cmp	r3, #8
 800244e:	d1fa      	bne.n	8002446 <SystemClock_Config+0x7e>
  {

  }
  LL_SetSystemCoreClock(180000000);
 8002450:	4807      	ldr	r0, [pc, #28]	; (8002470 <SystemClock_Config+0xa8>)
 8002452:	f003 f873 	bl	800553c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8002456:	2000      	movs	r0, #0
 8002458:	f000 fdd0 	bl	8002ffc <HAL_InitTick>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002462:	f000 fa9f 	bl	80029a4 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8002466:	2000      	movs	r0, #0
 8002468:	f7ff fb1a 	bl	8001aa0 <LL_RCC_SetTIMPrescaler>
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	0aba9500 	.word	0x0aba9500

08002474 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <MX_SPI2_Init+0x64>)
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <MX_SPI2_Init+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <MX_SPI2_Init+0x64>)
 8002480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <MX_SPI2_Init+0x64>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <MX_SPI2_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_SPI2_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <MX_SPI2_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024a8:	2218      	movs	r2, #24
 80024aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024c0:	220a      	movs	r2, #10
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <MX_SPI2_Init+0x64>)
 80024c6:	f001 f8a0 	bl	800360a <HAL_SPI_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024d0:	f000 fa68 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
//  LL_SPI_Enable(SPI2);
  /* USER CODE END SPI2_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000078 	.word	0x20000078
 80024dc:	40003800 	.word	0x40003800

080024e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b094      	sub	sp, #80	; 0x50
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80024f6:	f107 031c 	add.w	r3, r7, #28
 80024fa:	2220      	movs	r2, #32
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 f84c 	bl	800559c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	611a      	str	r2, [r3, #16]
 8002512:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002514:	2002      	movs	r0, #2
 8002516:	f7ff fb43 	bl	8001ba0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_TIM_OC_SetCompareCH1(TIM3, 5); // 50% PWM
 800251a:	2105      	movs	r1, #5
 800251c:	4828      	ldr	r0, [pc, #160]	; (80025c0 <MX_TIM3_Init+0xe0>)
 800251e:	f7ff fc79 	bl	8001e14 <LL_TIM_OC_SetCompareCH1>
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 44999;
 8002522:	f64a 73c7 	movw	r3, #44999	; 0xafc7
 8002526:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002528:	2300      	movs	r3, #0
 800252a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 9;
 800252c:	2309      	movs	r3, #9
 800252e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002530:	2300      	movs	r3, #0
 8002532:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002534:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002538:	4619      	mov	r1, r3
 800253a:	4821      	ldr	r0, [pc, #132]	; (80025c0 <MX_TIM3_Init+0xe0>)
 800253c:	f002 fa96 	bl	8004a6c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002540:	481f      	ldr	r0, [pc, #124]	; (80025c0 <MX_TIM3_Init+0xe0>)
 8002542:	f7ff fbcd 	bl	8001ce0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002546:	2100      	movs	r1, #0
 8002548:	481d      	ldr	r0, [pc, #116]	; (80025c0 <MX_TIM3_Init+0xe0>)
 800254a:	f7ff fc71 	bl	8001e30 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 800254e:	2101      	movs	r1, #1
 8002550:	481b      	ldr	r0, [pc, #108]	; (80025c0 <MX_TIM3_Init+0xe0>)
 8002552:	f7ff fc1b 	bl	8001d8c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002556:	2360      	movs	r3, #96	; 0x60
 8002558:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002566:	2300      	movs	r3, #0
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800256a:	f107 031c 	add.w	r3, r7, #28
 800256e:	461a      	mov	r2, r3
 8002570:	2101      	movs	r1, #1
 8002572:	4813      	ldr	r0, [pc, #76]	; (80025c0 <MX_TIM3_Init+0xe0>)
 8002574:	f002 fb14 	bl	8004ba0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002578:	2101      	movs	r1, #1
 800257a:	4811      	ldr	r0, [pc, #68]	; (80025c0 <MX_TIM3_Init+0xe0>)
 800257c:	f7ff fbc0 	bl	8001d00 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002580:	2100      	movs	r1, #0
 8002582:	480f      	ldr	r0, [pc, #60]	; (80025c0 <MX_TIM3_Init+0xe0>)
 8002584:	f7ff fc69 	bl	8001e5a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002588:	480d      	ldr	r0, [pc, #52]	; (80025c0 <MX_TIM3_Init+0xe0>)
 800258a:	f7ff fc79 	bl	8001e80 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800258e:	2004      	movs	r0, #4
 8002590:	f7ff faee 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002594:	2340      	movs	r3, #64	; 0x40
 8002596:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002598:	2302      	movs	r3, #2
 800259a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80025a8:	2302      	movs	r3, #2
 80025aa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4804      	ldr	r0, [pc, #16]	; (80025c4 <MX_TIM3_Init+0xe4>)
 80025b2:	f001 fffd 	bl	80045b0 <LL_GPIO_Init>

}
 80025b6:	bf00      	nop
 80025b8:	3750      	adds	r7, #80	; 0x50
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40020800 	.word	0x40020800

080025c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b091      	sub	sp, #68	; 0x44
 80025cc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	615a      	str	r2, [r3, #20]
 80025e0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
 80025f0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80025f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80025f6:	f7ff fad3 	bl	8001ba0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f7ff fab8 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002600:	230c      	movs	r3, #12
 8002602:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002604:	2302      	movs	r3, #2
 8002606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002614:	2307      	movs	r3, #7
 8002616:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	4619      	mov	r1, r3
 800261c:	4835      	ldr	r0, [pc, #212]	; (80026f4 <MX_USART2_UART_Init+0x12c>)
 800261e:	f001 ffc7 	bl	80045b0 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8002622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002626:	2106      	movs	r1, #6
 8002628:	4833      	ldr	r0, [pc, #204]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 800262a:	f7ff f903 	bl	8001834 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800262e:	2240      	movs	r2, #64	; 0x40
 8002630:	2106      	movs	r1, #6
 8002632:	4831      	ldr	r0, [pc, #196]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 8002634:	f7fe ffde 	bl	80015f4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8002638:	2200      	movs	r2, #0
 800263a:	2106      	movs	r1, #6
 800263c:	482e      	ldr	r0, [pc, #184]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 800263e:	f7ff f8b1 	bl	80017a4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8002642:	2200      	movs	r2, #0
 8002644:	2106      	movs	r1, #6
 8002646:	482c      	ldr	r0, [pc, #176]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 8002648:	f7fe fff8 	bl	800163c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800264c:	2200      	movs	r2, #0
 800264e:	2106      	movs	r1, #6
 8002650:	4829      	ldr	r0, [pc, #164]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 8002652:	f7ff f817 	bl	8001684 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8002656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800265a:	2106      	movs	r1, #6
 800265c:	4826      	ldr	r0, [pc, #152]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 800265e:	f7ff f835 	bl	80016cc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8002662:	2200      	movs	r2, #0
 8002664:	2106      	movs	r1, #6
 8002666:	4824      	ldr	r0, [pc, #144]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 8002668:	f7ff f854 	bl	8001714 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 800266c:	2200      	movs	r2, #0
 800266e:	2106      	movs	r1, #6
 8002670:	4821      	ldr	r0, [pc, #132]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 8002672:	f7ff f873 	bl	800175c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8002676:	2106      	movs	r1, #6
 8002678:	481f      	ldr	r0, [pc, #124]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 800267a:	f7ff f8ff 	bl	800187c <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART2_Init 1 */
  LL_USART_EnableIT_RXNE(USART2);
 800267e:	481f      	ldr	r0, [pc, #124]	; (80026fc <MX_USART2_UART_Init+0x134>)
 8002680:	f7ff fc47 	bl	8001f12 <LL_USART_EnableIT_RXNE>

  // DMA for TX
  LL_USART_EnableDMAReq_TX(USART2);
 8002684:	481d      	ldr	r0, [pc, #116]	; (80026fc <MX_USART2_UART_Init+0x134>)
 8002686:	f7ff fc67 	bl	8001f58 <LL_USART_EnableDMAReq_TX>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_STREAM_6, (uint32_t) buffer, LL_USART_DMA_GetRegAddr(USART2), LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800268a:	4c1d      	ldr	r4, [pc, #116]	; (8002700 <MX_USART2_UART_Init+0x138>)
 800268c:	481b      	ldr	r0, [pc, #108]	; (80026fc <MX_USART2_UART_Init+0x134>)
 800268e:	f7ff fc86 	bl	8001f9e <LL_USART_DMA_GetRegAddr>
 8002692:	4603      	mov	r3, r0
 8002694:	2240      	movs	r2, #64	; 0x40
 8002696:	9200      	str	r2, [sp, #0]
 8002698:	4622      	mov	r2, r4
 800269a:	2106      	movs	r1, #6
 800269c:	4816      	ldr	r0, [pc, #88]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 800269e:	f7ff f90d 	bl	80018bc <LL_DMA_ConfigAddresses>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_6);
 80026a2:	2106      	movs	r1, #6
 80026a4:	4814      	ldr	r0, [pc, #80]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 80026a6:	f7ff f945 	bl	8001934 <LL_DMA_EnableIT_TC>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, sizeof(buffer));
 80026aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ae:	2106      	movs	r1, #6
 80026b0:	4811      	ldr	r0, [pc, #68]	; (80026f8 <MX_USART2_UART_Init+0x130>)
 80026b2:	f7ff f89b 	bl	80017ec <LL_DMA_SetDataLength>
//  LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
//  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, 5);

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80026b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80026ba:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80026c8:	230c      	movs	r3, #12
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80026d0:	2300      	movs	r3, #0
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	4619      	mov	r1, r3
 80026da:	4808      	ldr	r0, [pc, #32]	; (80026fc <MX_USART2_UART_Init+0x134>)
 80026dc:	f002 feae 	bl	800543c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80026e0:	4806      	ldr	r0, [pc, #24]	; (80026fc <MX_USART2_UART_Init+0x134>)
 80026e2:	f7ff fbed 	bl	8001ec0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <MX_USART2_UART_Init+0x134>)
 80026e8:	f7ff fbda 	bl	8001ea0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ec:	bf00      	nop
 80026ee:	373c      	adds	r7, #60	; 0x3c
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd90      	pop	{r4, r7, pc}
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40026000 	.word	0x40026000
 80026fc:	40004400 	.word	0x40004400
 8002700:	200000d0 	.word	0x200000d0

08002704 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08e      	sub	sp, #56	; 0x38
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800270a:	f107 031c 	add.w	r3, r7, #28
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]
 800271a:	615a      	str	r2, [r3, #20]
 800271c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
 800272c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800272e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002732:	f7ff fa35 	bl	8001ba0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002736:	2004      	movs	r0, #4
 8002738:	f7ff fa1a 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800273c:	2002      	movs	r0, #2
 800273e:	f7ff fa17 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002742:	2320      	movs	r3, #32
 8002744:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002746:	2302      	movs	r3, #2
 8002748:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002756:	2307      	movs	r3, #7
 8002758:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4823      	ldr	r0, [pc, #140]	; (80027ec <MX_USART3_UART_Init+0xe8>)
 8002760:	f001 ff26 	bl	80045b0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800276a:	2302      	movs	r3, #2
 800276c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800277a:	2307      	movs	r3, #7
 800277c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	4619      	mov	r1, r3
 8002782:	481b      	ldr	r0, [pc, #108]	; (80027f0 <MX_USART3_UART_Init+0xec>)
 8002784:	f001 ff14 	bl	80045b0 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002788:	f7fe feaa 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 800278c:	4603      	mov	r3, r0
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fefa 	bl	800158c <NVIC_EncodePriority>
 8002798:	4603      	mov	r3, r0
 800279a:	4619      	mov	r1, r3
 800279c:	2027      	movs	r0, #39	; 0x27
 800279e:	f7fe fecb 	bl	8001538 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80027a2:	2027      	movs	r0, #39	; 0x27
 80027a4:	f7fe feaa 	bl	80014fc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */
  LL_USART_EnableIT_RXNE(USART3);
 80027a8:	4812      	ldr	r0, [pc, #72]	; (80027f4 <MX_USART3_UART_Init+0xf0>)
 80027aa:	f7ff fbb2 	bl	8001f12 <LL_USART_EnableIT_RXNE>

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80027ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80027b2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80027bc:	2300      	movs	r3, #0
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80027c0:	230c      	movs	r3, #12
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80027c8:	2300      	movs	r3, #0
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	4619      	mov	r1, r3
 80027d2:	4808      	ldr	r0, [pc, #32]	; (80027f4 <MX_USART3_UART_Init+0xf0>)
 80027d4:	f002 fe32 	bl	800543c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80027d8:	4806      	ldr	r0, [pc, #24]	; (80027f4 <MX_USART3_UART_Init+0xf0>)
 80027da:	f7ff fb71 	bl	8001ec0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <MX_USART3_UART_Init+0xf0>)
 80027e0:	f7ff fb5e 	bl	8001ea0 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	3738      	adds	r7, #56	; 0x38
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40020800 	.word	0x40020800
 80027f0:	40020400 	.word	0x40020400
 80027f4:	40004800 	.word	0x40004800

080027f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80027fc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002800:	f7ff f9b6 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002804:	f7fe fe6c 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8002808:	4603      	mov	r3, r0
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe febc 	bl	800158c <NVIC_EncodePriority>
 8002814:	4603      	mov	r3, r0
 8002816:	4619      	mov	r1, r3
 8002818:	2011      	movs	r0, #17
 800281a:	f7fe fe8d 	bl	8001538 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800281e:	2011      	movs	r0, #17
 8002820:	f7fe fe6c 	bl	80014fc <__NVIC_EnableIRQ>

}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}

08002828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800282e:	f107 0318 	add.w	r3, r7, #24
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	463b      	mov	r3, r7
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	611a      	str	r2, [r3, #16]
 8002846:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002848:	2004      	movs	r0, #4
 800284a:	f7ff f991 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800284e:	2080      	movs	r0, #128	; 0x80
 8002850:	f7ff f98e 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002854:	2001      	movs	r0, #1
 8002856:	f7ff f98b 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800285a:	2002      	movs	r0, #2
 800285c:	f7ff f988 	bl	8001b70 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(RFM_RST_GPIO_Port, RFM_RST_Pin);
 8002860:	2108      	movs	r1, #8
 8002862:	484c      	ldr	r0, [pc, #304]	; (8002994 <MX_GPIO_Init+0x16c>)
 8002864:	f7ff fc14 	bl	8002090 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);
 8002868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800286c:	484a      	ldr	r0, [pc, #296]	; (8002998 <MX_GPIO_Init+0x170>)
 800286e:	f7ff fc0f 	bl	8002090 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8002872:	2120      	movs	r1, #32
 8002874:	4849      	ldr	r0, [pc, #292]	; (800299c <MX_GPIO_Init+0x174>)
 8002876:	f7ff fc19 	bl	80020ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800287a:	4949      	ldr	r1, [pc, #292]	; (80029a0 <MX_GPIO_Init+0x178>)
 800287c:	2002      	movs	r0, #2
 800287e:	f7ff f9a7 	bl	8001bd0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE0);
 8002882:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8002886:	2002      	movs	r0, #2
 8002888:	f7ff f9a2 	bl	8001bd0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800288c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002890:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002892:	2301      	movs	r3, #1
 8002894:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002896:	2300      	movs	r3, #0
 8002898:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800289a:	2302      	movs	r3, #2
 800289c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800289e:	f107 0318 	add.w	r3, r7, #24
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 fd00 	bl	80042a8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80028a8:	2301      	movs	r3, #1
 80028aa:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80028b0:	2300      	movs	r3, #0
 80028b2:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80028b4:	2301      	movs	r3, #1
 80028b6:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80028b8:	f107 0318 	add.w	r3, r7, #24
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 fcf3 	bl	80042a8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(Blue_user_button_GPIO_Port, Blue_user_button_Pin, LL_GPIO_PULL_UP);
 80028c2:	2201      	movs	r2, #1
 80028c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c8:	4832      	ldr	r0, [pc, #200]	; (8002994 <MX_GPIO_Init+0x16c>)
 80028ca:	f7ff fbb2 	bl	8002032 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(RFM_G0_GPIO_Port, RFM_G0_Pin, LL_GPIO_PULL_NO);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2101      	movs	r1, #1
 80028d2:	4830      	ldr	r0, [pc, #192]	; (8002994 <MX_GPIO_Init+0x16c>)
 80028d4:	f7ff fbad 	bl	8002032 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(Blue_user_button_GPIO_Port, Blue_user_button_Pin, LL_GPIO_MODE_INPUT);
 80028d8:	2200      	movs	r2, #0
 80028da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028de:	482d      	ldr	r0, [pc, #180]	; (8002994 <MX_GPIO_Init+0x16c>)
 80028e0:	f7ff fb78 	bl	8001fd4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(RFM_G0_GPIO_Port, RFM_G0_Pin, LL_GPIO_MODE_INPUT);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2101      	movs	r1, #1
 80028e8:	482a      	ldr	r0, [pc, #168]	; (8002994 <MX_GPIO_Init+0x16c>)
 80028ea:	f7ff fb73 	bl	8001fd4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = RFM_RST_Pin;
 80028ee:	2308      	movs	r3, #8
 80028f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028f2:	2301      	movs	r3, #1
 80028f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028f6:	2303      	movs	r3, #3
 80028f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RFM_RST_GPIO_Port, &GPIO_InitStruct);
 8002902:	463b      	mov	r3, r7
 8002904:	4619      	mov	r1, r3
 8002906:	4823      	ldr	r0, [pc, #140]	; (8002994 <MX_GPIO_Init+0x16c>)
 8002908:	f001 fe52 	bl	80045b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800290c:	2320      	movs	r3, #32
 800290e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002910:	2301      	movs	r3, #1
 8002912:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002920:	463b      	mov	r3, r7
 8002922:	4619      	mov	r1, r3
 8002924:	481d      	ldr	r0, [pc, #116]	; (800299c <MX_GPIO_Init+0x174>)
 8002926:	f001 fe43 	bl	80045b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800292a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800292e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002930:	2301      	movs	r3, #1
 8002932:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002940:	463b      	mov	r3, r7
 8002942:	4619      	mov	r1, r3
 8002944:	4814      	ldr	r0, [pc, #80]	; (8002998 <MX_GPIO_Init+0x170>)
 8002946:	f001 fe33 	bl	80045b0 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800294a:	f7fe fdc9 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 800294e:	4603      	mov	r3, r0
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fe19 	bl	800158c <NVIC_EncodePriority>
 800295a:	4603      	mov	r3, r0
 800295c:	4619      	mov	r1, r3
 800295e:	2006      	movs	r0, #6
 8002960:	f7fe fdea 	bl	8001538 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8002964:	2006      	movs	r0, #6
 8002966:	f7fe fdc9 	bl	80014fc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800296a:	f7fe fdb9 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 800296e:	4603      	mov	r3, r0
 8002970:	2200      	movs	r2, #0
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f7fe fe09 	bl	800158c <NVIC_EncodePriority>
 800297a:	4603      	mov	r3, r0
 800297c:	4619      	mov	r1, r3
 800297e:	2028      	movs	r0, #40	; 0x28
 8002980:	f7fe fdda 	bl	8001538 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002984:	2028      	movs	r0, #40	; 0x28
 8002986:	f7fe fdb9 	bl	80014fc <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800298a:	bf00      	nop
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40020800 	.word	0x40020800
 8002998:	40020400 	.word	0x40020400
 800299c:	40020000 	.word	0x40020000
 80029a0:	00f00003 	.word	0x00f00003

080029a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029a8:	b672      	cpsid	i
}
 80029aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029ac:	e7fe      	b.n	80029ac <Error_Handler+0x8>
	...

080029b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_MspInit+0x4c>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	4a0f      	ldr	r2, [pc, #60]	; (80029fc <HAL_MspInit+0x4c>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c4:	6453      	str	r3, [r2, #68]	; 0x44
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <HAL_MspInit+0x4c>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_MspInit+0x4c>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a08      	ldr	r2, [pc, #32]	; (80029fc <HAL_MspInit+0x4c>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_MspInit+0x4c>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029ee:	2007      	movs	r0, #7
 80029f0:	f000 fc2a 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800

08002a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0314 	add.w	r3, r7, #20
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a30      	ldr	r2, [pc, #192]	; (8002ae0 <HAL_SPI_MspInit+0xe0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d15a      	bne.n	8002ad8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	4b2f      	ldr	r3, [pc, #188]	; (8002ae4 <HAL_SPI_MspInit+0xe4>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	4a2e      	ldr	r2, [pc, #184]	; (8002ae4 <HAL_SPI_MspInit+0xe4>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	6413      	str	r3, [r2, #64]	; 0x40
 8002a32:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <HAL_SPI_MspInit+0xe4>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <HAL_SPI_MspInit+0xe4>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <HAL_SPI_MspInit+0xe4>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <HAL_SPI_MspInit+0xe4>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <HAL_SPI_MspInit+0xe4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <HAL_SPI_MspInit+0xe4>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <HAL_SPI_MspInit+0xe4>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a76:	2302      	movs	r3, #2
 8002a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002a86:	2307      	movs	r3, #7
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4815      	ldr	r0, [pc, #84]	; (8002ae8 <HAL_SPI_MspInit+0xe8>)
 8002a92:	f000 fc0d 	bl	80032b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a96:	2304      	movs	r3, #4
 8002a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aa6:	2305      	movs	r3, #5
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4619      	mov	r1, r3
 8002ab0:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <HAL_SPI_MspInit+0xe8>)
 8002ab2:	f000 fbfd 	bl	80032b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ac8:	2305      	movs	r3, #5
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4806      	ldr	r0, [pc, #24]	; (8002aec <HAL_SPI_MspInit+0xec>)
 8002ad4:	f000 fbec 	bl	80032b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ad8:	bf00      	nop
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40003800 	.word	0x40003800
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020400 	.word	0x40020400

08002af0 <LL_DMA_EnableStream>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002afa:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <LL_DMA_EnableStream+0x3c>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4413      	add	r3, r2
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <LL_DMA_EnableStream+0x3c>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	440a      	add	r2, r1
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	4611      	mov	r1, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	440a      	add	r2, r1
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6013      	str	r3, [r2, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	08005fcc 	.word	0x08005fcc

08002b30 <LL_DMA_IsActiveFlag_TC6>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_DMA_ClearFlag_TC6>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b66:	60da      	str	r2, [r3, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4013      	ands	r3, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	bf0c      	ite	eq
 8002b8a:	2301      	moveq	r3, #1
 8002b8c:	2300      	movne	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40013c00 	.word	0x40013c00

08002ba0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6153      	str	r3, [r2, #20]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40013c00 	.word	0x40013c00

08002bc0 <LL_USART_IsActiveFlag_PE>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_USART_IsActiveFlag_FE>:
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2301      	moveq	r3, #1
 8002bfc:	2300      	movne	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_USART_IsActiveFlag_ORE>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_USART_IsActiveFlag_RXNE>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_USART_IsActiveFlag_TXE>:
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b80      	cmp	r3, #128	; 0x80
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_USART_ClearFlag_RXNE>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f06f 0220 	mvn.w	r2, #32
 8002c8c:	601a      	str	r2, [r3, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_USART_ReceiveData8>:
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	b2db      	uxtb	r3, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_USART_TransmitData8>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	605a      	str	r2, [r3, #4]
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	041a      	lsls	r2, r3, #16
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	43d9      	mvns	r1, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <NMI_Handler+0x4>

08002d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0e:	e7fe      	b.n	8002d0e <HardFault_Handler+0x4>

08002d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <MemManage_Handler+0x4>

08002d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d1a:	e7fe      	b.n	8002d1a <BusFault_Handler+0x4>

08002d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d20:	e7fe      	b.n	8002d20 <UsageFault_Handler+0x4>

08002d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d50:	f000 f984 	bl	800305c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d58:	b5b0      	push	{r4, r5, r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f7ff ff08 	bl	8002b74 <LL_EXTI_IsActiveFlag_0_31>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d021      	beq.n	8002dae <EXTI0_IRQHandler+0x56>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f7ff ff18 	bl	8002ba0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    uint8_t msg[] = "Message received!\r\n";
 8002d70:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <EXTI0_IRQHandler+0x60>)
 8002d72:	463c      	mov	r4, r7
 8002d74:	461d      	mov	r5, r3
 8002d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d7a:	682b      	ldr	r3, [r5, #0]
 8002d7c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < sizeof(msg); i++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e011      	b.n	8002da8 <EXTI0_IRQHandler+0x50>
	{
	  LL_USART_TransmitData8(USART2, msg[i]);
 8002d84:	463a      	mov	r2, r7
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	4413      	add	r3, r2
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	480b      	ldr	r0, [pc, #44]	; (8002dbc <EXTI0_IRQHandler+0x64>)
 8002d90:	f7ff ff90 	bl	8002cb4 <LL_USART_TransmitData8>
	  while (!LL_USART_IsActiveFlag_TXE(USART2));
 8002d94:	bf00      	nop
 8002d96:	4809      	ldr	r0, [pc, #36]	; (8002dbc <EXTI0_IRQHandler+0x64>)
 8002d98:	f7ff ff5e 	bl	8002c58 <LL_USART_IsActiveFlag_TXE>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f9      	beq.n	8002d96 <EXTI0_IRQHandler+0x3e>
	for (int i = 0; i < sizeof(msg); i++)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b13      	cmp	r3, #19
 8002dac:	d9ea      	bls.n	8002d84 <EXTI0_IRQHandler+0x2c>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bdb0      	pop	{r4, r5, r7, pc}
 8002db6:	bf00      	nop
 8002db8:	08005f80 	.word	0x08005f80
 8002dbc:	40004400 	.word	0x40004400

08002dc0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC6(DMA1))
 8002dc4:	4808      	ldr	r0, [pc, #32]	; (8002de8 <DMA1_Stream6_IRQHandler+0x28>)
 8002dc6:	f7ff feb3 	bl	8002b30 <LL_DMA_IsActiveFlag_TC6>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <DMA1_Stream6_IRQHandler+0x22>
	{
		LL_DMA_ClearFlag_TC6(DMA1);
 8002dd0:	4805      	ldr	r0, [pc, #20]	; (8002de8 <DMA1_Stream6_IRQHandler+0x28>)
 8002dd2:	f7ff fec1 	bl	8002b58 <LL_DMA_ClearFlag_TC6>
		memset(buffer, 0, sizeof(buffer));
 8002dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4803      	ldr	r0, [pc, #12]	; (8002dec <DMA1_Stream6_IRQHandler+0x2c>)
 8002dde:	f002 fbdd 	bl	800559c <memset>
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40026000 	.word	0x40026000
 8002dec:	200000d0 	.word	0x200000d0

08002df0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002df0:	b598      	push	{r3, r4, r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART3))
 8002df4:	4827      	ldr	r0, [pc, #156]	; (8002e94 <USART3_IRQHandler+0xa4>)
 8002df6:	f7ff ff1c 	bl	8002c32 <LL_USART_IsActiveFlag_RXNE>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d048      	beq.n	8002e92 <USART3_IRQHandler+0xa2>
	{
		LL_USART_ClearFlag_RXNE(USART3);
 8002e00:	4824      	ldr	r0, [pc, #144]	; (8002e94 <USART3_IRQHandler+0xa4>)
 8002e02:	f7ff ff3c 	bl	8002c7e <LL_USART_ClearFlag_RXNE>

		buffer[size] = LL_USART_ReceiveData8(USART3);
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <USART3_IRQHandler+0xa8>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461c      	mov	r4, r3
 8002e0c:	4821      	ldr	r0, [pc, #132]	; (8002e94 <USART3_IRQHandler+0xa4>)
 8002e0e:	f7ff ff44 	bl	8002c9a <LL_USART_ReceiveData8>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <USART3_IRQHandler+0xac>)
 8002e18:	551a      	strb	r2, [r3, r4]

		if ((size == 0) && (buffer[0] != 'A'))
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <USART3_IRQHandler+0xa8>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <USART3_IRQHandler+0x3a>
 8002e22:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <USART3_IRQHandler+0xac>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b41      	cmp	r3, #65	; 0x41
 8002e28:	d132      	bne.n	8002e90 <USART3_IRQHandler+0xa0>
		{
			return;
		}
		size++;
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <USART3_IRQHandler+0xa8>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <USART3_IRQHandler+0xa8>)
 8002e34:	701a      	strb	r2, [r3, #0]

		if (LL_USART_IsActiveFlag_ORE(USART3) || LL_USART_IsActiveFlag_FE(USART3) || LL_USART_IsActiveFlag_PE(USART3))
 8002e36:	4817      	ldr	r0, [pc, #92]	; (8002e94 <USART3_IRQHandler+0xa4>)
 8002e38:	f7ff fee8 	bl	8002c0c <LL_USART_IsActiveFlag_ORE>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <USART3_IRQHandler+0x6a>
 8002e42:	4814      	ldr	r0, [pc, #80]	; (8002e94 <USART3_IRQHandler+0xa4>)
 8002e44:	f7ff fecf 	bl	8002be6 <LL_USART_IsActiveFlag_FE>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <USART3_IRQHandler+0x6a>
 8002e4e:	4811      	ldr	r0, [pc, #68]	; (8002e94 <USART3_IRQHandler+0xa4>)
 8002e50:	f7ff feb6 	bl	8002bc0 <LL_USART_IsActiveFlag_PE>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <USART3_IRQHandler+0x76>
		{
			// overrun error, framing error, or parity error
			buffer[0] = 0;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <USART3_IRQHandler+0xac>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
			size = 0;
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <USART3_IRQHandler+0xa8>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
		}

		// TODO check size instead of end character
		if (size == 3)
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <USART3_IRQHandler+0xa8>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d111      	bne.n	8002e92 <USART3_IRQHandler+0xa2>
		{
			// TODO check values and make sure they are valid
			sprintf((char *) buffer, "Throttle: %d, Steering: %d\r\n", buffer[1], buffer[2]);
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <USART3_IRQHandler+0xac>)
 8002e70:	785b      	ldrb	r3, [r3, #1]
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <USART3_IRQHandler+0xac>)
 8002e76:	789b      	ldrb	r3, [r3, #2]
 8002e78:	4909      	ldr	r1, [pc, #36]	; (8002ea0 <USART3_IRQHandler+0xb0>)
 8002e7a:	4808      	ldr	r0, [pc, #32]	; (8002e9c <USART3_IRQHandler+0xac>)
 8002e7c:	f002 fb6e 	bl	800555c <siprintf>
			LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 8002e80:	2106      	movs	r1, #6
 8002e82:	4808      	ldr	r0, [pc, #32]	; (8002ea4 <USART3_IRQHandler+0xb4>)
 8002e84:	f7ff fe34 	bl	8002af0 <LL_DMA_EnableStream>
			size = 0;
 8002e88:	4b03      	ldr	r3, [pc, #12]	; (8002e98 <USART3_IRQHandler+0xa8>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e000      	b.n	8002e92 <USART3_IRQHandler+0xa2>
			return;
 8002e90:	bf00      	nop
	}
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e92:	bd98      	pop	{r3, r4, r7, pc}
 8002e94:	40004800 	.word	0x40004800
 8002e98:	200001d0 	.word	0x200001d0
 8002e9c:	200000d0 	.word	0x200000d0
 8002ea0:	08005f94 	.word	0x08005f94
 8002ea4:	40026000 	.word	0x40026000

08002ea8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8002eac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002eb0:	f7ff fe60 	bl	8002b74 <LL_EXTI_IsActiveFlag_0_31>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8002eba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ebe:	f7ff fe6f 	bl	8002ba0 <LL_EXTI_ClearFlag_0_31>

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <EXTI15_10_IRQHandler+0x28>)
 8002ec6:	f7ff ff04 	bl	8002cd2 <LL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40020000 	.word	0x40020000

08002ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <_sbrk+0x5c>)
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <_sbrk+0x60>)
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <_sbrk+0x64>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <_sbrk+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d207      	bcs.n	8002f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f04:	f002 fb52 	bl	80055ac <__errno>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f12:	e009      	b.n	8002f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <_sbrk+0x64>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <_sbrk+0x64>)
 8002f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20020000 	.word	0x20020000
 8002f34:	00000400 	.word	0x00000400
 8002f38:	200001d4 	.word	0x200001d4
 8002f3c:	20000328 	.word	0x20000328

08002f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <SystemInit+0x20>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <SystemInit+0x20>)
 8002f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f68:	480d      	ldr	r0, [pc, #52]	; (8002fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f6a:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f6c:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f70:	e002      	b.n	8002f78 <LoopCopyDataInit>

08002f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f76:	3304      	adds	r3, #4

08002f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f7c:	d3f9      	bcc.n	8002f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f7e:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f80:	4c0b      	ldr	r4, [pc, #44]	; (8002fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f84:	e001      	b.n	8002f8a <LoopFillZerobss>

08002f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f88:	3204      	adds	r2, #4

08002f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f8c:	d3fb      	bcc.n	8002f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f8e:	f7ff ffd7 	bl	8002f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f92:	f002 fb11 	bl	80055b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f96:	f7ff f899 	bl	80020cc <main>
  bx  lr    
 8002f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fa4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002fa8:	08006030 	.word	0x08006030
  ldr r2, =_sbss
 8002fac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002fb0:	20000324 	.word	0x20000324

08002fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb4:	e7fe      	b.n	8002fb4 <ADC_IRQHandler>
	...

08002fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <HAL_Init+0x40>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <HAL_Init+0x40>)
 8002fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_Init+0x40>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <HAL_Init+0x40>)
 8002fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_Init+0x40>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a07      	ldr	r2, [pc, #28]	; (8002ff8 <HAL_Init+0x40>)
 8002fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe0:	2003      	movs	r0, #3
 8002fe2:	f000 f931 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f000 f808 	bl	8002ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fec:	f7ff fce0 	bl	80029b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023c00 	.word	0x40023c00

08002ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003004:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_InitTick+0x54>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_InitTick+0x58>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003012:	fbb3 f3f1 	udiv	r3, r3, r1
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f93b 	bl	8003296 <HAL_SYSTICK_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e00e      	b.n	8003048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b0f      	cmp	r3, #15
 800302e:	d80a      	bhi.n	8003046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003030:	2200      	movs	r2, #0
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003038:	f000 f911 	bl	800325e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800303c:	4a06      	ldr	r2, [pc, #24]	; (8003058 <HAL_InitTick+0x5c>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000000 	.word	0x20000000
 8003054:	20000008 	.word	0x20000008
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_IncTick+0x20>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_IncTick+0x24>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4413      	add	r3, r2
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <HAL_IncTick+0x24>)
 800306e:	6013      	str	r3, [r2, #0]
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000008 	.word	0x20000008
 8003080:	200001d8 	.word	0x200001d8

08003084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return uwTick;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_GetTick+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	200001d8 	.word	0x200001d8

0800309c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7ff ffee 	bl	8003084 <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b4:	d005      	beq.n	80030c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_Delay+0x44>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030c2:	bf00      	nop
 80030c4:	f7ff ffde 	bl	8003084 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d8f7      	bhi.n	80030c4 <HAL_Delay+0x28>
  {
  }
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000008 	.word	0x20000008

080030e4 <__NVIC_SetPriorityGrouping>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800310c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_GetPriorityGrouping>:
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_SetPriority>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	6039      	str	r1, [r7, #0]
 8003152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	db0a      	blt.n	8003172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	490c      	ldr	r1, [pc, #48]	; (8003194 <__NVIC_SetPriority+0x4c>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	440b      	add	r3, r1
 800316c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003170:	e00a      	b.n	8003188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4908      	ldr	r1, [pc, #32]	; (8003198 <__NVIC_SetPriority+0x50>)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	3b04      	subs	r3, #4
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	440b      	add	r3, r1
 8003186:	761a      	strb	r2, [r3, #24]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <NVIC_EncodePriority>:
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f1c3 0307 	rsb	r3, r3, #7
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	bf28      	it	cs
 80031ba:	2304      	movcs	r3, #4
 80031bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2b06      	cmp	r3, #6
 80031c4:	d902      	bls.n	80031cc <NVIC_EncodePriority+0x30>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3b03      	subs	r3, #3
 80031ca:	e000      	b.n	80031ce <NVIC_EncodePriority+0x32>
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	401a      	ands	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	43d9      	mvns	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	4313      	orrs	r3, r2
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003214:	d301      	bcc.n	800321a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003216:	2301      	movs	r3, #1
 8003218:	e00f      	b.n	800323a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <SysTick_Config+0x40>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003222:	210f      	movs	r1, #15
 8003224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003228:	f7ff ff8e 	bl	8003148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <SysTick_Config+0x40>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003232:	4b04      	ldr	r3, [pc, #16]	; (8003244 <SysTick_Config+0x40>)
 8003234:	2207      	movs	r2, #7
 8003236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000e010 	.word	0xe000e010

08003248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff47 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003270:	f7ff ff5c 	bl	800312c <__NVIC_GetPriorityGrouping>
 8003274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	6978      	ldr	r0, [r7, #20]
 800327c:	f7ff ff8e 	bl	800319c <NVIC_EncodePriority>
 8003280:	4602      	mov	r2, r0
 8003282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff5d 	bl	8003148 <__NVIC_SetPriority>
}
 800328e:	bf00      	nop
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffb0 	bl	8003204 <SysTick_Config>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e165      	b.n	8003598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032cc:	2201      	movs	r2, #1
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	f040 8154 	bne.w	8003592 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d005      	beq.n	8003302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d130      	bne.n	8003364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	2203      	movs	r2, #3
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003338:	2201      	movs	r2, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 0201 	and.w	r2, r3, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b03      	cmp	r3, #3
 800336e:	d017      	beq.n	80033a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	2203      	movs	r2, #3
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d123      	bne.n	80033f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	08da      	lsrs	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3208      	adds	r2, #8
 80033b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	220f      	movs	r2, #15
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	69b9      	ldr	r1, [r7, #24]
 80033f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0203 	and.w	r2, r3, #3
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80ae 	beq.w	8003592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	4b5d      	ldr	r3, [pc, #372]	; (80035b0 <HAL_GPIO_Init+0x300>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	4a5c      	ldr	r2, [pc, #368]	; (80035b0 <HAL_GPIO_Init+0x300>)
 8003440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003444:	6453      	str	r3, [r2, #68]	; 0x44
 8003446:	4b5a      	ldr	r3, [pc, #360]	; (80035b0 <HAL_GPIO_Init+0x300>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003452:	4a58      	ldr	r2, [pc, #352]	; (80035b4 <HAL_GPIO_Init+0x304>)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3302      	adds	r3, #2
 800345a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	220f      	movs	r2, #15
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a4f      	ldr	r2, [pc, #316]	; (80035b8 <HAL_GPIO_Init+0x308>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d025      	beq.n	80034ca <HAL_GPIO_Init+0x21a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4e      	ldr	r2, [pc, #312]	; (80035bc <HAL_GPIO_Init+0x30c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01f      	beq.n	80034c6 <HAL_GPIO_Init+0x216>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4d      	ldr	r2, [pc, #308]	; (80035c0 <HAL_GPIO_Init+0x310>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d019      	beq.n	80034c2 <HAL_GPIO_Init+0x212>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4c      	ldr	r2, [pc, #304]	; (80035c4 <HAL_GPIO_Init+0x314>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0x20e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4b      	ldr	r2, [pc, #300]	; (80035c8 <HAL_GPIO_Init+0x318>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00d      	beq.n	80034ba <HAL_GPIO_Init+0x20a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4a      	ldr	r2, [pc, #296]	; (80035cc <HAL_GPIO_Init+0x31c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x206>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a49      	ldr	r2, [pc, #292]	; (80035d0 <HAL_GPIO_Init+0x320>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_GPIO_Init+0x202>
 80034ae:	2306      	movs	r3, #6
 80034b0:	e00c      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034b2:	2307      	movs	r3, #7
 80034b4:	e00a      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034b6:	2305      	movs	r3, #5
 80034b8:	e008      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034ba:	2304      	movs	r3, #4
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034be:	2303      	movs	r3, #3
 80034c0:	e004      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e002      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_GPIO_Init+0x21c>
 80034ca:	2300      	movs	r3, #0
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	f002 0203 	and.w	r2, r2, #3
 80034d2:	0092      	lsls	r2, r2, #2
 80034d4:	4093      	lsls	r3, r2
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034dc:	4935      	ldr	r1, [pc, #212]	; (80035b4 <HAL_GPIO_Init+0x304>)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ea:	4b3a      	ldr	r3, [pc, #232]	; (80035d4 <HAL_GPIO_Init+0x324>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350e:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <HAL_GPIO_Init+0x324>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HAL_GPIO_Init+0x324>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003538:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <HAL_GPIO_Init+0x324>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_GPIO_Init+0x324>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003562:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_GPIO_Init+0x324>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <HAL_GPIO_Init+0x324>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800358c:	4a11      	ldr	r2, [pc, #68]	; (80035d4 <HAL_GPIO_Init+0x324>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3301      	adds	r3, #1
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	f67f ae96 	bls.w	80032cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3724      	adds	r7, #36	; 0x24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40020000 	.word	0x40020000
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021400 	.word	0x40021400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	40013c00 	.word	0x40013c00

080035d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
 80035e4:	4613      	mov	r3, r2
 80035e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035e8:	787b      	ldrb	r3, [r7, #1]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ee:	887a      	ldrh	r2, [r7, #2]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035f4:	e003      	b.n	80035fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	041a      	lsls	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	619a      	str	r2, [r3, #24]
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e07b      	b.n	8003714 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	d108      	bne.n	8003636 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800362c:	d009      	beq.n	8003642 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	61da      	str	r2, [r3, #28]
 8003634:	e005      	b.n	8003642 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff f9cf 	bl	8002a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003678:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	ea42 0103 	orr.w	r1, r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	0c1b      	lsrs	r3, r3, #16
 80036e0:	f003 0104 	and.w	r1, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f003 0210 	and.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003702:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_SPI_Transmit+0x22>
 800373a:	2302      	movs	r3, #2
 800373c:	e126      	b.n	800398c <HAL_SPI_Transmit+0x270>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003746:	f7ff fc9d 	bl	8003084 <HAL_GetTick>
 800374a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d002      	beq.n	8003762 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800375c:	2302      	movs	r3, #2
 800375e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003760:	e10b      	b.n	800397a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_SPI_Transmit+0x52>
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003772:	e102      	b.n	800397a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2203      	movs	r2, #3
 8003778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	88fa      	ldrh	r2, [r7, #6]
 800378c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	88fa      	ldrh	r2, [r7, #6]
 8003792:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ba:	d10f      	bne.n	80037dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d007      	beq.n	80037fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003802:	d14b      	bne.n	800389c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_SPI_Transmit+0xf6>
 800380c:	8afb      	ldrh	r3, [r7, #22]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d13e      	bne.n	8003890 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	881a      	ldrh	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	1c9a      	adds	r2, r3, #2
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003836:	e02b      	b.n	8003890 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d112      	bne.n	800386c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	881a      	ldrh	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	1c9a      	adds	r2, r3, #2
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	86da      	strh	r2, [r3, #54]	; 0x36
 800386a:	e011      	b.n	8003890 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800386c:	f7ff fc0a 	bl	8003084 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d803      	bhi.n	8003884 <HAL_SPI_Transmit+0x168>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003882:	d102      	bne.n	800388a <HAL_SPI_Transmit+0x16e>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800388e:	e074      	b.n	800397a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ce      	bne.n	8003838 <HAL_SPI_Transmit+0x11c>
 800389a:	e04c      	b.n	8003936 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_SPI_Transmit+0x18e>
 80038a4:	8afb      	ldrh	r3, [r7, #22]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d140      	bne.n	800392c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	330c      	adds	r3, #12
 80038b4:	7812      	ldrb	r2, [r2, #0]
 80038b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038d0:	e02c      	b.n	800392c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d113      	bne.n	8003908 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	7812      	ldrb	r2, [r2, #0]
 80038ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	86da      	strh	r2, [r3, #54]	; 0x36
 8003906:	e011      	b.n	800392c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003908:	f7ff fbbc 	bl	8003084 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d803      	bhi.n	8003920 <HAL_SPI_Transmit+0x204>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800391e:	d102      	bne.n	8003926 <HAL_SPI_Transmit+0x20a>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	77fb      	strb	r3, [r7, #31]
          goto error;
 800392a:	e026      	b.n	800397a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1cd      	bne.n	80038d2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	6839      	ldr	r1, [r7, #0]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fbda 	bl	80040f4 <SPI_EndRxTxTransaction>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e000      	b.n	800397a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003978:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800398a:	7ffb      	ldrb	r3, [r7, #31]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af02      	add	r7, sp, #8
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	4613      	mov	r3, r2
 80039a2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039b0:	d112      	bne.n	80039d8 <HAL_SPI_Receive+0x44>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10e      	bne.n	80039d8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2204      	movs	r2, #4
 80039be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f8f1 	bl	8003bb6 <HAL_SPI_TransmitReceive>
 80039d4:	4603      	mov	r3, r0
 80039d6:	e0ea      	b.n	8003bae <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_SPI_Receive+0x52>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e0e3      	b.n	8003bae <HAL_SPI_Receive+0x21a>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ee:	f7ff fb49 	bl	8003084 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d002      	beq.n	8003a06 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a04:	e0ca      	b.n	8003b9c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_SPI_Receive+0x7e>
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a16:	e0c1      	b.n	8003b9c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5e:	d10f      	bne.n	8003a80 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d007      	beq.n	8003a9e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d162      	bne.n	8003b6c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003aa6:	e02e      	b.n	8003b06 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d115      	bne.n	8003ae2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f103 020c 	add.w	r2, r3, #12
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ae0:	e011      	b.n	8003b06 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ae2:	f7ff facf 	bl	8003084 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d803      	bhi.n	8003afa <HAL_SPI_Receive+0x166>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af8:	d102      	bne.n	8003b00 <HAL_SPI_Receive+0x16c>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b04:	e04a      	b.n	8003b9c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1cb      	bne.n	8003aa8 <HAL_SPI_Receive+0x114>
 8003b10:	e031      	b.n	8003b76 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d113      	bne.n	8003b48 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	b292      	uxth	r2, r2
 8003b2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	1c9a      	adds	r2, r3, #2
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b46:	e011      	b.n	8003b6c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b48:	f7ff fa9c 	bl	8003084 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d803      	bhi.n	8003b60 <HAL_SPI_Receive+0x1cc>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b5e:	d102      	bne.n	8003b66 <HAL_SPI_Receive+0x1d2>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b6a:	e017      	b.n	8003b9c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1cd      	bne.n	8003b12 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	6839      	ldr	r1, [r7, #0]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fa54 	bl	8004028 <SPI_EndRxTransaction>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
 8003b98:	e000      	b.n	8003b9c <HAL_SPI_Receive+0x208>
  }

error :
 8003b9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b08c      	sub	sp, #48	; 0x30
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x26>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e18a      	b.n	8003ef2 <HAL_SPI_TransmitReceive+0x33c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be4:	f7ff fa4e 	bl	8003084 <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bfa:	887b      	ldrh	r3, [r7, #2]
 8003bfc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d00f      	beq.n	8003c26 <HAL_SPI_TransmitReceive+0x70>
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c0c:	d107      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x68>
 8003c16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d003      	beq.n	8003c26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c24:	e15b      	b.n	8003ede <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_SPI_TransmitReceive+0x82>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_SPI_TransmitReceive+0x82>
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d103      	bne.n	8003c40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c3e:	e14e      	b.n	8003ede <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d003      	beq.n	8003c54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2205      	movs	r2, #5
 8003c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	887a      	ldrh	r2, [r7, #2]
 8003c6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	887a      	ldrh	r2, [r7, #2]
 8003c76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	d007      	beq.n	8003ca8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb0:	d178      	bne.n	8003da4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_SPI_TransmitReceive+0x10a>
 8003cba:	8b7b      	ldrh	r3, [r7, #26]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d166      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	881a      	ldrh	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	1c9a      	adds	r2, r3, #2
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ce4:	e053      	b.n	8003d8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d11b      	bne.n	8003d2c <HAL_SPI_TransmitReceive+0x176>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d016      	beq.n	8003d2c <HAL_SPI_TransmitReceive+0x176>
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d113      	bne.n	8003d2c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d119      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x1b8>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d014      	beq.n	8003d6e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	b292      	uxth	r2, r2
 8003d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	1c9a      	adds	r2, r3, #2
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d6e:	f7ff f989 	bl	8003084 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d807      	bhi.n	8003d8e <HAL_SPI_TransmitReceive+0x1d8>
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d84:	d003      	beq.n	8003d8e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d8c:	e0a7      	b.n	8003ede <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1a6      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x130>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1a1      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x130>
 8003da2:	e07c      	b.n	8003e9e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_SPI_TransmitReceive+0x1fc>
 8003dac:	8b7b      	ldrh	r3, [r7, #26]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d16b      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dd8:	e057      	b.n	8003e8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d11c      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x26c>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d017      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x26c>
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d114      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	7812      	ldrb	r2, [r2, #0]
 8003e04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d119      	bne.n	8003e64 <HAL_SPI_TransmitReceive+0x2ae>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d014      	beq.n	8003e64 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e60:	2301      	movs	r3, #1
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e64:	f7ff f90e 	bl	8003084 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d803      	bhi.n	8003e7c <HAL_SPI_TransmitReceive+0x2c6>
 8003e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7a:	d102      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x2cc>
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e88:	e029      	b.n	8003ede <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1a2      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x224>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d19d      	bne.n	8003dda <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f926 	bl	80040f4 <SPI_EndRxTxTransaction>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d006      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003eba:	e010      	b.n	8003ede <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	e000      	b.n	8003ede <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003edc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3730      	adds	r7, #48	; 0x30
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f08:	b2db      	uxtb	r3, r3
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f28:	f7ff f8ac 	bl	8003084 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f38:	f7ff f8a4 	bl	8003084 <HAL_GetTick>
 8003f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	; (8004024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	015b      	lsls	r3, r3, #5
 8003f44:	0d1b      	lsrs	r3, r3, #20
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4e:	e054      	b.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f56:	d050      	beq.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f58:	f7ff f894 	bl	8003084 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d902      	bls.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d13d      	bne.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f86:	d111      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f90:	d004      	beq.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	d107      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb4:	d10f      	bne.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e017      	b.n	800401a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d19b      	bne.n	8003f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000000 	.word	0x20000000

08004028 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403c:	d111      	bne.n	8004062 <SPI_EndRxTransaction+0x3a>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004046:	d004      	beq.n	8004052 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004050:	d107      	bne.n	8004062 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004060:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800406a:	d12a      	bne.n	80040c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004074:	d012      	beq.n	800409c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2200      	movs	r2, #0
 800407e:	2180      	movs	r1, #128	; 0x80
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff ff49 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02d      	beq.n	80040e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e026      	b.n	80040ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2101      	movs	r1, #1
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff ff36 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01a      	beq.n	80040e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e013      	b.n	80040ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2101      	movs	r1, #1
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7ff ff23 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e000      	b.n	80040ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <SPI_EndRxTxTransaction+0x7c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <SPI_EndRxTxTransaction+0x80>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	0d5b      	lsrs	r3, r3, #21
 800410c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004110:	fb02 f303 	mul.w	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411e:	d112      	bne.n	8004146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff fef4 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e00f      	b.n	8004166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3b01      	subs	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d0f2      	beq.n	8004146 <SPI_EndRxTxTransaction+0x52>
 8004160:	e000      	b.n	8004164 <SPI_EndRxTxTransaction+0x70>
        break;
 8004162:	bf00      	nop
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000000 	.word	0x20000000
 8004174:	165e9f81 	.word	0x165e9f81

08004178 <LL_EXTI_EnableIT_0_31>:
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <LL_EXTI_EnableIT_0_31+0x20>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4904      	ldr	r1, [pc, #16]	; (8004198 <LL_EXTI_EnableIT_0_31+0x20>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40013c00 	.word	0x40013c00

0800419c <LL_EXTI_DisableIT_0_31>:
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <LL_EXTI_DisableIT_0_31+0x24>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	4904      	ldr	r1, [pc, #16]	; (80041c0 <LL_EXTI_DisableIT_0_31+0x24>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40013c00 	.word	0x40013c00

080041c4 <LL_EXTI_EnableEvent_0_31>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	4904      	ldr	r1, [pc, #16]	; (80041e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40013c00 	.word	0x40013c00

080041e8 <LL_EXTI_DisableEvent_0_31>:
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <LL_EXTI_DisableEvent_0_31+0x24>)
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	43db      	mvns	r3, r3
 80041f8:	4904      	ldr	r1, [pc, #16]	; (800420c <LL_EXTI_DisableEvent_0_31+0x24>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40013c00 	.word	0x40013c00

08004210 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	4904      	ldr	r1, [pc, #16]	; (8004230 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40013c00 	.word	0x40013c00

08004234 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	43db      	mvns	r3, r3
 8004244:	4904      	ldr	r1, [pc, #16]	; (8004258 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004246:	4013      	ands	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40013c00 	.word	0x40013c00

0800425c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	4904      	ldr	r1, [pc, #16]	; (800427c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4313      	orrs	r3, r2
 800426e:	60cb      	str	r3, [r1, #12]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40013c00 	.word	0x40013c00

08004280 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	43db      	mvns	r3, r3
 8004290:	4904      	ldr	r1, [pc, #16]	; (80042a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004292:	4013      	ands	r3, r2
 8004294:	60cb      	str	r3, [r1, #12]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40013c00 	.word	0x40013c00

080042a8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	791b      	ldrb	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d065      	beq.n	8004388 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d06b      	beq.n	800439c <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	795b      	ldrb	r3, [r3, #5]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d01c      	beq.n	8004306 <LL_EXTI_Init+0x5e>
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	dc25      	bgt.n	800431c <LL_EXTI_Init+0x74>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <LL_EXTI_Init+0x32>
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d00b      	beq.n	80042f0 <LL_EXTI_Init+0x48>
 80042d8:	e020      	b.n	800431c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff ff82 	bl	80041e8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff45 	bl	8004178 <LL_EXTI_EnableIT_0_31>
          break;
 80042ee:	e018      	b.n	8004322 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ff51 	bl	800419c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ff60 	bl	80041c4 <LL_EXTI_EnableEvent_0_31>
          break;
 8004304:	e00d      	b.n	8004322 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff ff34 	bl	8004178 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff55 	bl	80041c4 <LL_EXTI_EnableEvent_0_31>
          break;
 800431a:	e002      	b.n	8004322 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
          break;
 8004320:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	799b      	ldrb	r3, [r3, #6]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d038      	beq.n	800439c <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	799b      	ldrb	r3, [r3, #6]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d01c      	beq.n	800436c <LL_EXTI_Init+0xc4>
 8004332:	2b03      	cmp	r3, #3
 8004334:	dc25      	bgt.n	8004382 <LL_EXTI_Init+0xda>
 8004336:	2b01      	cmp	r3, #1
 8004338:	d002      	beq.n	8004340 <LL_EXTI_Init+0x98>
 800433a:	2b02      	cmp	r3, #2
 800433c:	d00b      	beq.n	8004356 <LL_EXTI_Init+0xae>
 800433e:	e020      	b.n	8004382 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff9b 	bl	8004280 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff5e 	bl	8004210 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004354:	e022      	b.n	800439c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ff6a 	bl	8004234 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ff79 	bl	800425c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800436a:	e017      	b.n	800439c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff ff4d 	bl	8004210 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff6e 	bl	800425c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004380:	e00c      	b.n	800439c <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
            break;
 8004386:	e009      	b.n	800439c <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff05 	bl	800419c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff ff26 	bl	80041e8 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <LL_GPIO_SetPinMode>:
{
 80043a6:	b480      	push	{r7}
 80043a8:	b089      	sub	sp, #36	; 0x24
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	fa93 f3a3 	rbit	r3, r3
 80043c0:	613b      	str	r3, [r7, #16]
  return result;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	fab3 f383 	clz	r3, r3
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2103      	movs	r1, #3
 80043ce:	fa01 f303 	lsl.w	r3, r1, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	401a      	ands	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	61bb      	str	r3, [r7, #24]
  return result;
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	fa01 f303 	lsl.w	r3, r1, r3
 80043f2:	431a      	orrs	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]
}
 80043f8:	bf00      	nop
 80043fa:	3724      	adds	r7, #36	; 0x24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_GPIO_SetPinOutputType>:
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	43db      	mvns	r3, r3
 8004418:	401a      	ands	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	431a      	orrs	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	605a      	str	r2, [r3, #4]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_GPIO_SetPinSpeed>:
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	; 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	fa93 f3a3 	rbit	r3, r3
 800444e:	613b      	str	r3, [r7, #16]
  return result;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	fab3 f383 	clz	r3, r3
 8004456:	b2db      	uxtb	r3, r3
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	2103      	movs	r1, #3
 800445c:	fa01 f303 	lsl.w	r3, r1, r3
 8004460:	43db      	mvns	r3, r3
 8004462:	401a      	ands	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	fa93 f3a3 	rbit	r3, r3
 800446e:	61bb      	str	r3, [r7, #24]
  return result;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	431a      	orrs	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	609a      	str	r2, [r3, #8]
}
 8004486:	bf00      	nop
 8004488:	3724      	adds	r7, #36	; 0x24
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_GPIO_SetPinPull>:
{
 8004492:	b480      	push	{r7}
 8004494:	b089      	sub	sp, #36	; 0x24
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	613b      	str	r3, [r7, #16]
  return result;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	2103      	movs	r1, #3
 80044ba:	fa01 f303 	lsl.w	r3, r1, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	401a      	ands	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	fa93 f3a3 	rbit	r3, r3
 80044cc:	61bb      	str	r3, [r7, #24]
  return result;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	fab3 f383 	clz	r3, r3
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	fa01 f303 	lsl.w	r3, r1, r3
 80044de:	431a      	orrs	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	60da      	str	r2, [r3, #12]
}
 80044e4:	bf00      	nop
 80044e6:	3724      	adds	r7, #36	; 0x24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <LL_GPIO_SetAFPin_0_7>:
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a1a      	ldr	r2, [r3, #32]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	613b      	str	r3, [r7, #16]
  return result;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	fab3 f383 	clz	r3, r3
 8004512:	b2db      	uxtb	r3, r3
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	210f      	movs	r1, #15
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	401a      	ands	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	fa93 f3a3 	rbit	r3, r3
 800452a:	61bb      	str	r3, [r7, #24]
  return result;
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	431a      	orrs	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_GPIO_SetAFPin_8_15>:
{
 800454e:	b480      	push	{r7}
 8004550:	b089      	sub	sp, #36	; 0x24
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	0a1b      	lsrs	r3, r3, #8
 8004562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	613b      	str	r3, [r7, #16]
  return result;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	210f      	movs	r1, #15
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	401a      	ands	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	61bb      	str	r3, [r7, #24]
  return result;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	431a      	orrs	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80045a4:	bf00      	nop
 80045a6:	3724      	adds	r7, #36	; 0x24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	613b      	str	r3, [r7, #16]
  return result;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80045da:	e050      	b.n	800467e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	2101      	movs	r1, #1
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	fa01 f303 	lsl.w	r3, r1, r3
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d042      	beq.n	8004678 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d003      	beq.n	8004602 <LL_GPIO_Init+0x52>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d10d      	bne.n	800461e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	461a      	mov	r2, r3
 8004608:	69b9      	ldr	r1, [r7, #24]
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ff12 	bl	8004434 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	461a      	mov	r2, r3
 8004616:	69b9      	ldr	r1, [r7, #24]
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fef3 	bl	8004404 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	461a      	mov	r2, r3
 8004624:	69b9      	ldr	r1, [r7, #24]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff ff33 	bl	8004492 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d11a      	bne.n	800466a <LL_GPIO_Init+0xba>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	60bb      	str	r3, [r7, #8]
  return result;
 8004640:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b07      	cmp	r3, #7
 800464a:	d807      	bhi.n	800465c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	461a      	mov	r2, r3
 8004652:	69b9      	ldr	r1, [r7, #24]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ff4b 	bl	80044f0 <LL_GPIO_SetAFPin_0_7>
 800465a:	e006      	b.n	800466a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	461a      	mov	r2, r3
 8004662:	69b9      	ldr	r1, [r7, #24]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ff72 	bl	800454e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	461a      	mov	r2, r3
 8004670:	69b9      	ldr	r1, [r7, #24]
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff fe97 	bl	80043a6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	3301      	adds	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1a7      	bne.n	80045dc <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <LL_RCC_GetSysClkSource>:
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <LL_RCC_GetSysClkSource+0x18>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 030c 	and.w	r3, r3, #12
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800

080046b4 <LL_RCC_GetAHBPrescaler>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <LL_RCC_GetAHBPrescaler+0x18>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800

080046d0 <LL_RCC_GetAPB1Prescaler>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800

080046ec <LL_RCC_GetAPB2Prescaler>:
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <LL_RCC_GetAPB2Prescaler+0x18>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40023800 	.word	0x40023800

08004708 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800470c:	4b04      	ldr	r3, [pc, #16]	; (8004720 <LL_RCC_PLL_GetMainSource+0x18>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004714:	4618      	mov	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800

08004724 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <LL_RCC_PLL_GetN+0x18>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004732:	4618      	mov	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40023800 	.word	0x40023800

08004740 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <LL_RCC_PLL_GetP+0x18>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40023800 	.word	0x40023800

0800475c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <LL_RCC_PLL_GetR+0x18>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800

08004778 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <LL_RCC_PLL_GetDivider+0x18>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800

08004794 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800479c:	f000 f820 	bl	80047e0 <RCC_GetSystemClockFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f85c 	bl	8004868 <RCC_GetHCLKClockFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 f86a 	bl	8004894 <RCC_GetPCLK1ClockFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f876 	bl	80048bc <RCC_GetPCLK2ClockFreq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60da      	str	r2, [r3, #12]
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80047ea:	f7ff ff55 	bl	8004698 <LL_RCC_GetSysClkSource>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	d82d      	bhi.n	8004850 <RCC_GetSystemClockFreq+0x70>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <RCC_GetSystemClockFreq+0x1c>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	08004831 	.word	0x08004831
 8004800:	08004851 	.word	0x08004851
 8004804:	08004851 	.word	0x08004851
 8004808:	08004851 	.word	0x08004851
 800480c:	08004837 	.word	0x08004837
 8004810:	08004851 	.word	0x08004851
 8004814:	08004851 	.word	0x08004851
 8004818:	08004851 	.word	0x08004851
 800481c:	0800483d 	.word	0x0800483d
 8004820:	08004851 	.word	0x08004851
 8004824:	08004851 	.word	0x08004851
 8004828:	08004851 	.word	0x08004851
 800482c:	08004847 	.word	0x08004847
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <RCC_GetSystemClockFreq+0x80>)
 8004832:	607b      	str	r3, [r7, #4]
      break;
 8004834:	e00f      	b.n	8004856 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <RCC_GetSystemClockFreq+0x84>)
 8004838:	607b      	str	r3, [r7, #4]
      break;
 800483a:	e00c      	b.n	8004856 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800483c:	2008      	movs	r0, #8
 800483e:	f000 f851 	bl	80048e4 <RCC_PLL_GetFreqDomain_SYS>
 8004842:	6078      	str	r0, [r7, #4]
      break;
 8004844:	e007      	b.n	8004856 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8004846:	200c      	movs	r0, #12
 8004848:	f000 f84c 	bl	80048e4 <RCC_PLL_GetFreqDomain_SYS>
 800484c:	6078      	str	r0, [r7, #4]
      break;
 800484e:	e002      	b.n	8004856 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <RCC_GetSystemClockFreq+0x80>)
 8004852:	607b      	str	r3, [r7, #4]
      break;
 8004854:	bf00      	nop
  }

  return frequency;
 8004856:	687b      	ldr	r3, [r7, #4]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	00f42400 	.word	0x00f42400
 8004864:	007a1200 	.word	0x007a1200

08004868 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004870:	f7ff ff20 	bl	80046b4 <LL_RCC_GetAHBPrescaler>
 8004874:	4603      	mov	r3, r0
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	4a04      	ldr	r2, [pc, #16]	; (8004890 <RCC_GetHCLKClockFreq+0x28>)
 800487e:	5cd3      	ldrb	r3, [r2, r3]
 8004880:	461a      	mov	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	40d3      	lsrs	r3, r2
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	08005fd4 	.word	0x08005fd4

08004894 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800489c:	f7ff ff18 	bl	80046d0 <LL_RCC_GetAPB1Prescaler>
 80048a0:	4603      	mov	r3, r0
 80048a2:	0a9b      	lsrs	r3, r3, #10
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <RCC_GetPCLK1ClockFreq+0x24>)
 80048a6:	5cd3      	ldrb	r3, [r2, r3]
 80048a8:	461a      	mov	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	40d3      	lsrs	r3, r2
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	08005fe4 	.word	0x08005fe4

080048bc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80048c4:	f7ff ff12 	bl	80046ec <LL_RCC_GetAPB2Prescaler>
 80048c8:	4603      	mov	r3, r0
 80048ca:	0b5b      	lsrs	r3, r3, #13
 80048cc:	4a04      	ldr	r2, [pc, #16]	; (80048e0 <RCC_GetPCLK2ClockFreq+0x24>)
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
 80048d0:	461a      	mov	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	40d3      	lsrs	r3, r2
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	08005fe4 	.word	0x08005fe4

080048e4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	2300      	movs	r3, #0
 80048f6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80048f8:	f7ff ff06 	bl	8004708 <LL_RCC_PLL_GetMainSource>
 80048fc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490a:	d003      	beq.n	8004914 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800490c:	e005      	b.n	800491a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800490e:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8004910:	617b      	str	r3, [r7, #20]
      break;
 8004912:	e005      	b.n	8004920 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004914:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8004916:	617b      	str	r3, [r7, #20]
      break;
 8004918:	e002      	b.n	8004920 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800491a:	4b19      	ldr	r3, [pc, #100]	; (8004980 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800491c:	617b      	str	r3, [r7, #20]
      break;
 800491e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b08      	cmp	r3, #8
 8004924:	d114      	bne.n	8004950 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004926:	f7ff ff27 	bl	8004778 <LL_RCC_PLL_GetDivider>
 800492a:	4602      	mov	r2, r0
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fbb3 f4f2 	udiv	r4, r3, r2
 8004932:	f7ff fef7 	bl	8004724 <LL_RCC_PLL_GetN>
 8004936:	4603      	mov	r3, r0
 8004938:	fb03 f404 	mul.w	r4, r3, r4
 800493c:	f7ff ff00 	bl	8004740 <LL_RCC_PLL_GetP>
 8004940:	4603      	mov	r3, r0
 8004942:	0c1b      	lsrs	r3, r3, #16
 8004944:	3301      	adds	r3, #1
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	fbb4 f3f3 	udiv	r3, r4, r3
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	e011      	b.n	8004974 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004950:	f7ff ff12 	bl	8004778 <LL_RCC_PLL_GetDivider>
 8004954:	4602      	mov	r2, r0
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	fbb3 f4f2 	udiv	r4, r3, r2
 800495c:	f7ff fee2 	bl	8004724 <LL_RCC_PLL_GetN>
 8004960:	4603      	mov	r3, r0
 8004962:	fb03 f404 	mul.w	r4, r3, r4
 8004966:	f7ff fef9 	bl	800475c <LL_RCC_PLL_GetR>
 800496a:	4603      	mov	r3, r0
 800496c:	0f1b      	lsrs	r3, r3, #28
 800496e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004972:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004974:	693b      	ldr	r3, [r7, #16]
}
 8004976:	4618      	mov	r0, r3
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	bd90      	pop	{r4, r7, pc}
 800497e:	bf00      	nop
 8004980:	00f42400 	.word	0x00f42400
 8004984:	007a1200 	.word	0x007a1200

08004988 <LL_TIM_SetPrescaler>:
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <LL_TIM_SetAutoReload>:
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_TIM_SetRepetitionCounter>:
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <LL_TIM_OC_SetCompareCH1>:
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	635a      	str	r2, [r3, #52]	; 0x34
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_TIM_OC_SetCompareCH2>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_TIM_OC_SetCompareCH3>:
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <LL_TIM_OC_SetCompareCH4>:
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f043 0201 	orr.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	615a      	str	r2, [r3, #20]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a3d      	ldr	r2, [pc, #244]	; (8004b74 <LL_TIM_Init+0x108>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <LL_TIM_Init+0x40>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d00f      	beq.n	8004aac <LL_TIM_Init+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a3a      	ldr	r2, [pc, #232]	; (8004b78 <LL_TIM_Init+0x10c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00b      	beq.n	8004aac <LL_TIM_Init+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a39      	ldr	r2, [pc, #228]	; (8004b7c <LL_TIM_Init+0x110>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d007      	beq.n	8004aac <LL_TIM_Init+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a38      	ldr	r2, [pc, #224]	; (8004b80 <LL_TIM_Init+0x114>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <LL_TIM_Init+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a37      	ldr	r2, [pc, #220]	; (8004b84 <LL_TIM_Init+0x118>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d106      	bne.n	8004aba <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2d      	ldr	r2, [pc, #180]	; (8004b74 <LL_TIM_Init+0x108>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d02b      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d027      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <LL_TIM_Init+0x10c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d023      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <LL_TIM_Init+0x110>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01f      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a28      	ldr	r2, [pc, #160]	; (8004b80 <LL_TIM_Init+0x114>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01b      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <LL_TIM_Init+0x118>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d017      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <LL_TIM_Init+0x11c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a25      	ldr	r2, [pc, #148]	; (8004b8c <LL_TIM_Init+0x120>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00f      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a24      	ldr	r2, [pc, #144]	; (8004b90 <LL_TIM_Init+0x124>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00b      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a23      	ldr	r2, [pc, #140]	; (8004b94 <LL_TIM_Init+0x128>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d007      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <LL_TIM_Init+0x12c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <LL_TIM_Init+0xae>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <LL_TIM_Init+0x130>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d106      	bne.n	8004b28 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff ff35 	bl	80049a4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff21 	bl	8004988 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <LL_TIM_Init+0x108>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <LL_TIM_Init+0xea>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a0c      	ldr	r2, [pc, #48]	; (8004b84 <LL_TIM_Init+0x118>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d105      	bne.n	8004b62 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff2f 	bl	80049c0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff ff72 	bl	8004a4c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40010400 	.word	0x40010400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40014400 	.word	0x40014400
 8004b90:	40014800 	.word	0x40014800
 8004b94:	40001800 	.word	0x40001800
 8004b98:	40001c00 	.word	0x40001c00
 8004b9c:	40002000 	.word	0x40002000

08004ba0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb6:	d027      	beq.n	8004c08 <LL_TIM_OC_Init+0x68>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	d82a      	bhi.n	8004c16 <LL_TIM_OC_Init+0x76>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	d018      	beq.n	8004bfa <LL_TIM_OC_Init+0x5a>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bce:	d822      	bhi.n	8004c16 <LL_TIM_OC_Init+0x76>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d003      	beq.n	8004bde <LL_TIM_OC_Init+0x3e>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d007      	beq.n	8004bec <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004bdc:	e01b      	b.n	8004c16 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f81f 	bl	8004c24 <OC1Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bea:	e015      	b.n	8004c18 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f884 	bl	8004cfc <OC2Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf8:	e00e      	b.n	8004c18 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f8ed 	bl	8004ddc <OC3Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	75fb      	strb	r3, [r7, #23]
      break;
 8004c06:	e007      	b.n	8004c18 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f956 	bl	8004ebc <OC4Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	75fb      	strb	r3, [r7, #23]
      break;
 8004c14:	e000      	b.n	8004c18 <LL_TIM_OC_Init+0x78>
      break;
 8004c16:	bf00      	nop
  }

  return result;
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f023 0201 	bic.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 0202 	bic.w	r2, r3, #2
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0201 	bic.w	r2, r3, #1
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a1c      	ldr	r2, [pc, #112]	; (8004cf4 <OC1Config+0xd0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <OC1Config+0x6a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a1b      	ldr	r2, [pc, #108]	; (8004cf8 <OC1Config+0xd4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d11e      	bne.n	8004ccc <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 0208 	bic.w	r2, r3, #8
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f023 0204 	bic.w	r2, r3, #4
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff fe7c 	bl	80049dc <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40010400 	.word	0x40010400

08004cfc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f023 0210 	bic.w	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f023 0220 	bic.w	r2, r3, #32
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f023 0210 	bic.w	r2, r3, #16
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <OC2Config+0xd8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <OC2Config+0x70>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a1c      	ldr	r2, [pc, #112]	; (8004dd8 <OC2Config+0xdc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d11f      	bne.n	8004dac <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	019b      	lsls	r3, r3, #6
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	019b      	lsls	r3, r3, #6
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fe1a 	bl	80049f8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	40010400 	.word	0x40010400

08004ddc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0303 	bic.w	r3, r3, #3
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <OC3Config+0xd8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <OC3Config+0x6e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <OC3Config+0xdc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d11f      	bne.n	8004e8a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	029b      	lsls	r3, r3, #10
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	029b      	lsls	r3, r3, #10
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	015b      	lsls	r3, r3, #5
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff fdb9 	bl	8004a14 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	40010400 	.word	0x40010400

08004ebc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	031b      	lsls	r3, r3, #12
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	031b      	lsls	r3, r3, #12
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <OC4Config+0xa8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <OC4Config+0x70>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <OC4Config+0xac>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d107      	bne.n	8004f3c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	019b      	lsls	r3, r3, #6
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fd6e 	bl	8004a30 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40010400 	.word	0x40010400

08004f6c <LL_USART_IsEnabled>:
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f80:	bf0c      	ite	eq
 8004f82:	2301      	moveq	r3, #1
 8004f84:	2300      	movne	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <LL_USART_SetStopBitsLength>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	611a      	str	r2, [r3, #16]
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <LL_USART_SetHWFlowCtrl>:
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	615a      	str	r2, [r3, #20]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <LL_USART_SetBaudRate>:
{
 8004fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe4:	b0c0      	sub	sp, #256	; 0x100
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fec:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004ff0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004ff4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005000:	f040 810c 	bne.w	800521c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005004:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005008:	2200      	movs	r2, #0
 800500a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800500e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	1891      	adds	r1, r2, r2
 800501c:	6639      	str	r1, [r7, #96]	; 0x60
 800501e:	415b      	adcs	r3, r3
 8005020:	667b      	str	r3, [r7, #100]	; 0x64
 8005022:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005026:	4621      	mov	r1, r4
 8005028:	eb12 0801 	adds.w	r8, r2, r1
 800502c:	4629      	mov	r1, r5
 800502e:	eb43 0901 	adc.w	r9, r3, r1
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800503e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005046:	4690      	mov	r8, r2
 8005048:	4699      	mov	r9, r3
 800504a:	4623      	mov	r3, r4
 800504c:	eb18 0303 	adds.w	r3, r8, r3
 8005050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005054:	462b      	mov	r3, r5
 8005056:	eb49 0303 	adc.w	r3, r9, r3
 800505a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800505e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005062:	2200      	movs	r2, #0
 8005064:	469a      	mov	sl, r3
 8005066:	4693      	mov	fp, r2
 8005068:	eb1a 030a 	adds.w	r3, sl, sl
 800506c:	65bb      	str	r3, [r7, #88]	; 0x58
 800506e:	eb4b 030b 	adc.w	r3, fp, fp
 8005072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005074:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005078:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800507c:	f7fb fd0e 	bl	8000a9c <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4b64      	ldr	r3, [pc, #400]	; (8005218 <LL_USART_SetBaudRate+0x238>)
 8005086:	fba3 2302 	umull	r2, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	b29b      	uxth	r3, r3
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	b29c      	uxth	r4, r3
 8005092:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800509c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050a0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	6539      	str	r1, [r7, #80]	; 0x50
 80050ac:	415b      	adcs	r3, r3
 80050ae:	657b      	str	r3, [r7, #84]	; 0x54
 80050b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050b4:	4641      	mov	r1, r8
 80050b6:	1851      	adds	r1, r2, r1
 80050b8:	64b9      	str	r1, [r7, #72]	; 0x48
 80050ba:	4649      	mov	r1, r9
 80050bc:	414b      	adcs	r3, r1
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80050cc:	4659      	mov	r1, fp
 80050ce:	00cb      	lsls	r3, r1, #3
 80050d0:	4651      	mov	r1, sl
 80050d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d6:	4651      	mov	r1, sl
 80050d8:	00ca      	lsls	r2, r1, #3
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	4603      	mov	r3, r0
 80050e0:	4642      	mov	r2, r8
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050e8:	464b      	mov	r3, r9
 80050ea:	460a      	mov	r2, r1
 80050ec:	eb42 0303 	adc.w	r3, r2, r3
 80050f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80050f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050fe:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005102:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005106:	460b      	mov	r3, r1
 8005108:	18db      	adds	r3, r3, r3
 800510a:	643b      	str	r3, [r7, #64]	; 0x40
 800510c:	4613      	mov	r3, r2
 800510e:	eb42 0303 	adc.w	r3, r2, r3
 8005112:	647b      	str	r3, [r7, #68]	; 0x44
 8005114:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005118:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800511c:	f7fb fcbe 	bl	8000a9c <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4611      	mov	r1, r2
 8005126:	4b3c      	ldr	r3, [pc, #240]	; (8005218 <LL_USART_SetBaudRate+0x238>)
 8005128:	fba3 2301 	umull	r2, r3, r3, r1
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	2264      	movs	r2, #100	; 0x64
 8005130:	fb02 f303 	mul.w	r3, r2, r3
 8005134:	1acb      	subs	r3, r1, r3
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800513c:	4b36      	ldr	r3, [pc, #216]	; (8005218 <LL_USART_SetBaudRate+0x238>)
 800513e:	fba3 2302 	umull	r2, r3, r3, r2
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	b29b      	uxth	r3, r3
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	b29b      	uxth	r3, r3
 800514a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800514e:	b29b      	uxth	r3, r3
 8005150:	4423      	add	r3, r4
 8005152:	b29c      	uxth	r4, r3
 8005154:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005158:	2200      	movs	r2, #0
 800515a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800515e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005162:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8005166:	4642      	mov	r2, r8
 8005168:	464b      	mov	r3, r9
 800516a:	1891      	adds	r1, r2, r2
 800516c:	63b9      	str	r1, [r7, #56]	; 0x38
 800516e:	415b      	adcs	r3, r3
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005172:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005176:	4641      	mov	r1, r8
 8005178:	1851      	adds	r1, r2, r1
 800517a:	6339      	str	r1, [r7, #48]	; 0x30
 800517c:	4649      	mov	r1, r9
 800517e:	414b      	adcs	r3, r1
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	f04f 0300 	mov.w	r3, #0
 800518a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800518e:	4659      	mov	r1, fp
 8005190:	00cb      	lsls	r3, r1, #3
 8005192:	4651      	mov	r1, sl
 8005194:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005198:	4651      	mov	r1, sl
 800519a:	00ca      	lsls	r2, r1, #3
 800519c:	4610      	mov	r0, r2
 800519e:	4619      	mov	r1, r3
 80051a0:	4603      	mov	r3, r0
 80051a2:	4642      	mov	r2, r8
 80051a4:	189b      	adds	r3, r3, r2
 80051a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051aa:	464b      	mov	r3, r9
 80051ac:	460a      	mov	r2, r1
 80051ae:	eb42 0303 	adc.w	r3, r2, r3
 80051b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80051b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051c0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80051c4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80051c8:	460b      	mov	r3, r1
 80051ca:	18db      	adds	r3, r3, r3
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ce:	4613      	mov	r3, r2
 80051d0:	eb42 0303 	adc.w	r3, r2, r3
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051da:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80051de:	f7fb fc5d 	bl	8000a9c <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <LL_USART_SetBaudRate+0x238>)
 80051e8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	2164      	movs	r1, #100	; 0x64
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	3332      	adds	r3, #50	; 0x32
 80051fa:	4a07      	ldr	r2, [pc, #28]	; (8005218 <LL_USART_SetBaudRate+0x238>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	b29b      	uxth	r3, r3
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	b29b      	uxth	r3, r3
 800520a:	4423      	add	r3, r4
 800520c:	b29b      	uxth	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005214:	609a      	str	r2, [r3, #8]
}
 8005216:	e108      	b.n	800542a <LL_USART_SetBaudRate+0x44a>
 8005218:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800521c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005220:	2200      	movs	r2, #0
 8005222:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005226:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800522a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800522e:	4642      	mov	r2, r8
 8005230:	464b      	mov	r3, r9
 8005232:	1891      	adds	r1, r2, r2
 8005234:	6239      	str	r1, [r7, #32]
 8005236:	415b      	adcs	r3, r3
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800523e:	4641      	mov	r1, r8
 8005240:	1854      	adds	r4, r2, r1
 8005242:	4649      	mov	r1, r9
 8005244:	eb43 0501 	adc.w	r5, r3, r1
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	00eb      	lsls	r3, r5, #3
 8005252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005256:	00e2      	lsls	r2, r4, #3
 8005258:	4614      	mov	r4, r2
 800525a:	461d      	mov	r5, r3
 800525c:	4643      	mov	r3, r8
 800525e:	18e3      	adds	r3, r4, r3
 8005260:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005264:	464b      	mov	r3, r9
 8005266:	eb45 0303 	adc.w	r3, r5, r3
 800526a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800526e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005272:	2200      	movs	r2, #0
 8005274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005278:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005288:	4629      	mov	r1, r5
 800528a:	008b      	lsls	r3, r1, #2
 800528c:	4621      	mov	r1, r4
 800528e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005292:	4621      	mov	r1, r4
 8005294:	008a      	lsls	r2, r1, #2
 8005296:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800529a:	f7fb fbff 	bl	8000a9c <__aeabi_uldivmod>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4b65      	ldr	r3, [pc, #404]	; (8005438 <LL_USART_SetBaudRate+0x458>)
 80052a4:	fba3 2302 	umull	r2, r3, r3, r2
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	b29c      	uxth	r4, r3
 80052b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052be:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80052c2:	4642      	mov	r2, r8
 80052c4:	464b      	mov	r3, r9
 80052c6:	1891      	adds	r1, r2, r2
 80052c8:	61b9      	str	r1, [r7, #24]
 80052ca:	415b      	adcs	r3, r3
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d2:	4641      	mov	r1, r8
 80052d4:	1851      	adds	r1, r2, r1
 80052d6:	6139      	str	r1, [r7, #16]
 80052d8:	4649      	mov	r1, r9
 80052da:	414b      	adcs	r3, r1
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052ea:	4659      	mov	r1, fp
 80052ec:	00cb      	lsls	r3, r1, #3
 80052ee:	4651      	mov	r1, sl
 80052f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052f4:	4651      	mov	r1, sl
 80052f6:	00ca      	lsls	r2, r1, #3
 80052f8:	4610      	mov	r0, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	4603      	mov	r3, r0
 80052fe:	4642      	mov	r2, r8
 8005300:	189b      	adds	r3, r3, r2
 8005302:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005306:	464b      	mov	r3, r9
 8005308:	460a      	mov	r2, r1
 800530a:	eb42 0303 	adc.w	r3, r2, r3
 800530e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005312:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005316:	2200      	movs	r2, #0
 8005318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800531c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800532c:	4649      	mov	r1, r9
 800532e:	008b      	lsls	r3, r1, #2
 8005330:	4641      	mov	r1, r8
 8005332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005336:	4641      	mov	r1, r8
 8005338:	008a      	lsls	r2, r1, #2
 800533a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800533e:	f7fb fbad 	bl	8000a9c <__aeabi_uldivmod>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4611      	mov	r1, r2
 8005348:	4b3b      	ldr	r3, [pc, #236]	; (8005438 <LL_USART_SetBaudRate+0x458>)
 800534a:	fba3 2301 	umull	r2, r3, r3, r1
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2264      	movs	r2, #100	; 0x64
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	1acb      	subs	r3, r1, r3
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	3332      	adds	r3, #50	; 0x32
 800535c:	4a36      	ldr	r2, [pc, #216]	; (8005438 <LL_USART_SetBaudRate+0x458>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	b29b      	uxth	r3, r3
 8005366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800536a:	b29b      	uxth	r3, r3
 800536c:	4423      	add	r3, r4
 800536e:	b29c      	uxth	r4, r3
 8005370:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005374:	2200      	movs	r2, #0
 8005376:	67bb      	str	r3, [r7, #120]	; 0x78
 8005378:	67fa      	str	r2, [r7, #124]	; 0x7c
 800537a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800537e:	4642      	mov	r2, r8
 8005380:	464b      	mov	r3, r9
 8005382:	1891      	adds	r1, r2, r2
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	415b      	adcs	r3, r3
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800538e:	4641      	mov	r1, r8
 8005390:	1851      	adds	r1, r2, r1
 8005392:	6039      	str	r1, [r7, #0]
 8005394:	4649      	mov	r1, r9
 8005396:	414b      	adcs	r3, r1
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053a6:	4659      	mov	r1, fp
 80053a8:	00cb      	lsls	r3, r1, #3
 80053aa:	4651      	mov	r1, sl
 80053ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b0:	4651      	mov	r1, sl
 80053b2:	00ca      	lsls	r2, r1, #3
 80053b4:	4610      	mov	r0, r2
 80053b6:	4619      	mov	r1, r3
 80053b8:	4603      	mov	r3, r0
 80053ba:	4642      	mov	r2, r8
 80053bc:	189b      	adds	r3, r3, r2
 80053be:	673b      	str	r3, [r7, #112]	; 0x70
 80053c0:	464b      	mov	r3, r9
 80053c2:	460a      	mov	r2, r1
 80053c4:	eb42 0303 	adc.w	r3, r2, r3
 80053c8:	677b      	str	r3, [r7, #116]	; 0x74
 80053ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053ce:	2200      	movs	r2, #0
 80053d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80053e0:	4649      	mov	r1, r9
 80053e2:	008b      	lsls	r3, r1, #2
 80053e4:	4641      	mov	r1, r8
 80053e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ea:	4641      	mov	r1, r8
 80053ec:	008a      	lsls	r2, r1, #2
 80053ee:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80053f2:	f7fb fb53 	bl	8000a9c <__aeabi_uldivmod>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4b0f      	ldr	r3, [pc, #60]	; (8005438 <LL_USART_SetBaudRate+0x458>)
 80053fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	2164      	movs	r1, #100	; 0x64
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	3332      	adds	r3, #50	; 0x32
 800540e:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <LL_USART_SetBaudRate+0x458>)
 8005410:	fba2 2303 	umull	r2, r3, r2, r3
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	b29b      	uxth	r3, r3
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	b29b      	uxth	r3, r3
 800541e:	4423      	add	r3, r4
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005428:	609a      	str	r2, [r3, #8]
}
 800542a:	bf00      	nop
 800542c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005430:	46bd      	mov	sp, r7
 8005432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005436:	bf00      	nop
 8005438:	51eb851f 	.word	0x51eb851f

0800543c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800544a:	2300      	movs	r3, #0
 800544c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff fd8c 	bl	8004f6c <LL_USART_IsEnabled>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d15e      	bne.n	8005518 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005462:	f023 030c 	bic.w	r3, r3, #12
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	6851      	ldr	r1, [r2, #4]
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	68d2      	ldr	r2, [r2, #12]
 800546e:	4311      	orrs	r1, r2
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	6912      	ldr	r2, [r2, #16]
 8005474:	4311      	orrs	r1, r2
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	6992      	ldr	r2, [r2, #24]
 800547a:	430a      	orrs	r2, r1
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff fd83 	bl	8004f94 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	4619      	mov	r1, r3
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff fd90 	bl	8004fba <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff f978 	bl	8004794 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <LL_USART_Init+0xe8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d102      	bne.n	80054b2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	e021      	b.n	80054f6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <LL_USART_Init+0xec>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d102      	bne.n	80054c0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	e01a      	b.n	80054f6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a1a      	ldr	r2, [pc, #104]	; (800552c <LL_USART_Init+0xf0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d102      	bne.n	80054ce <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	e013      	b.n	80054f6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a17      	ldr	r2, [pc, #92]	; (8005530 <LL_USART_Init+0xf4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d102      	bne.n	80054dc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	e00c      	b.n	80054f6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a15      	ldr	r2, [pc, #84]	; (8005534 <LL_USART_Init+0xf8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d102      	bne.n	80054ea <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	e005      	b.n	80054f6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a12      	ldr	r2, [pc, #72]	; (8005538 <LL_USART_Init+0xfc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d101      	bne.n	80054f6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00d      	beq.n	8005518 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d009      	beq.n	8005518 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005504:	2300      	movs	r3, #0
 8005506:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69b9      	ldr	r1, [r7, #24]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff fd64 	bl	8004fe0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005518:	7ffb      	ldrb	r3, [r7, #31]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40011000 	.word	0x40011000
 8005528:	40004400 	.word	0x40004400
 800552c:	40004800 	.word	0x40004800
 8005530:	40011400 	.word	0x40011400
 8005534:	40004c00 	.word	0x40004c00
 8005538:	40005000 	.word	0x40005000

0800553c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005544:	4a04      	ldr	r2, [pc, #16]	; (8005558 <LL_SetSystemCoreClock+0x1c>)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6013      	str	r3, [r2, #0]
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000000 	.word	0x20000000

0800555c <siprintf>:
 800555c:	b40e      	push	{r1, r2, r3}
 800555e:	b500      	push	{lr}
 8005560:	b09c      	sub	sp, #112	; 0x70
 8005562:	ab1d      	add	r3, sp, #116	; 0x74
 8005564:	9002      	str	r0, [sp, #8]
 8005566:	9006      	str	r0, [sp, #24]
 8005568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800556c:	4809      	ldr	r0, [pc, #36]	; (8005594 <siprintf+0x38>)
 800556e:	9107      	str	r1, [sp, #28]
 8005570:	9104      	str	r1, [sp, #16]
 8005572:	4909      	ldr	r1, [pc, #36]	; (8005598 <siprintf+0x3c>)
 8005574:	f853 2b04 	ldr.w	r2, [r3], #4
 8005578:	9105      	str	r1, [sp, #20]
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	9301      	str	r3, [sp, #4]
 800557e:	a902      	add	r1, sp, #8
 8005580:	f000 f9a0 	bl	80058c4 <_svfiprintf_r>
 8005584:	9b02      	ldr	r3, [sp, #8]
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	b01c      	add	sp, #112	; 0x70
 800558c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005590:	b003      	add	sp, #12
 8005592:	4770      	bx	lr
 8005594:	20000058 	.word	0x20000058
 8005598:	ffff0208 	.word	0xffff0208

0800559c <memset>:
 800559c:	4402      	add	r2, r0
 800559e:	4603      	mov	r3, r0
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d100      	bne.n	80055a6 <memset+0xa>
 80055a4:	4770      	bx	lr
 80055a6:	f803 1b01 	strb.w	r1, [r3], #1
 80055aa:	e7f9      	b.n	80055a0 <memset+0x4>

080055ac <__errno>:
 80055ac:	4b01      	ldr	r3, [pc, #4]	; (80055b4 <__errno+0x8>)
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000058 	.word	0x20000058

080055b8 <__libc_init_array>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4d0d      	ldr	r5, [pc, #52]	; (80055f0 <__libc_init_array+0x38>)
 80055bc:	4c0d      	ldr	r4, [pc, #52]	; (80055f4 <__libc_init_array+0x3c>)
 80055be:	1b64      	subs	r4, r4, r5
 80055c0:	10a4      	asrs	r4, r4, #2
 80055c2:	2600      	movs	r6, #0
 80055c4:	42a6      	cmp	r6, r4
 80055c6:	d109      	bne.n	80055dc <__libc_init_array+0x24>
 80055c8:	4d0b      	ldr	r5, [pc, #44]	; (80055f8 <__libc_init_array+0x40>)
 80055ca:	4c0c      	ldr	r4, [pc, #48]	; (80055fc <__libc_init_array+0x44>)
 80055cc:	f000 fc6a 	bl	8005ea4 <_init>
 80055d0:	1b64      	subs	r4, r4, r5
 80055d2:	10a4      	asrs	r4, r4, #2
 80055d4:	2600      	movs	r6, #0
 80055d6:	42a6      	cmp	r6, r4
 80055d8:	d105      	bne.n	80055e6 <__libc_init_array+0x2e>
 80055da:	bd70      	pop	{r4, r5, r6, pc}
 80055dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e0:	4798      	blx	r3
 80055e2:	3601      	adds	r6, #1
 80055e4:	e7ee      	b.n	80055c4 <__libc_init_array+0xc>
 80055e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ea:	4798      	blx	r3
 80055ec:	3601      	adds	r6, #1
 80055ee:	e7f2      	b.n	80055d6 <__libc_init_array+0x1e>
 80055f0:	08006028 	.word	0x08006028
 80055f4:	08006028 	.word	0x08006028
 80055f8:	08006028 	.word	0x08006028
 80055fc:	0800602c 	.word	0x0800602c

08005600 <__retarget_lock_acquire_recursive>:
 8005600:	4770      	bx	lr

08005602 <__retarget_lock_release_recursive>:
 8005602:	4770      	bx	lr

08005604 <memcpy>:
 8005604:	440a      	add	r2, r1
 8005606:	4291      	cmp	r1, r2
 8005608:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800560c:	d100      	bne.n	8005610 <memcpy+0xc>
 800560e:	4770      	bx	lr
 8005610:	b510      	push	{r4, lr}
 8005612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800561a:	4291      	cmp	r1, r2
 800561c:	d1f9      	bne.n	8005612 <memcpy+0xe>
 800561e:	bd10      	pop	{r4, pc}

08005620 <_free_r>:
 8005620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005622:	2900      	cmp	r1, #0
 8005624:	d044      	beq.n	80056b0 <_free_r+0x90>
 8005626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562a:	9001      	str	r0, [sp, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f1a1 0404 	sub.w	r4, r1, #4
 8005632:	bfb8      	it	lt
 8005634:	18e4      	addlt	r4, r4, r3
 8005636:	f000 f8df 	bl	80057f8 <__malloc_lock>
 800563a:	4a1e      	ldr	r2, [pc, #120]	; (80056b4 <_free_r+0x94>)
 800563c:	9801      	ldr	r0, [sp, #4]
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	b933      	cbnz	r3, 8005650 <_free_r+0x30>
 8005642:	6063      	str	r3, [r4, #4]
 8005644:	6014      	str	r4, [r2, #0]
 8005646:	b003      	add	sp, #12
 8005648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800564c:	f000 b8da 	b.w	8005804 <__malloc_unlock>
 8005650:	42a3      	cmp	r3, r4
 8005652:	d908      	bls.n	8005666 <_free_r+0x46>
 8005654:	6825      	ldr	r5, [r4, #0]
 8005656:	1961      	adds	r1, r4, r5
 8005658:	428b      	cmp	r3, r1
 800565a:	bf01      	itttt	eq
 800565c:	6819      	ldreq	r1, [r3, #0]
 800565e:	685b      	ldreq	r3, [r3, #4]
 8005660:	1949      	addeq	r1, r1, r5
 8005662:	6021      	streq	r1, [r4, #0]
 8005664:	e7ed      	b.n	8005642 <_free_r+0x22>
 8005666:	461a      	mov	r2, r3
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	b10b      	cbz	r3, 8005670 <_free_r+0x50>
 800566c:	42a3      	cmp	r3, r4
 800566e:	d9fa      	bls.n	8005666 <_free_r+0x46>
 8005670:	6811      	ldr	r1, [r2, #0]
 8005672:	1855      	adds	r5, r2, r1
 8005674:	42a5      	cmp	r5, r4
 8005676:	d10b      	bne.n	8005690 <_free_r+0x70>
 8005678:	6824      	ldr	r4, [r4, #0]
 800567a:	4421      	add	r1, r4
 800567c:	1854      	adds	r4, r2, r1
 800567e:	42a3      	cmp	r3, r4
 8005680:	6011      	str	r1, [r2, #0]
 8005682:	d1e0      	bne.n	8005646 <_free_r+0x26>
 8005684:	681c      	ldr	r4, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	6053      	str	r3, [r2, #4]
 800568a:	440c      	add	r4, r1
 800568c:	6014      	str	r4, [r2, #0]
 800568e:	e7da      	b.n	8005646 <_free_r+0x26>
 8005690:	d902      	bls.n	8005698 <_free_r+0x78>
 8005692:	230c      	movs	r3, #12
 8005694:	6003      	str	r3, [r0, #0]
 8005696:	e7d6      	b.n	8005646 <_free_r+0x26>
 8005698:	6825      	ldr	r5, [r4, #0]
 800569a:	1961      	adds	r1, r4, r5
 800569c:	428b      	cmp	r3, r1
 800569e:	bf04      	itt	eq
 80056a0:	6819      	ldreq	r1, [r3, #0]
 80056a2:	685b      	ldreq	r3, [r3, #4]
 80056a4:	6063      	str	r3, [r4, #4]
 80056a6:	bf04      	itt	eq
 80056a8:	1949      	addeq	r1, r1, r5
 80056aa:	6021      	streq	r1, [r4, #0]
 80056ac:	6054      	str	r4, [r2, #4]
 80056ae:	e7ca      	b.n	8005646 <_free_r+0x26>
 80056b0:	b003      	add	sp, #12
 80056b2:	bd30      	pop	{r4, r5, pc}
 80056b4:	2000031c 	.word	0x2000031c

080056b8 <sbrk_aligned>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	4e0e      	ldr	r6, [pc, #56]	; (80056f4 <sbrk_aligned+0x3c>)
 80056bc:	460c      	mov	r4, r1
 80056be:	6831      	ldr	r1, [r6, #0]
 80056c0:	4605      	mov	r5, r0
 80056c2:	b911      	cbnz	r1, 80056ca <sbrk_aligned+0x12>
 80056c4:	f000 fba6 	bl	8005e14 <_sbrk_r>
 80056c8:	6030      	str	r0, [r6, #0]
 80056ca:	4621      	mov	r1, r4
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 fba1 	bl	8005e14 <_sbrk_r>
 80056d2:	1c43      	adds	r3, r0, #1
 80056d4:	d00a      	beq.n	80056ec <sbrk_aligned+0x34>
 80056d6:	1cc4      	adds	r4, r0, #3
 80056d8:	f024 0403 	bic.w	r4, r4, #3
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d007      	beq.n	80056f0 <sbrk_aligned+0x38>
 80056e0:	1a21      	subs	r1, r4, r0
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 fb96 	bl	8005e14 <_sbrk_r>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d101      	bne.n	80056f0 <sbrk_aligned+0x38>
 80056ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80056f0:	4620      	mov	r0, r4
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	20000320 	.word	0x20000320

080056f8 <_malloc_r>:
 80056f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056fc:	1ccd      	adds	r5, r1, #3
 80056fe:	f025 0503 	bic.w	r5, r5, #3
 8005702:	3508      	adds	r5, #8
 8005704:	2d0c      	cmp	r5, #12
 8005706:	bf38      	it	cc
 8005708:	250c      	movcc	r5, #12
 800570a:	2d00      	cmp	r5, #0
 800570c:	4607      	mov	r7, r0
 800570e:	db01      	blt.n	8005714 <_malloc_r+0x1c>
 8005710:	42a9      	cmp	r1, r5
 8005712:	d905      	bls.n	8005720 <_malloc_r+0x28>
 8005714:	230c      	movs	r3, #12
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	2600      	movs	r6, #0
 800571a:	4630      	mov	r0, r6
 800571c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005720:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057f4 <_malloc_r+0xfc>
 8005724:	f000 f868 	bl	80057f8 <__malloc_lock>
 8005728:	f8d8 3000 	ldr.w	r3, [r8]
 800572c:	461c      	mov	r4, r3
 800572e:	bb5c      	cbnz	r4, 8005788 <_malloc_r+0x90>
 8005730:	4629      	mov	r1, r5
 8005732:	4638      	mov	r0, r7
 8005734:	f7ff ffc0 	bl	80056b8 <sbrk_aligned>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	4604      	mov	r4, r0
 800573c:	d155      	bne.n	80057ea <_malloc_r+0xf2>
 800573e:	f8d8 4000 	ldr.w	r4, [r8]
 8005742:	4626      	mov	r6, r4
 8005744:	2e00      	cmp	r6, #0
 8005746:	d145      	bne.n	80057d4 <_malloc_r+0xdc>
 8005748:	2c00      	cmp	r4, #0
 800574a:	d048      	beq.n	80057de <_malloc_r+0xe6>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	4631      	mov	r1, r6
 8005750:	4638      	mov	r0, r7
 8005752:	eb04 0903 	add.w	r9, r4, r3
 8005756:	f000 fb5d 	bl	8005e14 <_sbrk_r>
 800575a:	4581      	cmp	r9, r0
 800575c:	d13f      	bne.n	80057de <_malloc_r+0xe6>
 800575e:	6821      	ldr	r1, [r4, #0]
 8005760:	1a6d      	subs	r5, r5, r1
 8005762:	4629      	mov	r1, r5
 8005764:	4638      	mov	r0, r7
 8005766:	f7ff ffa7 	bl	80056b8 <sbrk_aligned>
 800576a:	3001      	adds	r0, #1
 800576c:	d037      	beq.n	80057de <_malloc_r+0xe6>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	442b      	add	r3, r5
 8005772:	6023      	str	r3, [r4, #0]
 8005774:	f8d8 3000 	ldr.w	r3, [r8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d038      	beq.n	80057ee <_malloc_r+0xf6>
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	42a2      	cmp	r2, r4
 8005780:	d12b      	bne.n	80057da <_malloc_r+0xe2>
 8005782:	2200      	movs	r2, #0
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	e00f      	b.n	80057a8 <_malloc_r+0xb0>
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	1b52      	subs	r2, r2, r5
 800578c:	d41f      	bmi.n	80057ce <_malloc_r+0xd6>
 800578e:	2a0b      	cmp	r2, #11
 8005790:	d917      	bls.n	80057c2 <_malloc_r+0xca>
 8005792:	1961      	adds	r1, r4, r5
 8005794:	42a3      	cmp	r3, r4
 8005796:	6025      	str	r5, [r4, #0]
 8005798:	bf18      	it	ne
 800579a:	6059      	strne	r1, [r3, #4]
 800579c:	6863      	ldr	r3, [r4, #4]
 800579e:	bf08      	it	eq
 80057a0:	f8c8 1000 	streq.w	r1, [r8]
 80057a4:	5162      	str	r2, [r4, r5]
 80057a6:	604b      	str	r3, [r1, #4]
 80057a8:	4638      	mov	r0, r7
 80057aa:	f104 060b 	add.w	r6, r4, #11
 80057ae:	f000 f829 	bl	8005804 <__malloc_unlock>
 80057b2:	f026 0607 	bic.w	r6, r6, #7
 80057b6:	1d23      	adds	r3, r4, #4
 80057b8:	1af2      	subs	r2, r6, r3
 80057ba:	d0ae      	beq.n	800571a <_malloc_r+0x22>
 80057bc:	1b9b      	subs	r3, r3, r6
 80057be:	50a3      	str	r3, [r4, r2]
 80057c0:	e7ab      	b.n	800571a <_malloc_r+0x22>
 80057c2:	42a3      	cmp	r3, r4
 80057c4:	6862      	ldr	r2, [r4, #4]
 80057c6:	d1dd      	bne.n	8005784 <_malloc_r+0x8c>
 80057c8:	f8c8 2000 	str.w	r2, [r8]
 80057cc:	e7ec      	b.n	80057a8 <_malloc_r+0xb0>
 80057ce:	4623      	mov	r3, r4
 80057d0:	6864      	ldr	r4, [r4, #4]
 80057d2:	e7ac      	b.n	800572e <_malloc_r+0x36>
 80057d4:	4634      	mov	r4, r6
 80057d6:	6876      	ldr	r6, [r6, #4]
 80057d8:	e7b4      	b.n	8005744 <_malloc_r+0x4c>
 80057da:	4613      	mov	r3, r2
 80057dc:	e7cc      	b.n	8005778 <_malloc_r+0x80>
 80057de:	230c      	movs	r3, #12
 80057e0:	603b      	str	r3, [r7, #0]
 80057e2:	4638      	mov	r0, r7
 80057e4:	f000 f80e 	bl	8005804 <__malloc_unlock>
 80057e8:	e797      	b.n	800571a <_malloc_r+0x22>
 80057ea:	6025      	str	r5, [r4, #0]
 80057ec:	e7dc      	b.n	80057a8 <_malloc_r+0xb0>
 80057ee:	605b      	str	r3, [r3, #4]
 80057f0:	deff      	udf	#255	; 0xff
 80057f2:	bf00      	nop
 80057f4:	2000031c 	.word	0x2000031c

080057f8 <__malloc_lock>:
 80057f8:	4801      	ldr	r0, [pc, #4]	; (8005800 <__malloc_lock+0x8>)
 80057fa:	f7ff bf01 	b.w	8005600 <__retarget_lock_acquire_recursive>
 80057fe:	bf00      	nop
 8005800:	20000318 	.word	0x20000318

08005804 <__malloc_unlock>:
 8005804:	4801      	ldr	r0, [pc, #4]	; (800580c <__malloc_unlock+0x8>)
 8005806:	f7ff befc 	b.w	8005602 <__retarget_lock_release_recursive>
 800580a:	bf00      	nop
 800580c:	20000318 	.word	0x20000318

08005810 <__ssputs_r>:
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	688e      	ldr	r6, [r1, #8]
 8005816:	461f      	mov	r7, r3
 8005818:	42be      	cmp	r6, r7
 800581a:	680b      	ldr	r3, [r1, #0]
 800581c:	4682      	mov	sl, r0
 800581e:	460c      	mov	r4, r1
 8005820:	4690      	mov	r8, r2
 8005822:	d82c      	bhi.n	800587e <__ssputs_r+0x6e>
 8005824:	898a      	ldrh	r2, [r1, #12]
 8005826:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800582a:	d026      	beq.n	800587a <__ssputs_r+0x6a>
 800582c:	6965      	ldr	r5, [r4, #20]
 800582e:	6909      	ldr	r1, [r1, #16]
 8005830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005834:	eba3 0901 	sub.w	r9, r3, r1
 8005838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800583c:	1c7b      	adds	r3, r7, #1
 800583e:	444b      	add	r3, r9
 8005840:	106d      	asrs	r5, r5, #1
 8005842:	429d      	cmp	r5, r3
 8005844:	bf38      	it	cc
 8005846:	461d      	movcc	r5, r3
 8005848:	0553      	lsls	r3, r2, #21
 800584a:	d527      	bpl.n	800589c <__ssputs_r+0x8c>
 800584c:	4629      	mov	r1, r5
 800584e:	f7ff ff53 	bl	80056f8 <_malloc_r>
 8005852:	4606      	mov	r6, r0
 8005854:	b360      	cbz	r0, 80058b0 <__ssputs_r+0xa0>
 8005856:	6921      	ldr	r1, [r4, #16]
 8005858:	464a      	mov	r2, r9
 800585a:	f7ff fed3 	bl	8005604 <memcpy>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005868:	81a3      	strh	r3, [r4, #12]
 800586a:	6126      	str	r6, [r4, #16]
 800586c:	6165      	str	r5, [r4, #20]
 800586e:	444e      	add	r6, r9
 8005870:	eba5 0509 	sub.w	r5, r5, r9
 8005874:	6026      	str	r6, [r4, #0]
 8005876:	60a5      	str	r5, [r4, #8]
 8005878:	463e      	mov	r6, r7
 800587a:	42be      	cmp	r6, r7
 800587c:	d900      	bls.n	8005880 <__ssputs_r+0x70>
 800587e:	463e      	mov	r6, r7
 8005880:	6820      	ldr	r0, [r4, #0]
 8005882:	4632      	mov	r2, r6
 8005884:	4641      	mov	r1, r8
 8005886:	f000 faab 	bl	8005de0 <memmove>
 800588a:	68a3      	ldr	r3, [r4, #8]
 800588c:	1b9b      	subs	r3, r3, r6
 800588e:	60a3      	str	r3, [r4, #8]
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	4433      	add	r3, r6
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	2000      	movs	r0, #0
 8005898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589c:	462a      	mov	r2, r5
 800589e:	f000 fac9 	bl	8005e34 <_realloc_r>
 80058a2:	4606      	mov	r6, r0
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d1e0      	bne.n	800586a <__ssputs_r+0x5a>
 80058a8:	6921      	ldr	r1, [r4, #16]
 80058aa:	4650      	mov	r0, sl
 80058ac:	f7ff feb8 	bl	8005620 <_free_r>
 80058b0:	230c      	movs	r3, #12
 80058b2:	f8ca 3000 	str.w	r3, [sl]
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058bc:	81a3      	strh	r3, [r4, #12]
 80058be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c2:	e7e9      	b.n	8005898 <__ssputs_r+0x88>

080058c4 <_svfiprintf_r>:
 80058c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	4698      	mov	r8, r3
 80058ca:	898b      	ldrh	r3, [r1, #12]
 80058cc:	061b      	lsls	r3, r3, #24
 80058ce:	b09d      	sub	sp, #116	; 0x74
 80058d0:	4607      	mov	r7, r0
 80058d2:	460d      	mov	r5, r1
 80058d4:	4614      	mov	r4, r2
 80058d6:	d50e      	bpl.n	80058f6 <_svfiprintf_r+0x32>
 80058d8:	690b      	ldr	r3, [r1, #16]
 80058da:	b963      	cbnz	r3, 80058f6 <_svfiprintf_r+0x32>
 80058dc:	2140      	movs	r1, #64	; 0x40
 80058de:	f7ff ff0b 	bl	80056f8 <_malloc_r>
 80058e2:	6028      	str	r0, [r5, #0]
 80058e4:	6128      	str	r0, [r5, #16]
 80058e6:	b920      	cbnz	r0, 80058f2 <_svfiprintf_r+0x2e>
 80058e8:	230c      	movs	r3, #12
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f0:	e0d0      	b.n	8005a94 <_svfiprintf_r+0x1d0>
 80058f2:	2340      	movs	r3, #64	; 0x40
 80058f4:	616b      	str	r3, [r5, #20]
 80058f6:	2300      	movs	r3, #0
 80058f8:	9309      	str	r3, [sp, #36]	; 0x24
 80058fa:	2320      	movs	r3, #32
 80058fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005900:	f8cd 800c 	str.w	r8, [sp, #12]
 8005904:	2330      	movs	r3, #48	; 0x30
 8005906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005aac <_svfiprintf_r+0x1e8>
 800590a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800590e:	f04f 0901 	mov.w	r9, #1
 8005912:	4623      	mov	r3, r4
 8005914:	469a      	mov	sl, r3
 8005916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800591a:	b10a      	cbz	r2, 8005920 <_svfiprintf_r+0x5c>
 800591c:	2a25      	cmp	r2, #37	; 0x25
 800591e:	d1f9      	bne.n	8005914 <_svfiprintf_r+0x50>
 8005920:	ebba 0b04 	subs.w	fp, sl, r4
 8005924:	d00b      	beq.n	800593e <_svfiprintf_r+0x7a>
 8005926:	465b      	mov	r3, fp
 8005928:	4622      	mov	r2, r4
 800592a:	4629      	mov	r1, r5
 800592c:	4638      	mov	r0, r7
 800592e:	f7ff ff6f 	bl	8005810 <__ssputs_r>
 8005932:	3001      	adds	r0, #1
 8005934:	f000 80a9 	beq.w	8005a8a <_svfiprintf_r+0x1c6>
 8005938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800593a:	445a      	add	r2, fp
 800593c:	9209      	str	r2, [sp, #36]	; 0x24
 800593e:	f89a 3000 	ldrb.w	r3, [sl]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 80a1 	beq.w	8005a8a <_svfiprintf_r+0x1c6>
 8005948:	2300      	movs	r3, #0
 800594a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800594e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005952:	f10a 0a01 	add.w	sl, sl, #1
 8005956:	9304      	str	r3, [sp, #16]
 8005958:	9307      	str	r3, [sp, #28]
 800595a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800595e:	931a      	str	r3, [sp, #104]	; 0x68
 8005960:	4654      	mov	r4, sl
 8005962:	2205      	movs	r2, #5
 8005964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005968:	4850      	ldr	r0, [pc, #320]	; (8005aac <_svfiprintf_r+0x1e8>)
 800596a:	f7fa fc51 	bl	8000210 <memchr>
 800596e:	9a04      	ldr	r2, [sp, #16]
 8005970:	b9d8      	cbnz	r0, 80059aa <_svfiprintf_r+0xe6>
 8005972:	06d0      	lsls	r0, r2, #27
 8005974:	bf44      	itt	mi
 8005976:	2320      	movmi	r3, #32
 8005978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800597c:	0711      	lsls	r1, r2, #28
 800597e:	bf44      	itt	mi
 8005980:	232b      	movmi	r3, #43	; 0x2b
 8005982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005986:	f89a 3000 	ldrb.w	r3, [sl]
 800598a:	2b2a      	cmp	r3, #42	; 0x2a
 800598c:	d015      	beq.n	80059ba <_svfiprintf_r+0xf6>
 800598e:	9a07      	ldr	r2, [sp, #28]
 8005990:	4654      	mov	r4, sl
 8005992:	2000      	movs	r0, #0
 8005994:	f04f 0c0a 	mov.w	ip, #10
 8005998:	4621      	mov	r1, r4
 800599a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800599e:	3b30      	subs	r3, #48	; 0x30
 80059a0:	2b09      	cmp	r3, #9
 80059a2:	d94d      	bls.n	8005a40 <_svfiprintf_r+0x17c>
 80059a4:	b1b0      	cbz	r0, 80059d4 <_svfiprintf_r+0x110>
 80059a6:	9207      	str	r2, [sp, #28]
 80059a8:	e014      	b.n	80059d4 <_svfiprintf_r+0x110>
 80059aa:	eba0 0308 	sub.w	r3, r0, r8
 80059ae:	fa09 f303 	lsl.w	r3, r9, r3
 80059b2:	4313      	orrs	r3, r2
 80059b4:	9304      	str	r3, [sp, #16]
 80059b6:	46a2      	mov	sl, r4
 80059b8:	e7d2      	b.n	8005960 <_svfiprintf_r+0x9c>
 80059ba:	9b03      	ldr	r3, [sp, #12]
 80059bc:	1d19      	adds	r1, r3, #4
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	9103      	str	r1, [sp, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bfbb      	ittet	lt
 80059c6:	425b      	neglt	r3, r3
 80059c8:	f042 0202 	orrlt.w	r2, r2, #2
 80059cc:	9307      	strge	r3, [sp, #28]
 80059ce:	9307      	strlt	r3, [sp, #28]
 80059d0:	bfb8      	it	lt
 80059d2:	9204      	strlt	r2, [sp, #16]
 80059d4:	7823      	ldrb	r3, [r4, #0]
 80059d6:	2b2e      	cmp	r3, #46	; 0x2e
 80059d8:	d10c      	bne.n	80059f4 <_svfiprintf_r+0x130>
 80059da:	7863      	ldrb	r3, [r4, #1]
 80059dc:	2b2a      	cmp	r3, #42	; 0x2a
 80059de:	d134      	bne.n	8005a4a <_svfiprintf_r+0x186>
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	1d1a      	adds	r2, r3, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	9203      	str	r2, [sp, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bfb8      	it	lt
 80059ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059f0:	3402      	adds	r4, #2
 80059f2:	9305      	str	r3, [sp, #20]
 80059f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005abc <_svfiprintf_r+0x1f8>
 80059f8:	7821      	ldrb	r1, [r4, #0]
 80059fa:	2203      	movs	r2, #3
 80059fc:	4650      	mov	r0, sl
 80059fe:	f7fa fc07 	bl	8000210 <memchr>
 8005a02:	b138      	cbz	r0, 8005a14 <_svfiprintf_r+0x150>
 8005a04:	9b04      	ldr	r3, [sp, #16]
 8005a06:	eba0 000a 	sub.w	r0, r0, sl
 8005a0a:	2240      	movs	r2, #64	; 0x40
 8005a0c:	4082      	lsls	r2, r0
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	3401      	adds	r4, #1
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a18:	4825      	ldr	r0, [pc, #148]	; (8005ab0 <_svfiprintf_r+0x1ec>)
 8005a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a1e:	2206      	movs	r2, #6
 8005a20:	f7fa fbf6 	bl	8000210 <memchr>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d038      	beq.n	8005a9a <_svfiprintf_r+0x1d6>
 8005a28:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <_svfiprintf_r+0x1f0>)
 8005a2a:	bb1b      	cbnz	r3, 8005a74 <_svfiprintf_r+0x1b0>
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	3307      	adds	r3, #7
 8005a30:	f023 0307 	bic.w	r3, r3, #7
 8005a34:	3308      	adds	r3, #8
 8005a36:	9303      	str	r3, [sp, #12]
 8005a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3a:	4433      	add	r3, r6
 8005a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a3e:	e768      	b.n	8005912 <_svfiprintf_r+0x4e>
 8005a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a44:	460c      	mov	r4, r1
 8005a46:	2001      	movs	r0, #1
 8005a48:	e7a6      	b.n	8005998 <_svfiprintf_r+0xd4>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	3401      	adds	r4, #1
 8005a4e:	9305      	str	r3, [sp, #20]
 8005a50:	4619      	mov	r1, r3
 8005a52:	f04f 0c0a 	mov.w	ip, #10
 8005a56:	4620      	mov	r0, r4
 8005a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a5c:	3a30      	subs	r2, #48	; 0x30
 8005a5e:	2a09      	cmp	r2, #9
 8005a60:	d903      	bls.n	8005a6a <_svfiprintf_r+0x1a6>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0c6      	beq.n	80059f4 <_svfiprintf_r+0x130>
 8005a66:	9105      	str	r1, [sp, #20]
 8005a68:	e7c4      	b.n	80059f4 <_svfiprintf_r+0x130>
 8005a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a6e:	4604      	mov	r4, r0
 8005a70:	2301      	movs	r3, #1
 8005a72:	e7f0      	b.n	8005a56 <_svfiprintf_r+0x192>
 8005a74:	ab03      	add	r3, sp, #12
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	462a      	mov	r2, r5
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <_svfiprintf_r+0x1f4>)
 8005a7c:	a904      	add	r1, sp, #16
 8005a7e:	4638      	mov	r0, r7
 8005a80:	f3af 8000 	nop.w
 8005a84:	1c42      	adds	r2, r0, #1
 8005a86:	4606      	mov	r6, r0
 8005a88:	d1d6      	bne.n	8005a38 <_svfiprintf_r+0x174>
 8005a8a:	89ab      	ldrh	r3, [r5, #12]
 8005a8c:	065b      	lsls	r3, r3, #25
 8005a8e:	f53f af2d 	bmi.w	80058ec <_svfiprintf_r+0x28>
 8005a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a94:	b01d      	add	sp, #116	; 0x74
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	ab03      	add	r3, sp, #12
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	462a      	mov	r2, r5
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <_svfiprintf_r+0x1f4>)
 8005aa2:	a904      	add	r1, sp, #16
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f000 f879 	bl	8005b9c <_printf_i>
 8005aaa:	e7eb      	b.n	8005a84 <_svfiprintf_r+0x1c0>
 8005aac:	08005fec 	.word	0x08005fec
 8005ab0:	08005ff6 	.word	0x08005ff6
 8005ab4:	00000000 	.word	0x00000000
 8005ab8:	08005811 	.word	0x08005811
 8005abc:	08005ff2 	.word	0x08005ff2

08005ac0 <_printf_common>:
 8005ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac4:	4616      	mov	r6, r2
 8005ac6:	4699      	mov	r9, r3
 8005ac8:	688a      	ldr	r2, [r1, #8]
 8005aca:	690b      	ldr	r3, [r1, #16]
 8005acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	bfb8      	it	lt
 8005ad4:	4613      	movlt	r3, r2
 8005ad6:	6033      	str	r3, [r6, #0]
 8005ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005adc:	4607      	mov	r7, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	b10a      	cbz	r2, 8005ae6 <_printf_common+0x26>
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	6033      	str	r3, [r6, #0]
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	0699      	lsls	r1, r3, #26
 8005aea:	bf42      	ittt	mi
 8005aec:	6833      	ldrmi	r3, [r6, #0]
 8005aee:	3302      	addmi	r3, #2
 8005af0:	6033      	strmi	r3, [r6, #0]
 8005af2:	6825      	ldr	r5, [r4, #0]
 8005af4:	f015 0506 	ands.w	r5, r5, #6
 8005af8:	d106      	bne.n	8005b08 <_printf_common+0x48>
 8005afa:	f104 0a19 	add.w	sl, r4, #25
 8005afe:	68e3      	ldr	r3, [r4, #12]
 8005b00:	6832      	ldr	r2, [r6, #0]
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	dc26      	bgt.n	8005b56 <_printf_common+0x96>
 8005b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b0c:	1e13      	subs	r3, r2, #0
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	bf18      	it	ne
 8005b12:	2301      	movne	r3, #1
 8005b14:	0692      	lsls	r2, r2, #26
 8005b16:	d42b      	bmi.n	8005b70 <_printf_common+0xb0>
 8005b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	4638      	mov	r0, r7
 8005b20:	47c0      	blx	r8
 8005b22:	3001      	adds	r0, #1
 8005b24:	d01e      	beq.n	8005b64 <_printf_common+0xa4>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	6922      	ldr	r2, [r4, #16]
 8005b2a:	f003 0306 	and.w	r3, r3, #6
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	bf02      	ittt	eq
 8005b32:	68e5      	ldreq	r5, [r4, #12]
 8005b34:	6833      	ldreq	r3, [r6, #0]
 8005b36:	1aed      	subeq	r5, r5, r3
 8005b38:	68a3      	ldr	r3, [r4, #8]
 8005b3a:	bf0c      	ite	eq
 8005b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b40:	2500      	movne	r5, #0
 8005b42:	4293      	cmp	r3, r2
 8005b44:	bfc4      	itt	gt
 8005b46:	1a9b      	subgt	r3, r3, r2
 8005b48:	18ed      	addgt	r5, r5, r3
 8005b4a:	2600      	movs	r6, #0
 8005b4c:	341a      	adds	r4, #26
 8005b4e:	42b5      	cmp	r5, r6
 8005b50:	d11a      	bne.n	8005b88 <_printf_common+0xc8>
 8005b52:	2000      	movs	r0, #0
 8005b54:	e008      	b.n	8005b68 <_printf_common+0xa8>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4652      	mov	r2, sl
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	47c0      	blx	r8
 8005b60:	3001      	adds	r0, #1
 8005b62:	d103      	bne.n	8005b6c <_printf_common+0xac>
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6c:	3501      	adds	r5, #1
 8005b6e:	e7c6      	b.n	8005afe <_printf_common+0x3e>
 8005b70:	18e1      	adds	r1, r4, r3
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	2030      	movs	r0, #48	; 0x30
 8005b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b7a:	4422      	add	r2, r4
 8005b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b84:	3302      	adds	r3, #2
 8005b86:	e7c7      	b.n	8005b18 <_printf_common+0x58>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4638      	mov	r0, r7
 8005b90:	47c0      	blx	r8
 8005b92:	3001      	adds	r0, #1
 8005b94:	d0e6      	beq.n	8005b64 <_printf_common+0xa4>
 8005b96:	3601      	adds	r6, #1
 8005b98:	e7d9      	b.n	8005b4e <_printf_common+0x8e>
	...

08005b9c <_printf_i>:
 8005b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba0:	7e0f      	ldrb	r7, [r1, #24]
 8005ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ba4:	2f78      	cmp	r7, #120	; 0x78
 8005ba6:	4691      	mov	r9, r2
 8005ba8:	4680      	mov	r8, r0
 8005baa:	460c      	mov	r4, r1
 8005bac:	469a      	mov	sl, r3
 8005bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bb2:	d807      	bhi.n	8005bc4 <_printf_i+0x28>
 8005bb4:	2f62      	cmp	r7, #98	; 0x62
 8005bb6:	d80a      	bhi.n	8005bce <_printf_i+0x32>
 8005bb8:	2f00      	cmp	r7, #0
 8005bba:	f000 80d4 	beq.w	8005d66 <_printf_i+0x1ca>
 8005bbe:	2f58      	cmp	r7, #88	; 0x58
 8005bc0:	f000 80c0 	beq.w	8005d44 <_printf_i+0x1a8>
 8005bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bcc:	e03a      	b.n	8005c44 <_printf_i+0xa8>
 8005bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bd2:	2b15      	cmp	r3, #21
 8005bd4:	d8f6      	bhi.n	8005bc4 <_printf_i+0x28>
 8005bd6:	a101      	add	r1, pc, #4	; (adr r1, 8005bdc <_printf_i+0x40>)
 8005bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bdc:	08005c35 	.word	0x08005c35
 8005be0:	08005c49 	.word	0x08005c49
 8005be4:	08005bc5 	.word	0x08005bc5
 8005be8:	08005bc5 	.word	0x08005bc5
 8005bec:	08005bc5 	.word	0x08005bc5
 8005bf0:	08005bc5 	.word	0x08005bc5
 8005bf4:	08005c49 	.word	0x08005c49
 8005bf8:	08005bc5 	.word	0x08005bc5
 8005bfc:	08005bc5 	.word	0x08005bc5
 8005c00:	08005bc5 	.word	0x08005bc5
 8005c04:	08005bc5 	.word	0x08005bc5
 8005c08:	08005d4d 	.word	0x08005d4d
 8005c0c:	08005c75 	.word	0x08005c75
 8005c10:	08005d07 	.word	0x08005d07
 8005c14:	08005bc5 	.word	0x08005bc5
 8005c18:	08005bc5 	.word	0x08005bc5
 8005c1c:	08005d6f 	.word	0x08005d6f
 8005c20:	08005bc5 	.word	0x08005bc5
 8005c24:	08005c75 	.word	0x08005c75
 8005c28:	08005bc5 	.word	0x08005bc5
 8005c2c:	08005bc5 	.word	0x08005bc5
 8005c30:	08005d0f 	.word	0x08005d0f
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	1d1a      	adds	r2, r3, #4
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	602a      	str	r2, [r5, #0]
 8005c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c44:	2301      	movs	r3, #1
 8005c46:	e09f      	b.n	8005d88 <_printf_i+0x1ec>
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	682b      	ldr	r3, [r5, #0]
 8005c4c:	0607      	lsls	r7, r0, #24
 8005c4e:	f103 0104 	add.w	r1, r3, #4
 8005c52:	6029      	str	r1, [r5, #0]
 8005c54:	d501      	bpl.n	8005c5a <_printf_i+0xbe>
 8005c56:	681e      	ldr	r6, [r3, #0]
 8005c58:	e003      	b.n	8005c62 <_printf_i+0xc6>
 8005c5a:	0646      	lsls	r6, r0, #25
 8005c5c:	d5fb      	bpl.n	8005c56 <_printf_i+0xba>
 8005c5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	da03      	bge.n	8005c6e <_printf_i+0xd2>
 8005c66:	232d      	movs	r3, #45	; 0x2d
 8005c68:	4276      	negs	r6, r6
 8005c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c6e:	485a      	ldr	r0, [pc, #360]	; (8005dd8 <_printf_i+0x23c>)
 8005c70:	230a      	movs	r3, #10
 8005c72:	e012      	b.n	8005c9a <_printf_i+0xfe>
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	6820      	ldr	r0, [r4, #0]
 8005c78:	1d19      	adds	r1, r3, #4
 8005c7a:	6029      	str	r1, [r5, #0]
 8005c7c:	0605      	lsls	r5, r0, #24
 8005c7e:	d501      	bpl.n	8005c84 <_printf_i+0xe8>
 8005c80:	681e      	ldr	r6, [r3, #0]
 8005c82:	e002      	b.n	8005c8a <_printf_i+0xee>
 8005c84:	0641      	lsls	r1, r0, #25
 8005c86:	d5fb      	bpl.n	8005c80 <_printf_i+0xe4>
 8005c88:	881e      	ldrh	r6, [r3, #0]
 8005c8a:	4853      	ldr	r0, [pc, #332]	; (8005dd8 <_printf_i+0x23c>)
 8005c8c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c8e:	bf0c      	ite	eq
 8005c90:	2308      	moveq	r3, #8
 8005c92:	230a      	movne	r3, #10
 8005c94:	2100      	movs	r1, #0
 8005c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c9a:	6865      	ldr	r5, [r4, #4]
 8005c9c:	60a5      	str	r5, [r4, #8]
 8005c9e:	2d00      	cmp	r5, #0
 8005ca0:	bfa2      	ittt	ge
 8005ca2:	6821      	ldrge	r1, [r4, #0]
 8005ca4:	f021 0104 	bicge.w	r1, r1, #4
 8005ca8:	6021      	strge	r1, [r4, #0]
 8005caa:	b90e      	cbnz	r6, 8005cb0 <_printf_i+0x114>
 8005cac:	2d00      	cmp	r5, #0
 8005cae:	d04b      	beq.n	8005d48 <_printf_i+0x1ac>
 8005cb0:	4615      	mov	r5, r2
 8005cb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cb6:	fb03 6711 	mls	r7, r3, r1, r6
 8005cba:	5dc7      	ldrb	r7, [r0, r7]
 8005cbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cc0:	4637      	mov	r7, r6
 8005cc2:	42bb      	cmp	r3, r7
 8005cc4:	460e      	mov	r6, r1
 8005cc6:	d9f4      	bls.n	8005cb2 <_printf_i+0x116>
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d10b      	bne.n	8005ce4 <_printf_i+0x148>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	07de      	lsls	r6, r3, #31
 8005cd0:	d508      	bpl.n	8005ce4 <_printf_i+0x148>
 8005cd2:	6923      	ldr	r3, [r4, #16]
 8005cd4:	6861      	ldr	r1, [r4, #4]
 8005cd6:	4299      	cmp	r1, r3
 8005cd8:	bfde      	ittt	le
 8005cda:	2330      	movle	r3, #48	; 0x30
 8005cdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ce0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ce4:	1b52      	subs	r2, r2, r5
 8005ce6:	6122      	str	r2, [r4, #16]
 8005ce8:	f8cd a000 	str.w	sl, [sp]
 8005cec:	464b      	mov	r3, r9
 8005cee:	aa03      	add	r2, sp, #12
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	f7ff fee4 	bl	8005ac0 <_printf_common>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d14a      	bne.n	8005d92 <_printf_i+0x1f6>
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d00:	b004      	add	sp, #16
 8005d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	f043 0320 	orr.w	r3, r3, #32
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	4833      	ldr	r0, [pc, #204]	; (8005ddc <_printf_i+0x240>)
 8005d10:	2778      	movs	r7, #120	; 0x78
 8005d12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	6829      	ldr	r1, [r5, #0]
 8005d1a:	061f      	lsls	r7, r3, #24
 8005d1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d20:	d402      	bmi.n	8005d28 <_printf_i+0x18c>
 8005d22:	065f      	lsls	r7, r3, #25
 8005d24:	bf48      	it	mi
 8005d26:	b2b6      	uxthmi	r6, r6
 8005d28:	07df      	lsls	r7, r3, #31
 8005d2a:	bf48      	it	mi
 8005d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d30:	6029      	str	r1, [r5, #0]
 8005d32:	bf48      	it	mi
 8005d34:	6023      	strmi	r3, [r4, #0]
 8005d36:	b91e      	cbnz	r6, 8005d40 <_printf_i+0x1a4>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	f023 0320 	bic.w	r3, r3, #32
 8005d3e:	6023      	str	r3, [r4, #0]
 8005d40:	2310      	movs	r3, #16
 8005d42:	e7a7      	b.n	8005c94 <_printf_i+0xf8>
 8005d44:	4824      	ldr	r0, [pc, #144]	; (8005dd8 <_printf_i+0x23c>)
 8005d46:	e7e4      	b.n	8005d12 <_printf_i+0x176>
 8005d48:	4615      	mov	r5, r2
 8005d4a:	e7bd      	b.n	8005cc8 <_printf_i+0x12c>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	6826      	ldr	r6, [r4, #0]
 8005d50:	6961      	ldr	r1, [r4, #20]
 8005d52:	1d18      	adds	r0, r3, #4
 8005d54:	6028      	str	r0, [r5, #0]
 8005d56:	0635      	lsls	r5, r6, #24
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	d501      	bpl.n	8005d60 <_printf_i+0x1c4>
 8005d5c:	6019      	str	r1, [r3, #0]
 8005d5e:	e002      	b.n	8005d66 <_printf_i+0x1ca>
 8005d60:	0670      	lsls	r0, r6, #25
 8005d62:	d5fb      	bpl.n	8005d5c <_printf_i+0x1c0>
 8005d64:	8019      	strh	r1, [r3, #0]
 8005d66:	2300      	movs	r3, #0
 8005d68:	6123      	str	r3, [r4, #16]
 8005d6a:	4615      	mov	r5, r2
 8005d6c:	e7bc      	b.n	8005ce8 <_printf_i+0x14c>
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	1d1a      	adds	r2, r3, #4
 8005d72:	602a      	str	r2, [r5, #0]
 8005d74:	681d      	ldr	r5, [r3, #0]
 8005d76:	6862      	ldr	r2, [r4, #4]
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f7fa fa48 	bl	8000210 <memchr>
 8005d80:	b108      	cbz	r0, 8005d86 <_printf_i+0x1ea>
 8005d82:	1b40      	subs	r0, r0, r5
 8005d84:	6060      	str	r0, [r4, #4]
 8005d86:	6863      	ldr	r3, [r4, #4]
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d90:	e7aa      	b.n	8005ce8 <_printf_i+0x14c>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	462a      	mov	r2, r5
 8005d96:	4649      	mov	r1, r9
 8005d98:	4640      	mov	r0, r8
 8005d9a:	47d0      	blx	sl
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d0ad      	beq.n	8005cfc <_printf_i+0x160>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	079b      	lsls	r3, r3, #30
 8005da4:	d413      	bmi.n	8005dce <_printf_i+0x232>
 8005da6:	68e0      	ldr	r0, [r4, #12]
 8005da8:	9b03      	ldr	r3, [sp, #12]
 8005daa:	4298      	cmp	r0, r3
 8005dac:	bfb8      	it	lt
 8005dae:	4618      	movlt	r0, r3
 8005db0:	e7a6      	b.n	8005d00 <_printf_i+0x164>
 8005db2:	2301      	movs	r3, #1
 8005db4:	4632      	mov	r2, r6
 8005db6:	4649      	mov	r1, r9
 8005db8:	4640      	mov	r0, r8
 8005dba:	47d0      	blx	sl
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d09d      	beq.n	8005cfc <_printf_i+0x160>
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	9903      	ldr	r1, [sp, #12]
 8005dc6:	1a5b      	subs	r3, r3, r1
 8005dc8:	42ab      	cmp	r3, r5
 8005dca:	dcf2      	bgt.n	8005db2 <_printf_i+0x216>
 8005dcc:	e7eb      	b.n	8005da6 <_printf_i+0x20a>
 8005dce:	2500      	movs	r5, #0
 8005dd0:	f104 0619 	add.w	r6, r4, #25
 8005dd4:	e7f5      	b.n	8005dc2 <_printf_i+0x226>
 8005dd6:	bf00      	nop
 8005dd8:	08005ffd 	.word	0x08005ffd
 8005ddc:	0800600e 	.word	0x0800600e

08005de0 <memmove>:
 8005de0:	4288      	cmp	r0, r1
 8005de2:	b510      	push	{r4, lr}
 8005de4:	eb01 0402 	add.w	r4, r1, r2
 8005de8:	d902      	bls.n	8005df0 <memmove+0x10>
 8005dea:	4284      	cmp	r4, r0
 8005dec:	4623      	mov	r3, r4
 8005dee:	d807      	bhi.n	8005e00 <memmove+0x20>
 8005df0:	1e43      	subs	r3, r0, #1
 8005df2:	42a1      	cmp	r1, r4
 8005df4:	d008      	beq.n	8005e08 <memmove+0x28>
 8005df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dfe:	e7f8      	b.n	8005df2 <memmove+0x12>
 8005e00:	4402      	add	r2, r0
 8005e02:	4601      	mov	r1, r0
 8005e04:	428a      	cmp	r2, r1
 8005e06:	d100      	bne.n	8005e0a <memmove+0x2a>
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e12:	e7f7      	b.n	8005e04 <memmove+0x24>

08005e14 <_sbrk_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4d06      	ldr	r5, [pc, #24]	; (8005e30 <_sbrk_r+0x1c>)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	602b      	str	r3, [r5, #0]
 8005e20:	f7fd f858 	bl	8002ed4 <_sbrk>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d102      	bne.n	8005e2e <_sbrk_r+0x1a>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	b103      	cbz	r3, 8005e2e <_sbrk_r+0x1a>
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	20000314 	.word	0x20000314

08005e34 <_realloc_r>:
 8005e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e38:	4680      	mov	r8, r0
 8005e3a:	4614      	mov	r4, r2
 8005e3c:	460e      	mov	r6, r1
 8005e3e:	b921      	cbnz	r1, 8005e4a <_realloc_r+0x16>
 8005e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e44:	4611      	mov	r1, r2
 8005e46:	f7ff bc57 	b.w	80056f8 <_malloc_r>
 8005e4a:	b92a      	cbnz	r2, 8005e58 <_realloc_r+0x24>
 8005e4c:	f7ff fbe8 	bl	8005620 <_free_r>
 8005e50:	4625      	mov	r5, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e58:	f000 f81b 	bl	8005e92 <_malloc_usable_size_r>
 8005e5c:	4284      	cmp	r4, r0
 8005e5e:	4607      	mov	r7, r0
 8005e60:	d802      	bhi.n	8005e68 <_realloc_r+0x34>
 8005e62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e66:	d812      	bhi.n	8005e8e <_realloc_r+0x5a>
 8005e68:	4621      	mov	r1, r4
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	f7ff fc44 	bl	80056f8 <_malloc_r>
 8005e70:	4605      	mov	r5, r0
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d0ed      	beq.n	8005e52 <_realloc_r+0x1e>
 8005e76:	42bc      	cmp	r4, r7
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	bf28      	it	cs
 8005e7e:	463a      	movcs	r2, r7
 8005e80:	f7ff fbc0 	bl	8005604 <memcpy>
 8005e84:	4631      	mov	r1, r6
 8005e86:	4640      	mov	r0, r8
 8005e88:	f7ff fbca 	bl	8005620 <_free_r>
 8005e8c:	e7e1      	b.n	8005e52 <_realloc_r+0x1e>
 8005e8e:	4635      	mov	r5, r6
 8005e90:	e7df      	b.n	8005e52 <_realloc_r+0x1e>

08005e92 <_malloc_usable_size_r>:
 8005e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e96:	1f18      	subs	r0, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bfbc      	itt	lt
 8005e9c:	580b      	ldrlt	r3, [r1, r0]
 8005e9e:	18c0      	addlt	r0, r0, r3
 8005ea0:	4770      	bx	lr
	...

08005ea4 <_init>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	bf00      	nop
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr

08005eb0 <_fini>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr
