
F446dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003200  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003490  08003490  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003498  08003498  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080034a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  080034fc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080034fc  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006970  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017cf  00000000  00000000  00026a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  00028210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000070d  00000000  00000000  00028bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000231f8  00000000  00000000  000292bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007656  00000000  00000000  0004c4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d66d9  00000000  00000000  00053b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c20  00000000  00000000  0012a1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0012ce04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080033b8 	.word	0x080033b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080033b8 	.word	0x080033b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <LL_RCC_HSI_Enable+0x1c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <LL_RCC_HSI_Enable+0x1c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LL_RCC_HSI_IsReady+0x20>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f003 0302 	and.w	r3, r3, #2
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	bf0c      	ite	eq
 80006f0:	2301      	moveq	r3, #1
 80006f2:	2300      	movne	r3, #0
 80006f4:	b2db      	uxtb	r3, r3
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	40023800 	.word	0x40023800

08000704 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	4904      	ldr	r1, [pc, #16]	; (800072c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800071a:	4313      	orrs	r3, r2
 800071c:	600b      	str	r3, [r1, #0]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800

08000730 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <LL_RCC_SetSysClkSource+0x24>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	f023 0203 	bic.w	r2, r3, #3
 8000740:	4904      	ldr	r1, [pc, #16]	; (8000754 <LL_RCC_SetSysClkSource+0x24>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4313      	orrs	r3, r2
 8000746:	608b      	str	r3, [r1, #8]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	40023800 	.word	0x40023800

08000758 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <LL_RCC_GetSysClkSource+0x18>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f003 030c 	and.w	r3, r3, #12
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_SetAHBPrescaler+0x24>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <LL_RCC_SetAHBPrescaler+0x24>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4313      	orrs	r3, r2
 800078a:	608b      	str	r3, [r1, #8]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40023800 	.word	0x40023800

0800079c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80007ac:	4904      	ldr	r1, [pc, #16]	; (80007c0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	608b      	str	r3, [r1, #8]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800

080007c4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80007d4:	4904      	ldr	r1, [pc, #16]	; (80007e8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4313      	orrs	r3, r2
 80007da:	608b      	str	r3, [r1, #8]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	40023800 	.word	0x40023800

080007ec <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <LL_RCC_SetTIMPrescaler+0x28>)
 80007f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80007fe:	4905      	ldr	r1, [pc, #20]	; (8000814 <LL_RCC_SetTIMPrescaler+0x28>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4313      	orrs	r3, r2
 8000804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	40023800 	.word	0x40023800

08000818 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <LL_RCC_PLL_Enable+0x1c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <LL_RCC_PLL_Enable+0x1c>)
 8000822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <LL_RCC_PLL_IsReady+0x24>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000848:	bf0c      	ite	eq
 800084a:	2301      	moveq	r3, #1
 800084c:	2300      	movne	r3, #0
 800084e:	b2db      	uxtb	r3, r3
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 8000874:	4013      	ands	r3, r2
 8000876:	68f9      	ldr	r1, [r7, #12]
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	4311      	orrs	r1, r2
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	0192      	lsls	r2, r2, #6
 8000880:	430a      	orrs	r2, r1
 8000882:	490c      	ldr	r1, [pc, #48]	; (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000884:	4313      	orrs	r3, r2
 8000886:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000890:	4908      	ldr	r1, [pc, #32]	; (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	4313      	orrs	r3, r2
 8000896:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80008a0:	4904      	ldr	r1, [pc, #16]	; (80008b4 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800
 80008b8:	ffbf8000 	.word	0xffbf8000

080008bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c8:	4907      	ldr	r1, [pc, #28]	; (80008e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4013      	ands	r3, r2
 80008d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40023800 	.word	0x40023800

080008ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f8:	4907      	ldr	r1, [pc, #28]	; (8000918 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4013      	ands	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40023800 	.word	0x40023800

0800091c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000926:	4a13      	ldr	r2, [pc, #76]	; (8000974 <LL_SYSCFG_SetEXTISource+0x58>)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3302      	adds	r3, #2
 800092e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	0c1b      	lsrs	r3, r3, #16
 8000936:	43db      	mvns	r3, r3
 8000938:	ea02 0103 	and.w	r1, r2, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	0c1b      	lsrs	r3, r3, #16
 8000940:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	fa93 f3a3 	rbit	r3, r3
 8000948:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	fab3 f383 	clz	r3, r3
 8000950:	b2db      	uxtb	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	fa03 f202 	lsl.w	r2, r3, r2
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <LL_SYSCFG_SetEXTISource+0x58>)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	430a      	orrs	r2, r1
 8000962:	3302      	adds	r3, #2
 8000964:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40013800 	.word	0x40013800

08000978 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <LL_FLASH_SetLatency+0x24>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f023 020f 	bic.w	r2, r3, #15
 8000988:	4904      	ldr	r1, [pc, #16]	; (800099c <LL_FLASH_SetLatency+0x24>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4313      	orrs	r3, r2
 800098e:	600b      	str	r3, [r1, #0]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40023c00 	.word	0x40023c00

080009a0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <LL_FLASH_GetLatency+0x18>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f003 030f 	and.w	r3, r3, #15
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023c00 	.word	0x40023c00

080009bc <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <LL_PWR_DisableOverDriveMode+0x1c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <LL_PWR_DisableOverDriveMode+0x1c>)
 80009c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40007000 	.word	0x40007000

080009dc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80009ec:	4904      	ldr	r1, [pc, #16]	; (8000a00 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	600b      	str	r3, [r1, #0]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	40007000 	.word	0x40007000

08000a04 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a14:	bf0c      	ite	eq
 8000a16:	2301      	moveq	r3, #1
 8000a18:	2300      	movne	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40007000 	.word	0x40007000

08000a2c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LL_DMA_SetDataTransferDirection+0x44>)
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4413      	add	r3, r2
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000a4c:	4908      	ldr	r1, [pc, #32]	; (8000a70 <LL_DMA_SetDataTransferDirection+0x44>)
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	440b      	add	r3, r1
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	440b      	add	r3, r1
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	600b      	str	r3, [r1, #0]
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	08003434 	.word	0x08003434

08000a74 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LL_DMA_SetMode+0x44>)
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	4413      	add	r3, r2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000a94:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <LL_DMA_SetMode+0x44>)
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	440b      	add	r3, r1
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	440b      	add	r3, r1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	600b      	str	r3, [r1, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	08003434 	.word	0x08003434

08000abc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <LL_DMA_SetPeriphIncMode+0x44>)
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	4413      	add	r3, r2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000adc:	4908      	ldr	r1, [pc, #32]	; (8000b00 <LL_DMA_SetPeriphIncMode+0x44>)
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	440b      	add	r3, r1
 8000aea:	4619      	mov	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	600b      	str	r3, [r1, #0]
}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	08003434 	.word	0x08003434

08000b04 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LL_DMA_SetMemoryIncMode+0x44>)
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b24:	4908      	ldr	r1, [pc, #32]	; (8000b48 <LL_DMA_SetMemoryIncMode+0x44>)
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	440b      	add	r3, r1
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	440b      	add	r3, r1
 8000b32:	4619      	mov	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	600b      	str	r3, [r1, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	08003434 	.word	0x08003434

08000b4c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <LL_DMA_SetPeriphSize+0x44>)
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	4413      	add	r3, r2
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000b6c:	4908      	ldr	r1, [pc, #32]	; (8000b90 <LL_DMA_SetPeriphSize+0x44>)
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	440b      	add	r3, r1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	440b      	add	r3, r1
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	08003434 	.word	0x08003434

08000b94 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LL_DMA_SetMemorySize+0x44>)
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4413      	add	r3, r2
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000bb4:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <LL_DMA_SetMemorySize+0x44>)
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	440b      	add	r3, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	600b      	str	r3, [r1, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	08003434 	.word	0x08003434

08000bdc <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	4413      	add	r3, r2
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bfc:	4908      	ldr	r1, [pc, #32]	; (8000c20 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	440b      	add	r3, r1
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	440b      	add	r3, r1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	600b      	str	r3, [r1, #0]
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	08003434 	.word	0x08003434

08000c24 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <LL_DMA_SetDataLength+0x44>)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	0c1b      	lsrs	r3, r3, #16
 8000c42:	041b      	lsls	r3, r3, #16
 8000c44:	4908      	ldr	r1, [pc, #32]	; (8000c68 <LL_DMA_SetDataLength+0x44>)
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	440a      	add	r2, r1
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	440a      	add	r2, r1
 8000c52:	4611      	mov	r1, r2
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	604b      	str	r3, [r1, #4]
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	08003434 	.word	0x08003434

08000c6c <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LL_DMA_SetChannelSelection+0x44>)
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4413      	add	r3, r2
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000c8c:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <LL_DMA_SetChannelSelection+0x44>)
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	440b      	add	r3, r1
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	440b      	add	r3, r1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	08003434 	.word	0x08003434

08000cb4 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <LL_DMA_DisableFifoMode+0x3c>)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <LL_DMA_DisableFifoMode+0x3c>)
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	440a      	add	r2, r1
 8000cd4:	7812      	ldrb	r2, [r2, #0]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	440a      	add	r2, r1
 8000cdc:	f023 0304 	bic.w	r3, r3, #4
 8000ce0:	6153      	str	r3, [r2, #20]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	08003434 	.word	0x08003434

08000cf4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	2b40      	cmp	r3, #64	; 0x40
 8000d06:	d114      	bne.n	8000d32 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8000d08:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <LL_DMA_ConfigAddresses+0x74>)
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4413      	add	r3, r2
 8000d16:	461a      	mov	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <LL_DMA_ConfigAddresses+0x74>)
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	4413      	add	r3, r2
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8000d30:	e013      	b.n	8000d5a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8000d32:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <LL_DMA_ConfigAddresses+0x74>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4413      	add	r3, r2
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <LL_DMA_ConfigAddresses+0x74>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	461a      	mov	r2, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	60d3      	str	r3, [r2, #12]
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	08003434 	.word	0x08003434

08000d6c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000d76:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <LL_DMA_EnableIT_TC+0x3c>)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <LL_DMA_EnableIT_TC+0x3c>)
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	440a      	add	r2, r1
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	440a      	add	r2, r1
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	6013      	str	r3, [r2, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	08003434 	.word	0x08003434

08000dac <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	60da      	str	r2, [r3, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	615a      	str	r2, [r3, #20]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e08:	2b80      	cmp	r3, #128	; 0x80
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2301      	moveq	r3, #1
 8000e0e:	2300      	movne	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b089      	sub	sp, #36	; 0x24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	330c      	adds	r3, #12
 8000e2a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	e853 3f00 	ldrex	r3, [r3]
 8000e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	f043 0320 	orr.w	r3, r3, #32
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	330c      	adds	r3, #12
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	61ba      	str	r2, [r7, #24]
 8000e44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000e46:	6979      	ldr	r1, [r7, #20]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	e841 2300 	strex	r3, r2, [r1]
 8000e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1e7      	bne.n	8000e26 <LL_USART_EnableIT_RXNE+0x8>
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3724      	adds	r7, #36	; 0x24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3314      	adds	r3, #20
 8000e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	e853 3f00 	ldrex	r3, [r3]
 8000e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3314      	adds	r3, #20
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	61ba      	str	r2, [r7, #24]
 8000e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000e8c:	6979      	ldr	r1, [r7, #20]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	e841 2300 	strex	r3, r2, [r1]
 8000e94:	613b      	str	r3, [r7, #16]
   return(result);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1e7      	bne.n	8000e6c <LL_USART_EnableDMAReq_TX+0x8>
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3304      	adds	r3, #4
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000ece:	78fa      	ldrb	r2, [r7, #3]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	605a      	str	r2, [r3, #4]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	613b      	str	r3, [r7, #16]
  return result;
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	fab3 f383 	clz	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2103      	movs	r1, #3
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	fa93 f3a3 	rbit	r3, r3
 8000f1a:	61bb      	str	r3, [r7, #24]
  return result;
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b089      	sub	sp, #36	; 0x24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa93 f3a3 	rbit	r3, r3
 8000f58:	613b      	str	r3, [r7, #16]
  return result;
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2103      	movs	r1, #3
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	61bb      	str	r3, [r7, #24]
  return result;
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	fab3 f383 	clz	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	60da      	str	r2, [r3, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3724      	adds	r7, #36	; 0x24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	041a      	lsls	r2, r3, #16
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	619a      	str	r2, [r3, #24]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b5b0      	push	{r4, r5, r7, lr}
 8000fbe:	b090      	sub	sp, #64	; 0x40
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f000 fd11 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f833 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f000 f9d9 	bl	8001380 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fce:	f000 f9af 	bl	8001330 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fd2:	f000 f885 	bl	80010e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fd6:	f000 f931 	bl	800123c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t welcome_msg[] = "\e[2J\e[HAMP Kart UART Interface\r\n=======================\r\n";
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <main+0x6c>)
 8000fdc:	463c      	mov	r4, r7
 8000fde:	461d      	mov	r5, r3
 8000fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff0:	c403      	stmia	r4!, {r0, r1}
 8000ff2:	8022      	strh	r2, [r4, #0]
//  HAL_UART_Transmit_IT(&huart2, welcome_msg, sizeof(welcome_msg));
  for (int i = 0; i < sizeof(welcome_msg); i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ff8:	e011      	b.n	800101e <main+0x62>
  {
	  LL_USART_TransmitData8(USART2, welcome_msg[i]);
 8000ffa:	463a      	mov	r2, r7
 8000ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	4809      	ldr	r0, [pc, #36]	; (800102c <main+0x70>)
 8001006:	f7ff ff5c 	bl	8000ec2 <LL_USART_TransmitData8>
	  while (!LL_USART_IsActiveFlag_TXE(USART2));
 800100a:	bf00      	nop
 800100c:	4807      	ldr	r0, [pc, #28]	; (800102c <main+0x70>)
 800100e:	f7ff fef3 	bl	8000df8 <LL_USART_IsActiveFlag_TXE>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f9      	beq.n	800100c <main+0x50>
  for (int i = 0; i < sizeof(welcome_msg); i++)
 8001018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800101a:	3301      	adds	r3, #1
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800101e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001020:	2b39      	cmp	r3, #57	; 0x39
 8001022:	d9ea      	bls.n	8000ffa <main+0x3e>
  }

  while (1)
 8001024:	e7fe      	b.n	8001024 <main+0x68>
 8001026:	bf00      	nop
 8001028:	080033d0 	.word	0x080033d0
 800102c:	40004400 	.word	0x40004400

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001034:	2002      	movs	r0, #2
 8001036:	f7ff fc9f 	bl	8000978 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800103a:	bf00      	nop
 800103c:	f7ff fcb0 	bl	80009a0 <LL_FLASH_GetLatency>
 8001040:	4603      	mov	r3, r0
 8001042:	2b02      	cmp	r3, #2
 8001044:	d1fa      	bne.n	800103c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8001046:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800104a:	f7ff fcc7 	bl	80009dc <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 800104e:	f7ff fcb5 	bl	80009bc <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001052:	2010      	movs	r0, #16
 8001054:	f7ff fb56 	bl	8000704 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001058:	f7ff fb32 	bl	80006c0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800105c:	bf00      	nop
 800105e:	f7ff fb3f 	bl	80006e0 <LL_RCC_HSI_IsReady>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d1fa      	bne.n	800105e <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8001068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001070:	2110      	movs	r1, #16
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fbf4 	bl	8000860 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001078:	f7ff fbce 	bl	8000818 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800107c:	bf00      	nop
 800107e:	f7ff fbdb 	bl	8000838 <LL_RCC_PLL_IsReady>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	d1fa      	bne.n	800107e <SystemClock_Config+0x4e>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001088:	bf00      	nop
 800108a:	f7ff fcbb 	bl	8000a04 <LL_PWR_IsActiveFlag_VOS>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0fa      	beq.n	800108a <SystemClock_Config+0x5a>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fb6d 	bl	8000774 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800109a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800109e:	f7ff fb7d 	bl	800079c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff fb8e 	bl	80007c4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80010a8:	2002      	movs	r0, #2
 80010aa:	f7ff fb41 	bl	8000730 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80010ae:	bf00      	nop
 80010b0:	f7ff fb52 	bl	8000758 <LL_RCC_GetSysClkSource>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d1fa      	bne.n	80010b0 <SystemClock_Config+0x80>
  {

  }
  LL_SetSystemCoreClock(84000000);
 80010ba:	4808      	ldr	r0, [pc, #32]	; (80010dc <SystemClock_Config+0xac>)
 80010bc:	f001 fcd0 	bl	8002a60 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80010c0:	2000      	movs	r0, #0
 80010c2:	f000 fcb3 	bl	8001a2c <HAL_InitTick>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80010cc:	f000 f9c0 	bl	8001450 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fb8b 	bl	80007ec <LL_RCC_SetTIMPrescaler>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	0501bd00 	.word	0x0501bd00

080010e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b091      	sub	sp, #68	; 0x44
 80010e4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]
 80010f6:	615a      	str	r2, [r3, #20]
 80010f8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800110a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800110e:	f7ff fbed 	bl	80008ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff fbd2 	bl	80008bc <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001118:	230c      	movs	r3, #12
 800111a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800111c:	2302      	movs	r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800112c:	2307      	movs	r3, #7
 800112e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	483d      	ldr	r0, [pc, #244]	; (800122c <MX_USART2_UART_Init+0x14c>)
 8001136:	f000 ffbf 	bl	80020b8 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 800113a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800113e:	2106      	movs	r1, #6
 8001140:	483b      	ldr	r0, [pc, #236]	; (8001230 <MX_USART2_UART_Init+0x150>)
 8001142:	f7ff fd93 	bl	8000c6c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001146:	2240      	movs	r2, #64	; 0x40
 8001148:	2106      	movs	r1, #6
 800114a:	4839      	ldr	r0, [pc, #228]	; (8001230 <MX_USART2_UART_Init+0x150>)
 800114c:	f7ff fc6e 	bl	8000a2c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8001150:	2200      	movs	r2, #0
 8001152:	2106      	movs	r1, #6
 8001154:	4836      	ldr	r0, [pc, #216]	; (8001230 <MX_USART2_UART_Init+0x150>)
 8001156:	f7ff fd41 	bl	8000bdc <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 800115a:	2200      	movs	r2, #0
 800115c:	2106      	movs	r1, #6
 800115e:	4834      	ldr	r0, [pc, #208]	; (8001230 <MX_USART2_UART_Init+0x150>)
 8001160:	f7ff fc88 	bl	8000a74 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8001164:	2200      	movs	r2, #0
 8001166:	2106      	movs	r1, #6
 8001168:	4831      	ldr	r0, [pc, #196]	; (8001230 <MX_USART2_UART_Init+0x150>)
 800116a:	f7ff fca7 	bl	8000abc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 800116e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001172:	2106      	movs	r1, #6
 8001174:	482e      	ldr	r0, [pc, #184]	; (8001230 <MX_USART2_UART_Init+0x150>)
 8001176:	f7ff fcc5 	bl	8000b04 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 800117a:	2200      	movs	r2, #0
 800117c:	2106      	movs	r1, #6
 800117e:	482c      	ldr	r0, [pc, #176]	; (8001230 <MX_USART2_UART_Init+0x150>)
 8001180:	f7ff fce4 	bl	8000b4c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8001184:	2200      	movs	r2, #0
 8001186:	2106      	movs	r1, #6
 8001188:	4829      	ldr	r0, [pc, #164]	; (8001230 <MX_USART2_UART_Init+0x150>)
 800118a:	f7ff fd03 	bl	8000b94 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 800118e:	2106      	movs	r1, #6
 8001190:	4827      	ldr	r0, [pc, #156]	; (8001230 <MX_USART2_UART_Init+0x150>)
 8001192:	f7ff fd8f 	bl	8000cb4 <LL_DMA_DisableFifoMode>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001196:	f7ff fa09 	bl	80005ac <__NVIC_GetPriorityGrouping>
 800119a:	4603      	mov	r3, r0
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fa59 	bl	8000658 <NVIC_EncodePriority>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4619      	mov	r1, r3
 80011aa:	2026      	movs	r0, #38	; 0x26
 80011ac:	f7ff fa2a 	bl	8000604 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80011b0:	2026      	movs	r0, #38	; 0x26
 80011b2:	f7ff fa09 	bl	80005c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */
  LL_USART_EnableIT_RXNE(USART2);
 80011b6:	481f      	ldr	r0, [pc, #124]	; (8001234 <MX_USART2_UART_Init+0x154>)
 80011b8:	f7ff fe31 	bl	8000e1e <LL_USART_EnableIT_RXNE>

  // DMA for TX
  LL_USART_EnableDMAReq_TX(USART2);
 80011bc:	481d      	ldr	r0, [pc, #116]	; (8001234 <MX_USART2_UART_Init+0x154>)
 80011be:	f7ff fe51 	bl	8000e64 <LL_USART_EnableDMAReq_TX>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_STREAM_6, (uint32_t) buffer, LL_USART_DMA_GetRegAddr(USART2), LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80011c2:	4c1d      	ldr	r4, [pc, #116]	; (8001238 <MX_USART2_UART_Init+0x158>)
 80011c4:	481b      	ldr	r0, [pc, #108]	; (8001234 <MX_USART2_UART_Init+0x154>)
 80011c6:	f7ff fe70 	bl	8000eaa <LL_USART_DMA_GetRegAddr>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2240      	movs	r2, #64	; 0x40
 80011ce:	9200      	str	r2, [sp, #0]
 80011d0:	4622      	mov	r2, r4
 80011d2:	2106      	movs	r1, #6
 80011d4:	4816      	ldr	r0, [pc, #88]	; (8001230 <MX_USART2_UART_Init+0x150>)
 80011d6:	f7ff fd8d 	bl	8000cf4 <LL_DMA_ConfigAddresses>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_6);
 80011da:	2106      	movs	r1, #6
 80011dc:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_USART2_UART_Init+0x150>)
 80011de:	f7ff fdc5 	bl	8000d6c <LL_DMA_EnableIT_TC>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, sizeof(buffer));
 80011e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e6:	2106      	movs	r1, #6
 80011e8:	4811      	ldr	r0, [pc, #68]	; (8001230 <MX_USART2_UART_Init+0x150>)
 80011ea:	f7ff fd1b 	bl	8000c24 <LL_DMA_SetDataLength>
//  LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
//  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, 5);

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80011ee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011f2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001200:	230c      	movs	r3, #12
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001208:	2300      	movs	r3, #0
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <MX_USART2_UART_Init+0x154>)
 8001214:	f001 fba4 	bl	8002960 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001218:	4806      	ldr	r0, [pc, #24]	; (8001234 <MX_USART2_UART_Init+0x154>)
 800121a:	f7ff fdd7 	bl	8000dcc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_USART2_UART_Init+0x154>)
 8001220:	f7ff fdc4 	bl	8000dac <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	373c      	adds	r7, #60	; 0x3c
 8001228:	46bd      	mov	sp, r7
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	40020000 	.word	0x40020000
 8001230:	40026000 	.word	0x40026000
 8001234:	40004400 	.word	0x40004400
 8001238:	20000078 	.word	0x20000078

0800123c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001266:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800126a:	f7ff fb3f 	bl	80008ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800126e:	2004      	movs	r0, #4
 8001270:	f7ff fb24 	bl	80008bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001274:	2002      	movs	r0, #2
 8001276:	f7ff fb21 	bl	80008bc <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800127a:	2320      	movs	r3, #32
 800127c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800127e:	2302      	movs	r3, #2
 8001280:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800128e:	2307      	movs	r3, #7
 8001290:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4619      	mov	r1, r3
 8001296:	4823      	ldr	r0, [pc, #140]	; (8001324 <MX_USART3_UART_Init+0xe8>)
 8001298:	f000 ff0e 	bl	80020b8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800129c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012a2:	2302      	movs	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80012b2:	2307      	movs	r3, #7
 80012b4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	481b      	ldr	r0, [pc, #108]	; (8001328 <MX_USART3_UART_Init+0xec>)
 80012bc:	f000 fefc 	bl	80020b8 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012c0:	f7ff f974 	bl	80005ac <__NVIC_GetPriorityGrouping>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f9c4 	bl	8000658 <NVIC_EncodePriority>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4619      	mov	r1, r3
 80012d4:	2027      	movs	r0, #39	; 0x27
 80012d6:	f7ff f995 	bl	8000604 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80012da:	2027      	movs	r0, #39	; 0x27
 80012dc:	f7ff f974 	bl	80005c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */
  LL_USART_EnableIT_RXNE(USART3);
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <MX_USART3_UART_Init+0xf0>)
 80012e2:	f7ff fd9c 	bl	8000e1e <LL_USART_EnableIT_RXNE>

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80012e6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80012ea:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012f8:	230c      	movs	r3, #12
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4808      	ldr	r0, [pc, #32]	; (800132c <MX_USART3_UART_Init+0xf0>)
 800130c:	f001 fb28 	bl	8002960 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <MX_USART3_UART_Init+0xf0>)
 8001312:	f7ff fd5b 	bl	8000dcc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_USART3_UART_Init+0xf0>)
 8001318:	f7ff fd48 	bl	8000dac <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	3738      	adds	r7, #56	; 0x38
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40020800 	.word	0x40020800
 8001328:	40020400 	.word	0x40020400
 800132c:	40004800 	.word	0x40004800

08001330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <MX_DMA_Init+0x4c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <MX_DMA_Init+0x4c>)
 8001340:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <MX_DMA_Init+0x4c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001352:	f7ff f92b 	bl	80005ac <__NVIC_GetPriorityGrouping>
 8001356:	4603      	mov	r3, r0
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f97b 	bl	8000658 <NVIC_EncodePriority>
 8001362:	4603      	mov	r3, r0
 8001364:	4619      	mov	r1, r3
 8001366:	2011      	movs	r0, #17
 8001368:	f7ff f94c 	bl	8000604 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800136c:	2011      	movs	r0, #17
 800136e:	f7ff f92b 	bl	80005c8 <__NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80013a0:	2004      	movs	r0, #4
 80013a2:	f7ff fa8b 	bl	80008bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80013a6:	2080      	movs	r0, #128	; 0x80
 80013a8:	f7ff fa88 	bl	80008bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff fa85 	bl	80008bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013b2:	2002      	movs	r0, #2
 80013b4:	f7ff fa82 	bl	80008bc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80013b8:	2120      	movs	r1, #32
 80013ba:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_GPIO_Init+0xc4>)
 80013bc:	f7ff fdee 	bl	8000f9c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80013c0:	4921      	ldr	r1, [pc, #132]	; (8001448 <MX_GPIO_Init+0xc8>)
 80013c2:	2002      	movs	r0, #2
 80013c4:	f7ff faaa 	bl	800091c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80013c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013cc:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80013d6:	2302      	movs	r3, #2
 80013d8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fce6 	bl	8001db0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(Blue_user_button_GPIO_Port, Blue_user_button_Pin, LL_GPIO_PULL_UP);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <MX_GPIO_Init+0xcc>)
 80013ec:	f7ff fda7 	bl	8000f3e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(Blue_user_button_GPIO_Port, Blue_user_button_Pin, LL_GPIO_MODE_INPUT);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <MX_GPIO_Init+0xcc>)
 80013f8:	f7ff fd72 	bl	8000ee0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80013fc:	2320      	movs	r3, #32
 80013fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001400:	2301      	movs	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001410:	463b      	mov	r3, r7
 8001412:	4619      	mov	r1, r3
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <MX_GPIO_Init+0xc4>)
 8001416:	f000 fe4f 	bl	80020b8 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800141a:	f7ff f8c7 	bl	80005ac <__NVIC_GetPriorityGrouping>
 800141e:	4603      	mov	r3, r0
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f917 	bl	8000658 <NVIC_EncodePriority>
 800142a:	4603      	mov	r3, r0
 800142c:	4619      	mov	r1, r3
 800142e:	2028      	movs	r0, #40	; 0x28
 8001430:	f7ff f8e8 	bl	8000604 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001434:	2028      	movs	r0, #40	; 0x28
 8001436:	f7ff f8c7 	bl	80005c8 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40020000 	.word	0x40020000
 8001448:	00f00003 	.word	0x00f00003
 800144c:	40020800 	.word	0x40020800

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	e7fe      	b.n	8001458 <Error_Handler+0x8>
	...

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <HAL_MspInit+0x4c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_MspInit+0x4c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800149a:	2007      	movs	r0, #7
 800149c:	f000 fbbc 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800

080014ac <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4013      	ands	r3, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	bf0c      	ite	eq
 80014c2:	2301      	moveq	r3, #1
 80014c4:	2300      	movne	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40013c00 	.word	0x40013c00

080014d8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6153      	str	r3, [r2, #20]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <LL_DMA_EnableStream>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <LL_DMA_EnableStream+0x3c>)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <LL_DMA_EnableStream+0x3c>)
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	440a      	add	r2, r1
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	4611      	mov	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	440a      	add	r2, r1
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6013      	str	r3, [r2, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	0800343c 	.word	0x0800343c

08001538 <LL_DMA_IsActiveFlag_TC6>:
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800154c:	bf0c      	ite	eq
 800154e:	2301      	moveq	r3, #1
 8001550:	2300      	movne	r3, #0
 8001552:	b2db      	uxtb	r3, r3
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_DMA_ClearFlag_TC6>:
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800156e:	60da      	str	r2, [r3, #12]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_USART_IsActiveFlag_PE>:
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_USART_IsActiveFlag_FE>:
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	bf0c      	ite	eq
 80015b6:	2301      	moveq	r3, #1
 80015b8:	2300      	movne	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_USART_IsActiveFlag_ORE>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b08      	cmp	r3, #8
 80015da:	bf0c      	ite	eq
 80015dc:	2301      	moveq	r3, #1
 80015de:	2300      	movne	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_USART_IsActiveFlag_RXNE>:
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0320 	and.w	r3, r3, #32
 80015fe:	2b20      	cmp	r3, #32
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_USART_ClearFlag_RXNE>:
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f06f 0220 	mvn.w	r2, #32
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_USART_ReceiveData8>:
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	b2db      	uxtb	r3, r3
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4013      	ands	r3, r2
 8001660:	041a      	lsls	r2, r3, #16
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43d9      	mvns	r1, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	400b      	ands	r3, r1
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	619a      	str	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <NMI_Handler+0x4>

08001682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <MemManage_Handler+0x4>

0800168e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <UsageFault_Handler+0x4>

0800169a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c8:	f000 f9e0 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC6(DMA1))
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <DMA1_Stream6_IRQHandler+0x1c>)
 80016d6:	f7ff ff2f 	bl	8001538 <LL_DMA_IsActiveFlag_TC6>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <DMA1_Stream6_IRQHandler+0x16>
	{
		LL_DMA_ClearFlag_TC6(DMA1);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <DMA1_Stream6_IRQHandler+0x1c>)
 80016e2:	f7ff ff3d 	bl	8001560 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40026000 	.word	0x40026000

080016f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016f0:	b598      	push	{r3, r4, r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART2))
 80016f4:	4835      	ldr	r0, [pc, #212]	; (80017cc <USART2_IRQHandler+0xdc>)
 80016f6:	f7ff ff7a 	bl	80015ee <LL_USART_IsActiveFlag_RXNE>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d064      	beq.n	80017ca <USART2_IRQHandler+0xda>
	{
		LL_USART_ClearFlag_RXNE(USART2);
 8001700:	4832      	ldr	r0, [pc, #200]	; (80017cc <USART2_IRQHandler+0xdc>)
 8001702:	f7ff ff87 	bl	8001614 <LL_USART_ClearFlag_RXNE>

		buffer[size] = LL_USART_ReceiveData8(USART2);
 8001706:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <USART2_IRQHandler+0xe0>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461c      	mov	r4, r3
 800170c:	482f      	ldr	r0, [pc, #188]	; (80017cc <USART2_IRQHandler+0xdc>)
 800170e:	f7ff ff8f 	bl	8001630 <LL_USART_ReceiveData8>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <USART2_IRQHandler+0xe4>)
 8001718:	551a      	strb	r2, [r3, r4]
		size++;
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <USART2_IRQHandler+0xe0>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <USART2_IRQHandler+0xe0>)
 8001724:	701a      	strb	r2, [r3, #0]

		if (LL_USART_IsActiveFlag_ORE(USART2) || LL_USART_IsActiveFlag_FE(USART2) || LL_USART_IsActiveFlag_PE(USART2))
 8001726:	4829      	ldr	r0, [pc, #164]	; (80017cc <USART2_IRQHandler+0xdc>)
 8001728:	f7ff ff4e 	bl	80015c8 <LL_USART_IsActiveFlag_ORE>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10b      	bne.n	800174a <USART2_IRQHandler+0x5a>
 8001732:	4826      	ldr	r0, [pc, #152]	; (80017cc <USART2_IRQHandler+0xdc>)
 8001734:	f7ff ff35 	bl	80015a2 <LL_USART_IsActiveFlag_FE>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <USART2_IRQHandler+0x5a>
 800173e:	4823      	ldr	r0, [pc, #140]	; (80017cc <USART2_IRQHandler+0xdc>)
 8001740:	f7ff ff1c 	bl	800157c <LL_USART_IsActiveFlag_PE>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <USART2_IRQHandler+0x60>
		{
			// overrun error, framing error, or parity error
			buffer[0] = 0;
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <USART2_IRQHandler+0xe4>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
		}

		if (buffer[size - 1] == 13) // end of text // TODO should be 2
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <USART2_IRQHandler+0xe0>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <USART2_IRQHandler+0xe4>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	2b0d      	cmp	r3, #13
 800175c:	d135      	bne.n	80017ca <USART2_IRQHandler+0xda>
		{
			// TODO check values and make sure they are valid
			if (buffer[0] != 32) // start of text // TODO should be 3
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <USART2_IRQHandler+0xe4>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b20      	cmp	r3, #32
 8001764:	d010      	beq.n	8001788 <USART2_IRQHandler+0x98>
			{
				sprintf(buffer, "ERROR\r\n", buffer[1], buffer[2]);
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <USART2_IRQHandler+0xe4>)
 8001768:	785b      	ldrb	r3, [r3, #1]
 800176a:	461a      	mov	r2, r3
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <USART2_IRQHandler+0xe4>)
 800176e:	789b      	ldrb	r3, [r3, #2]
 8001770:	4919      	ldr	r1, [pc, #100]	; (80017d8 <USART2_IRQHandler+0xe8>)
 8001772:	4818      	ldr	r0, [pc, #96]	; (80017d4 <USART2_IRQHandler+0xe4>)
 8001774:	f001 f984 	bl	8002a80 <siprintf>
				LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 8001778:	2106      	movs	r1, #6
 800177a:	4818      	ldr	r0, [pc, #96]	; (80017dc <USART2_IRQHandler+0xec>)
 800177c:	f7ff febc 	bl	80014f8 <LL_DMA_EnableStream>
				size = 0;
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <USART2_IRQHandler+0xe0>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
				return;
 8001786:	e020      	b.n	80017ca <USART2_IRQHandler+0xda>
			}

			if (buffer[2 + 1] != 13) // end of text // TODO should be 2
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <USART2_IRQHandler+0xe4>)
 800178a:	78db      	ldrb	r3, [r3, #3]
 800178c:	2b0d      	cmp	r3, #13
 800178e:	d00c      	beq.n	80017aa <USART2_IRQHandler+0xba>
			{
				sprintf(buffer, "ERROR\r\n", buffer[1], buffer[2]);
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <USART2_IRQHandler+0xe4>)
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	461a      	mov	r2, r3
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <USART2_IRQHandler+0xe4>)
 8001798:	789b      	ldrb	r3, [r3, #2]
 800179a:	490f      	ldr	r1, [pc, #60]	; (80017d8 <USART2_IRQHandler+0xe8>)
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <USART2_IRQHandler+0xe4>)
 800179e:	f001 f96f 	bl	8002a80 <siprintf>
				size = 0;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <USART2_IRQHandler+0xe0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
				return;
 80017a8:	e00f      	b.n	80017ca <USART2_IRQHandler+0xda>
			}

			sprintf(buffer, "Throttle: %d, Steering: %d\r\n", buffer[1], buffer[2]);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <USART2_IRQHandler+0xe4>)
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <USART2_IRQHandler+0xe4>)
 80017b2:	789b      	ldrb	r3, [r3, #2]
 80017b4:	490a      	ldr	r1, [pc, #40]	; (80017e0 <USART2_IRQHandler+0xf0>)
 80017b6:	4807      	ldr	r0, [pc, #28]	; (80017d4 <USART2_IRQHandler+0xe4>)
 80017b8:	f001 f962 	bl	8002a80 <siprintf>
			LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 80017bc:	2106      	movs	r1, #6
 80017be:	4807      	ldr	r0, [pc, #28]	; (80017dc <USART2_IRQHandler+0xec>)
 80017c0:	f7ff fe9a 	bl	80014f8 <LL_DMA_EnableStream>
			size = 0;
 80017c4:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <USART2_IRQHandler+0xe0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
//	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ca:	bd98      	pop	{r3, r4, r7, pc}
 80017cc:	40004400 	.word	0x40004400
 80017d0:	20000178 	.word	0x20000178
 80017d4:	20000078 	.word	0x20000078
 80017d8:	0800340c 	.word	0x0800340c
 80017dc:	40026000 	.word	0x40026000
 80017e0:	08003414 	.word	0x08003414

080017e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017e4:	b598      	push	{r3, r4, r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART3))
 80017e8:	4835      	ldr	r0, [pc, #212]	; (80018c0 <USART3_IRQHandler+0xdc>)
 80017ea:	f7ff ff00 	bl	80015ee <LL_USART_IsActiveFlag_RXNE>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d064      	beq.n	80018be <USART3_IRQHandler+0xda>
	{
		LL_USART_ClearFlag_RXNE(USART3);
 80017f4:	4832      	ldr	r0, [pc, #200]	; (80018c0 <USART3_IRQHandler+0xdc>)
 80017f6:	f7ff ff0d 	bl	8001614 <LL_USART_ClearFlag_RXNE>

		buffer[size] = LL_USART_ReceiveData8(USART3);
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <USART3_IRQHandler+0xe0>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461c      	mov	r4, r3
 8001800:	482f      	ldr	r0, [pc, #188]	; (80018c0 <USART3_IRQHandler+0xdc>)
 8001802:	f7ff ff15 	bl	8001630 <LL_USART_ReceiveData8>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <USART3_IRQHandler+0xe4>)
 800180c:	551a      	strb	r2, [r3, r4]
		size++;
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <USART3_IRQHandler+0xe0>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <USART3_IRQHandler+0xe0>)
 8001818:	701a      	strb	r2, [r3, #0]

		if (LL_USART_IsActiveFlag_ORE(USART3) || LL_USART_IsActiveFlag_FE(USART3) || LL_USART_IsActiveFlag_PE(USART3))
 800181a:	4829      	ldr	r0, [pc, #164]	; (80018c0 <USART3_IRQHandler+0xdc>)
 800181c:	f7ff fed4 	bl	80015c8 <LL_USART_IsActiveFlag_ORE>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10b      	bne.n	800183e <USART3_IRQHandler+0x5a>
 8001826:	4826      	ldr	r0, [pc, #152]	; (80018c0 <USART3_IRQHandler+0xdc>)
 8001828:	f7ff febb 	bl	80015a2 <LL_USART_IsActiveFlag_FE>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d105      	bne.n	800183e <USART3_IRQHandler+0x5a>
 8001832:	4823      	ldr	r0, [pc, #140]	; (80018c0 <USART3_IRQHandler+0xdc>)
 8001834:	f7ff fea2 	bl	800157c <LL_USART_IsActiveFlag_PE>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <USART3_IRQHandler+0x60>
		{
			// overrun error, framing error, or parity error
			buffer[0] = 0;
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <USART3_IRQHandler+0xe4>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
		}

		if (buffer[size - 1] == 13) // end of text // TODO should be 2
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <USART3_IRQHandler+0xe0>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	3b01      	subs	r3, #1
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <USART3_IRQHandler+0xe4>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	2b0d      	cmp	r3, #13
 8001850:	d135      	bne.n	80018be <USART3_IRQHandler+0xda>
		{
			// TODO check values and make sure they are valid
			if (buffer[0] != 32) // start of text // TODO should be 3
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <USART3_IRQHandler+0xe4>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b20      	cmp	r3, #32
 8001858:	d010      	beq.n	800187c <USART3_IRQHandler+0x98>
			{
				sprintf(buffer, "ERROR\r\n", buffer[1], buffer[2]);
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <USART3_IRQHandler+0xe4>)
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	461a      	mov	r2, r3
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <USART3_IRQHandler+0xe4>)
 8001862:	789b      	ldrb	r3, [r3, #2]
 8001864:	4919      	ldr	r1, [pc, #100]	; (80018cc <USART3_IRQHandler+0xe8>)
 8001866:	4818      	ldr	r0, [pc, #96]	; (80018c8 <USART3_IRQHandler+0xe4>)
 8001868:	f001 f90a 	bl	8002a80 <siprintf>
				LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 800186c:	2106      	movs	r1, #6
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <USART3_IRQHandler+0xec>)
 8001870:	f7ff fe42 	bl	80014f8 <LL_DMA_EnableStream>
				size = 0;
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <USART3_IRQHandler+0xe0>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
				return;
 800187a:	e020      	b.n	80018be <USART3_IRQHandler+0xda>
			}

			if (buffer[2 + 1] != 13) // end of text // TODO should be 2
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <USART3_IRQHandler+0xe4>)
 800187e:	78db      	ldrb	r3, [r3, #3]
 8001880:	2b0d      	cmp	r3, #13
 8001882:	d00c      	beq.n	800189e <USART3_IRQHandler+0xba>
			{
				sprintf(buffer, "ERROR\r\n", buffer[1], buffer[2]);
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <USART3_IRQHandler+0xe4>)
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	461a      	mov	r2, r3
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <USART3_IRQHandler+0xe4>)
 800188c:	789b      	ldrb	r3, [r3, #2]
 800188e:	490f      	ldr	r1, [pc, #60]	; (80018cc <USART3_IRQHandler+0xe8>)
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <USART3_IRQHandler+0xe4>)
 8001892:	f001 f8f5 	bl	8002a80 <siprintf>
				size = 0;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <USART3_IRQHandler+0xe0>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
				return;
 800189c:	e00f      	b.n	80018be <USART3_IRQHandler+0xda>
			}

			sprintf(buffer, "Throttle: %d, Steering: %d\r\n", buffer[1], buffer[2]);
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <USART3_IRQHandler+0xe4>)
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <USART3_IRQHandler+0xe4>)
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	490a      	ldr	r1, [pc, #40]	; (80018d4 <USART3_IRQHandler+0xf0>)
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <USART3_IRQHandler+0xe4>)
 80018ac:	f001 f8e8 	bl	8002a80 <siprintf>
			LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 80018b0:	2106      	movs	r1, #6
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <USART3_IRQHandler+0xec>)
 80018b4:	f7ff fe20 	bl	80014f8 <LL_DMA_EnableStream>
			size = 0;
 80018b8:	4b02      	ldr	r3, [pc, #8]	; (80018c4 <USART3_IRQHandler+0xe0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018be:	bd98      	pop	{r3, r4, r7, pc}
 80018c0:	40004800 	.word	0x40004800
 80018c4:	20000178 	.word	0x20000178
 80018c8:	20000078 	.word	0x20000078
 80018cc:	0800340c 	.word	0x0800340c
 80018d0:	40026000 	.word	0x40026000
 80018d4:	08003414 	.word	0x08003414

080018d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80018dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018e0:	f7ff fde4 	bl	80014ac <LL_EXTI_IsActiveFlag_0_31>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80018ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018ee:	f7ff fdf3 	bl	80014d8 <LL_EXTI_ClearFlag_0_31>

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 80018f2:	2120      	movs	r1, #32
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <EXTI15_10_IRQHandler+0x28>)
 80018f6:	f7ff fea8 	bl	800164a <LL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40020000 	.word	0x40020000

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f001 f8c4 	bl	8002ac0 <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20020000 	.word	0x20020000
 8001964:	00000400 	.word	0x00000400
 8001968:	2000017c 	.word	0x2000017c
 800196c:	200002d0 	.word	0x200002d0

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199a:	490e      	ldr	r1, [pc, #56]	; (80019d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a0:	e002      	b.n	80019a8 <LoopCopyDataInit>

080019a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a6:	3304      	adds	r3, #4

080019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ac:	d3f9      	bcc.n	80019a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b0:	4c0b      	ldr	r4, [pc, #44]	; (80019e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b4:	e001      	b.n	80019ba <LoopFillZerobss>

080019b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b8:	3204      	adds	r2, #4

080019ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019bc:	d3fb      	bcc.n	80019b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019be:	f7ff ffd7 	bl	8001970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c2:	f001 f883 	bl	8002acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7ff faf9 	bl	8000fbc <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019d8:	080034a0 	.word	0x080034a0
  ldr r2, =_sbss
 80019dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80019e0:	200002cc 	.word	0x200002cc

080019e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_Init+0x40>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_Init+0x40>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_Init+0x40>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 f901 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f808 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fd1e 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x54>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_InitTick+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f90b 	bl	8001c66 <HAL_SYSTICK_Config>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00e      	b.n	8001a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d80a      	bhi.n	8001a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a68:	f000 f8e1 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a6c:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_InitTick+0x5c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x20>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_IncTick+0x24>)
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000180 	.word	0x20000180

08001ab4 <__NVIC_SetPriorityGrouping>:
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_SetPriority>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	; (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf8:	f7ff ff8e 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff47 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff5c 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff8e 	bl	8001b6c <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5d 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffb0 	bl	8001bd4 <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <LL_EXTI_EnableIT_0_31>:
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <LL_EXTI_EnableIT_0_31+0x20>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4904      	ldr	r1, [pc, #16]	; (8001ca0 <LL_EXTI_EnableIT_0_31+0x20>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	40013c00 	.word	0x40013c00

08001ca4 <LL_EXTI_DisableIT_0_31>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <LL_EXTI_DisableIT_0_31+0x24>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	4904      	ldr	r1, [pc, #16]	; (8001cc8 <LL_EXTI_DisableIT_0_31+0x24>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40013c00 	.word	0x40013c00

08001ccc <LL_EXTI_EnableEvent_0_31>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <LL_EXTI_EnableEvent_0_31+0x20>)
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4904      	ldr	r1, [pc, #16]	; (8001cec <LL_EXTI_EnableEvent_0_31+0x20>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <LL_EXTI_DisableEvent_0_31>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	4904      	ldr	r1, [pc, #16]	; (8001d14 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4904      	ldr	r1, [pc, #16]	; (8001d38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40013c00 	.word	0x40013c00

08001d3c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	4904      	ldr	r1, [pc, #16]	; (8001d60 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	4904      	ldr	r1, [pc, #16]	; (8001d84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60cb      	str	r3, [r1, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	4904      	ldr	r1, [pc, #16]	; (8001dac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60cb      	str	r3, [r1, #12]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	791b      	ldrb	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d065      	beq.n	8001e90 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d06b      	beq.n	8001ea4 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	795b      	ldrb	r3, [r3, #5]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d01c      	beq.n	8001e0e <LL_EXTI_Init+0x5e>
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	dc25      	bgt.n	8001e24 <LL_EXTI_Init+0x74>
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <LL_EXTI_Init+0x32>
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d00b      	beq.n	8001df8 <LL_EXTI_Init+0x48>
 8001de0:	e020      	b.n	8001e24 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff82 	bl	8001cf0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff45 	bl	8001c80 <LL_EXTI_EnableIT_0_31>
          break;
 8001df6:	e018      	b.n	8001e2a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff51 	bl	8001ca4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff60 	bl	8001ccc <LL_EXTI_EnableEvent_0_31>
          break;
 8001e0c:	e00d      	b.n	8001e2a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff34 	bl	8001c80 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff55 	bl	8001ccc <LL_EXTI_EnableEvent_0_31>
          break;
 8001e22:	e002      	b.n	8001e2a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
          break;
 8001e28:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	799b      	ldrb	r3, [r3, #6]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d038      	beq.n	8001ea4 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	799b      	ldrb	r3, [r3, #6]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d01c      	beq.n	8001e74 <LL_EXTI_Init+0xc4>
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	dc25      	bgt.n	8001e8a <LL_EXTI_Init+0xda>
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d002      	beq.n	8001e48 <LL_EXTI_Init+0x98>
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d00b      	beq.n	8001e5e <LL_EXTI_Init+0xae>
 8001e46:	e020      	b.n	8001e8a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff9b 	bl	8001d88 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff5e 	bl	8001d18 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001e5c:	e022      	b.n	8001ea4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff6a 	bl	8001d3c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff79 	bl	8001d64 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e72:	e017      	b.n	8001ea4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff4d 	bl	8001d18 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff6e 	bl	8001d64 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001e88:	e00c      	b.n	8001ea4 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
            break;
 8001e8e:	e009      	b.n	8001ea4 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff05 	bl	8001ca4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff ff26 	bl	8001cf0 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <LL_GPIO_SetPinMode>:
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b089      	sub	sp, #36	; 0x24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	613b      	str	r3, [r7, #16]
  return result;
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	401a      	ands	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	61bb      	str	r3, [r7, #24]
  return result;
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	431a      	orrs	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	3724      	adds	r7, #36	; 0x24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_GPIO_SetPinOutputType>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	401a      	ands	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_GPIO_SetPinSpeed>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	613b      	str	r3, [r7, #16]
  return result;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2103      	movs	r1, #3
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	61bb      	str	r3, [r7, #24]
  return result;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	609a      	str	r2, [r3, #8]
}
 8001f8e:	bf00      	nop
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_GPIO_SetPinPull>:
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b089      	sub	sp, #36	; 0x24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	613b      	str	r3, [r7, #16]
  return result;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2103      	movs	r1, #3
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	61bb      	str	r3, [r7, #24]
  return result;
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	60da      	str	r2, [r3, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3724      	adds	r7, #36	; 0x24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_GPIO_SetAFPin_0_7>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	613b      	str	r3, [r7, #16]
  return result;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	210f      	movs	r1, #15
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	61bb      	str	r3, [r7, #24]
  return result;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	431a      	orrs	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	621a      	str	r2, [r3, #32]
}
 800204a:	bf00      	nop
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <LL_GPIO_SetAFPin_8_15>:
{
 8002056:	b480      	push	{r7}
 8002058:	b089      	sub	sp, #36	; 0x24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	613b      	str	r3, [r7, #16]
  return result;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	210f      	movs	r1, #15
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	61bb      	str	r3, [r7, #24]
  return result;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	431a      	orrs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80020ac:	bf00      	nop
 80020ae:	3724      	adds	r7, #36	; 0x24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	613b      	str	r3, [r7, #16]
  return result;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80020e2:	e050      	b.n	8002186 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d042      	beq.n	8002180 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d003      	beq.n	800210a <LL_GPIO_Init+0x52>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d10d      	bne.n	8002126 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	461a      	mov	r2, r3
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff12 	bl	8001f3c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	461a      	mov	r2, r3
 800211e:	69b9      	ldr	r1, [r7, #24]
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fef3 	bl	8001f0c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	461a      	mov	r2, r3
 800212c:	69b9      	ldr	r1, [r7, #24]
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ff33 	bl	8001f9a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d11a      	bne.n	8002172 <LL_GPIO_Init+0xba>
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	60bb      	str	r3, [r7, #8]
  return result;
 8002148:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b07      	cmp	r3, #7
 8002152:	d807      	bhi.n	8002164 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	461a      	mov	r2, r3
 800215a:	69b9      	ldr	r1, [r7, #24]
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff4b 	bl	8001ff8 <LL_GPIO_SetAFPin_0_7>
 8002162:	e006      	b.n	8002172 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	461a      	mov	r2, r3
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff72 	bl	8002056 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	461a      	mov	r2, r3
 8002178:	69b9      	ldr	r1, [r7, #24]
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fe97 	bl	8001eae <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	3301      	adds	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1a7      	bne.n	80020e4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <LL_RCC_GetSysClkSource>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <LL_RCC_GetSysClkSource+0x18>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 030c 	and.w	r3, r3, #12
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800

080021bc <LL_RCC_GetAHBPrescaler>:
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <LL_RCC_GetAHBPrescaler+0x18>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800

080021d8 <LL_RCC_GetAPB1Prescaler>:
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <LL_RCC_GetAPB2Prescaler>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <LL_RCC_GetAPB2Prescaler+0x18>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800

08002210 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <LL_RCC_PLL_GetMainSource+0x18>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800

0800222c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <LL_RCC_PLL_GetN+0x18>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40023800 	.word	0x40023800

08002248 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <LL_RCC_PLL_GetP+0x18>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800

08002264 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <LL_RCC_PLL_GetR+0x18>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <LL_RCC_PLL_GetDivider+0x18>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800

0800229c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80022a4:	f000 f820 	bl	80022e8 <RCC_GetSystemClockFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f85c 	bl	8002370 <RCC_GetHCLKClockFreq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f86a 	bl	800239c <RCC_GetPCLK1ClockFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f876 	bl	80023c4 <RCC_GetPCLK2ClockFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60da      	str	r2, [r3, #12]
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80022f2:	f7ff ff55 	bl	80021a0 <LL_RCC_GetSysClkSource>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d82d      	bhi.n	8002358 <RCC_GetSystemClockFreq+0x70>
 80022fc:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <RCC_GetSystemClockFreq+0x1c>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	08002339 	.word	0x08002339
 8002308:	08002359 	.word	0x08002359
 800230c:	08002359 	.word	0x08002359
 8002310:	08002359 	.word	0x08002359
 8002314:	0800233f 	.word	0x0800233f
 8002318:	08002359 	.word	0x08002359
 800231c:	08002359 	.word	0x08002359
 8002320:	08002359 	.word	0x08002359
 8002324:	08002345 	.word	0x08002345
 8002328:	08002359 	.word	0x08002359
 800232c:	08002359 	.word	0x08002359
 8002330:	08002359 	.word	0x08002359
 8002334:	0800234f 	.word	0x0800234f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <RCC_GetSystemClockFreq+0x80>)
 800233a:	607b      	str	r3, [r7, #4]
      break;
 800233c:	e00f      	b.n	800235e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <RCC_GetSystemClockFreq+0x84>)
 8002340:	607b      	str	r3, [r7, #4]
      break;
 8002342:	e00c      	b.n	800235e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002344:	2008      	movs	r0, #8
 8002346:	f000 f851 	bl	80023ec <RCC_PLL_GetFreqDomain_SYS>
 800234a:	6078      	str	r0, [r7, #4]
      break;
 800234c:	e007      	b.n	800235e <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800234e:	200c      	movs	r0, #12
 8002350:	f000 f84c 	bl	80023ec <RCC_PLL_GetFreqDomain_SYS>
 8002354:	6078      	str	r0, [r7, #4]
      break;
 8002356:	e002      	b.n	800235e <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <RCC_GetSystemClockFreq+0x80>)
 800235a:	607b      	str	r3, [r7, #4]
      break;
 800235c:	bf00      	nop
  }

  return frequency;
 800235e:	687b      	ldr	r3, [r7, #4]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	00f42400 	.word	0x00f42400
 800236c:	007a1200 	.word	0x007a1200

08002370 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002378:	f7ff ff20 	bl	80021bc <LL_RCC_GetAHBPrescaler>
 800237c:	4603      	mov	r3, r0
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <RCC_GetHCLKClockFreq+0x28>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	461a      	mov	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	40d3      	lsrs	r3, r2
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	08003444 	.word	0x08003444

0800239c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80023a4:	f7ff ff18 	bl	80021d8 <LL_RCC_GetAPB1Prescaler>
 80023a8:	4603      	mov	r3, r0
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <RCC_GetPCLK1ClockFreq+0x24>)
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	461a      	mov	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	40d3      	lsrs	r3, r2
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	08003454 	.word	0x08003454

080023c4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80023cc:	f7ff ff12 	bl	80021f4 <LL_RCC_GetAPB2Prescaler>
 80023d0:	4603      	mov	r3, r0
 80023d2:	0b5b      	lsrs	r3, r3, #13
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <RCC_GetPCLK2ClockFreq+0x24>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	461a      	mov	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	40d3      	lsrs	r3, r2
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	08003454 	.word	0x08003454

080023ec <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	2300      	movs	r3, #0
 80023fe:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002400:	f7ff ff06 	bl	8002210 <LL_RCC_PLL_GetMainSource>
 8002404:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002412:	d003      	beq.n	800241c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002414:	e005      	b.n	8002422 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002416:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002418:	617b      	str	r3, [r7, #20]
      break;
 800241a:	e005      	b.n	8002428 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800241e:	617b      	str	r3, [r7, #20]
      break;
 8002420:	e002      	b.n	8002428 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002422:	4b19      	ldr	r3, [pc, #100]	; (8002488 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002424:	617b      	str	r3, [r7, #20]
      break;
 8002426:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b08      	cmp	r3, #8
 800242c:	d114      	bne.n	8002458 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800242e:	f7ff ff27 	bl	8002280 <LL_RCC_PLL_GetDivider>
 8002432:	4602      	mov	r2, r0
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fbb3 f4f2 	udiv	r4, r3, r2
 800243a:	f7ff fef7 	bl	800222c <LL_RCC_PLL_GetN>
 800243e:	4603      	mov	r3, r0
 8002440:	fb03 f404 	mul.w	r4, r3, r4
 8002444:	f7ff ff00 	bl	8002248 <LL_RCC_PLL_GetP>
 8002448:	4603      	mov	r3, r0
 800244a:	0c1b      	lsrs	r3, r3, #16
 800244c:	3301      	adds	r3, #1
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fbb4 f3f3 	udiv	r3, r4, r3
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	e011      	b.n	800247c <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002458:	f7ff ff12 	bl	8002280 <LL_RCC_PLL_GetDivider>
 800245c:	4602      	mov	r2, r0
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fbb3 f4f2 	udiv	r4, r3, r2
 8002464:	f7ff fee2 	bl	800222c <LL_RCC_PLL_GetN>
 8002468:	4603      	mov	r3, r0
 800246a:	fb03 f404 	mul.w	r4, r3, r4
 800246e:	f7ff fef9 	bl	8002264 <LL_RCC_PLL_GetR>
 8002472:	4603      	mov	r3, r0
 8002474:	0f1b      	lsrs	r3, r3, #28
 8002476:	fbb4 f3f3 	udiv	r3, r4, r3
 800247a:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800247c:	693b      	ldr	r3, [r7, #16]
}
 800247e:	4618      	mov	r0, r3
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	bf00      	nop
 8002488:	00f42400 	.word	0x00f42400
 800248c:	007a1200 	.word	0x007a1200

08002490 <LL_USART_IsEnabled>:
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_USART_SetStopBitsLength>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_USART_SetHWFlowCtrl>:
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	615a      	str	r2, [r3, #20]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_USART_SetBaudRate>:
{
 8002504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002508:	b0c0      	sub	sp, #256	; 0x100
 800250a:	af00      	add	r7, sp, #0
 800250c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002510:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002514:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002518:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002524:	f040 810c 	bne.w	8002740 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002528:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800252c:	2200      	movs	r2, #0
 800252e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002532:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800253a:	4622      	mov	r2, r4
 800253c:	462b      	mov	r3, r5
 800253e:	1891      	adds	r1, r2, r2
 8002540:	6639      	str	r1, [r7, #96]	; 0x60
 8002542:	415b      	adcs	r3, r3
 8002544:	667b      	str	r3, [r7, #100]	; 0x64
 8002546:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800254a:	4621      	mov	r1, r4
 800254c:	eb12 0801 	adds.w	r8, r2, r1
 8002550:	4629      	mov	r1, r5
 8002552:	eb43 0901 	adc.w	r9, r3, r1
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800256a:	4690      	mov	r8, r2
 800256c:	4699      	mov	r9, r3
 800256e:	4623      	mov	r3, r4
 8002570:	eb18 0303 	adds.w	r3, r8, r3
 8002574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002578:	462b      	mov	r3, r5
 800257a:	eb49 0303 	adc.w	r3, r9, r3
 800257e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002582:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002586:	2200      	movs	r2, #0
 8002588:	469a      	mov	sl, r3
 800258a:	4693      	mov	fp, r2
 800258c:	eb1a 030a 	adds.w	r3, sl, sl
 8002590:	65bb      	str	r3, [r7, #88]	; 0x58
 8002592:	eb4b 030b 	adc.w	r3, fp, fp
 8002596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002598:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800259c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025a0:	f7fd fe86 	bl	80002b0 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4b64      	ldr	r3, [pc, #400]	; (800273c <LL_USART_SetBaudRate+0x238>)
 80025aa:	fba3 2302 	umull	r2, r3, r3, r2
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	b29c      	uxth	r4, r3
 80025b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025c0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025c4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80025c8:	4642      	mov	r2, r8
 80025ca:	464b      	mov	r3, r9
 80025cc:	1891      	adds	r1, r2, r2
 80025ce:	6539      	str	r1, [r7, #80]	; 0x50
 80025d0:	415b      	adcs	r3, r3
 80025d2:	657b      	str	r3, [r7, #84]	; 0x54
 80025d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025d8:	4641      	mov	r1, r8
 80025da:	1851      	adds	r1, r2, r1
 80025dc:	64b9      	str	r1, [r7, #72]	; 0x48
 80025de:	4649      	mov	r1, r9
 80025e0:	414b      	adcs	r3, r1
 80025e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80025f0:	4659      	mov	r1, fp
 80025f2:	00cb      	lsls	r3, r1, #3
 80025f4:	4651      	mov	r1, sl
 80025f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025fa:	4651      	mov	r1, sl
 80025fc:	00ca      	lsls	r2, r1, #3
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	4603      	mov	r3, r0
 8002604:	4642      	mov	r2, r8
 8002606:	189b      	adds	r3, r3, r2
 8002608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800260c:	464b      	mov	r3, r9
 800260e:	460a      	mov	r2, r1
 8002610:	eb42 0303 	adc.w	r3, r2, r3
 8002614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002618:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800261c:	2200      	movs	r2, #0
 800261e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002622:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002626:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800262a:	460b      	mov	r3, r1
 800262c:	18db      	adds	r3, r3, r3
 800262e:	643b      	str	r3, [r7, #64]	; 0x40
 8002630:	4613      	mov	r3, r2
 8002632:	eb42 0303 	adc.w	r3, r2, r3
 8002636:	647b      	str	r3, [r7, #68]	; 0x44
 8002638:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800263c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002640:	f7fd fe36 	bl	80002b0 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4611      	mov	r1, r2
 800264a:	4b3c      	ldr	r3, [pc, #240]	; (800273c <LL_USART_SetBaudRate+0x238>)
 800264c:	fba3 2301 	umull	r2, r3, r3, r1
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	2264      	movs	r2, #100	; 0x64
 8002654:	fb02 f303 	mul.w	r3, r2, r3
 8002658:	1acb      	subs	r3, r1, r3
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <LL_USART_SetBaudRate+0x238>)
 8002662:	fba3 2302 	umull	r2, r3, r3, r2
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	b29b      	uxth	r3, r3
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	b29b      	uxth	r3, r3
 800266e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002672:	b29b      	uxth	r3, r3
 8002674:	4423      	add	r3, r4
 8002676:	b29c      	uxth	r4, r3
 8002678:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002682:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002686:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800268a:	4642      	mov	r2, r8
 800268c:	464b      	mov	r3, r9
 800268e:	1891      	adds	r1, r2, r2
 8002690:	63b9      	str	r1, [r7, #56]	; 0x38
 8002692:	415b      	adcs	r3, r3
 8002694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002696:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800269a:	4641      	mov	r1, r8
 800269c:	1851      	adds	r1, r2, r1
 800269e:	6339      	str	r1, [r7, #48]	; 0x30
 80026a0:	4649      	mov	r1, r9
 80026a2:	414b      	adcs	r3, r1
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026b2:	4659      	mov	r1, fp
 80026b4:	00cb      	lsls	r3, r1, #3
 80026b6:	4651      	mov	r1, sl
 80026b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026bc:	4651      	mov	r1, sl
 80026be:	00ca      	lsls	r2, r1, #3
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	4603      	mov	r3, r0
 80026c6:	4642      	mov	r2, r8
 80026c8:	189b      	adds	r3, r3, r2
 80026ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026ce:	464b      	mov	r3, r9
 80026d0:	460a      	mov	r2, r1
 80026d2:	eb42 0303 	adc.w	r3, r2, r3
 80026d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80026da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80026de:	2200      	movs	r2, #0
 80026e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026e4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80026e8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80026ec:	460b      	mov	r3, r1
 80026ee:	18db      	adds	r3, r3, r3
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f2:	4613      	mov	r3, r2
 80026f4:	eb42 0303 	adc.w	r3, r2, r3
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026fe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002702:	f7fd fdd5 	bl	80002b0 <__aeabi_uldivmod>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <LL_USART_SetBaudRate+0x238>)
 800270c:	fba3 1302 	umull	r1, r3, r3, r2
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	2164      	movs	r1, #100	; 0x64
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	3332      	adds	r3, #50	; 0x32
 800271e:	4a07      	ldr	r2, [pc, #28]	; (800273c <LL_USART_SetBaudRate+0x238>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b29b      	uxth	r3, r3
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	b29b      	uxth	r3, r3
 800272e:	4423      	add	r3, r4
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	e108      	b.n	800294e <LL_USART_SetBaudRate+0x44a>
 800273c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002740:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002744:	2200      	movs	r2, #0
 8002746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800274a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800274e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8002752:	4642      	mov	r2, r8
 8002754:	464b      	mov	r3, r9
 8002756:	1891      	adds	r1, r2, r2
 8002758:	6239      	str	r1, [r7, #32]
 800275a:	415b      	adcs	r3, r3
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
 800275e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002762:	4641      	mov	r1, r8
 8002764:	1854      	adds	r4, r2, r1
 8002766:	4649      	mov	r1, r9
 8002768:	eb43 0501 	adc.w	r5, r3, r1
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	00eb      	lsls	r3, r5, #3
 8002776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277a:	00e2      	lsls	r2, r4, #3
 800277c:	4614      	mov	r4, r2
 800277e:	461d      	mov	r5, r3
 8002780:	4643      	mov	r3, r8
 8002782:	18e3      	adds	r3, r4, r3
 8002784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002788:	464b      	mov	r3, r9
 800278a:	eb45 0303 	adc.w	r3, r5, r3
 800278e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002792:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002796:	2200      	movs	r2, #0
 8002798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800279c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80027ac:	4629      	mov	r1, r5
 80027ae:	008b      	lsls	r3, r1, #2
 80027b0:	4621      	mov	r1, r4
 80027b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027b6:	4621      	mov	r1, r4
 80027b8:	008a      	lsls	r2, r1, #2
 80027ba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80027be:	f7fd fd77 	bl	80002b0 <__aeabi_uldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4b65      	ldr	r3, [pc, #404]	; (800295c <LL_USART_SetBaudRate+0x458>)
 80027c8:	fba3 2302 	umull	r2, r3, r3, r2
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	b29c      	uxth	r4, r3
 80027d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027e2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80027e6:	4642      	mov	r2, r8
 80027e8:	464b      	mov	r3, r9
 80027ea:	1891      	adds	r1, r2, r2
 80027ec:	61b9      	str	r1, [r7, #24]
 80027ee:	415b      	adcs	r3, r3
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f6:	4641      	mov	r1, r8
 80027f8:	1851      	adds	r1, r2, r1
 80027fa:	6139      	str	r1, [r7, #16]
 80027fc:	4649      	mov	r1, r9
 80027fe:	414b      	adcs	r3, r1
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800280e:	4659      	mov	r1, fp
 8002810:	00cb      	lsls	r3, r1, #3
 8002812:	4651      	mov	r1, sl
 8002814:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002818:	4651      	mov	r1, sl
 800281a:	00ca      	lsls	r2, r1, #3
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	4603      	mov	r3, r0
 8002822:	4642      	mov	r2, r8
 8002824:	189b      	adds	r3, r3, r2
 8002826:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800282a:	464b      	mov	r3, r9
 800282c:	460a      	mov	r2, r1
 800282e:	eb42 0303 	adc.w	r3, r2, r3
 8002832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002836:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002840:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8002850:	4649      	mov	r1, r9
 8002852:	008b      	lsls	r3, r1, #2
 8002854:	4641      	mov	r1, r8
 8002856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800285a:	4641      	mov	r1, r8
 800285c:	008a      	lsls	r2, r1, #2
 800285e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002862:	f7fd fd25 	bl	80002b0 <__aeabi_uldivmod>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4611      	mov	r1, r2
 800286c:	4b3b      	ldr	r3, [pc, #236]	; (800295c <LL_USART_SetBaudRate+0x458>)
 800286e:	fba3 2301 	umull	r2, r3, r3, r1
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2264      	movs	r2, #100	; 0x64
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	1acb      	subs	r3, r1, r3
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	3332      	adds	r3, #50	; 0x32
 8002880:	4a36      	ldr	r2, [pc, #216]	; (800295c <LL_USART_SetBaudRate+0x458>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	b29b      	uxth	r3, r3
 800288a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288e:	b29b      	uxth	r3, r3
 8002890:	4423      	add	r3, r4
 8002892:	b29c      	uxth	r4, r3
 8002894:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002898:	2200      	movs	r2, #0
 800289a:	67bb      	str	r3, [r7, #120]	; 0x78
 800289c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800289e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80028a2:	4642      	mov	r2, r8
 80028a4:	464b      	mov	r3, r9
 80028a6:	1891      	adds	r1, r2, r2
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	415b      	adcs	r3, r3
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028b2:	4641      	mov	r1, r8
 80028b4:	1851      	adds	r1, r2, r1
 80028b6:	6039      	str	r1, [r7, #0]
 80028b8:	4649      	mov	r1, r9
 80028ba:	414b      	adcs	r3, r1
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028ca:	4659      	mov	r1, fp
 80028cc:	00cb      	lsls	r3, r1, #3
 80028ce:	4651      	mov	r1, sl
 80028d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028d4:	4651      	mov	r1, sl
 80028d6:	00ca      	lsls	r2, r1, #3
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	4603      	mov	r3, r0
 80028de:	4642      	mov	r2, r8
 80028e0:	189b      	adds	r3, r3, r2
 80028e2:	673b      	str	r3, [r7, #112]	; 0x70
 80028e4:	464b      	mov	r3, r9
 80028e6:	460a      	mov	r2, r1
 80028e8:	eb42 0303 	adc.w	r3, r2, r3
 80028ec:	677b      	str	r3, [r7, #116]	; 0x74
 80028ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80028f2:	2200      	movs	r2, #0
 80028f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80028f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002904:	4649      	mov	r1, r9
 8002906:	008b      	lsls	r3, r1, #2
 8002908:	4641      	mov	r1, r8
 800290a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800290e:	4641      	mov	r1, r8
 8002910:	008a      	lsls	r2, r1, #2
 8002912:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002916:	f7fd fccb 	bl	80002b0 <__aeabi_uldivmod>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <LL_USART_SetBaudRate+0x458>)
 8002920:	fba3 1302 	umull	r1, r3, r3, r2
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	2164      	movs	r1, #100	; 0x64
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	3332      	adds	r3, #50	; 0x32
 8002932:	4a0a      	ldr	r2, [pc, #40]	; (800295c <LL_USART_SetBaudRate+0x458>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	b29b      	uxth	r3, r3
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	b29b      	uxth	r3, r3
 8002942:	4423      	add	r3, r4
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800294c:	609a      	str	r2, [r3, #8]
}
 800294e:	bf00      	nop
 8002950:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002954:	46bd      	mov	sp, r7
 8002956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800295a:	bf00      	nop
 800295c:	51eb851f 	.word	0x51eb851f

08002960 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff fd8c 	bl	8002490 <LL_USART_IsEnabled>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d15e      	bne.n	8002a3c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002986:	f023 030c 	bic.w	r3, r3, #12
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	6851      	ldr	r1, [r2, #4]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	68d2      	ldr	r2, [r2, #12]
 8002992:	4311      	orrs	r1, r2
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	6912      	ldr	r2, [r2, #16]
 8002998:	4311      	orrs	r1, r2
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	6992      	ldr	r2, [r2, #24]
 800299e:	430a      	orrs	r2, r1
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff fd83 	bl	80024b8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fd90 	bl	80024de <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80029be:	f107 0308 	add.w	r3, r7, #8
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fc6a 	bl	800229c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <LL_USART_Init+0xe8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d102      	bne.n	80029d6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	e021      	b.n	8002a1a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <LL_USART_Init+0xec>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d102      	bne.n	80029e4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e01a      	b.n	8002a1a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <LL_USART_Init+0xf0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d102      	bne.n	80029f2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	e013      	b.n	8002a1a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <LL_USART_Init+0xf4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d102      	bne.n	8002a00 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	e00c      	b.n	8002a1a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <LL_USART_Init+0xf8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d102      	bne.n	8002a0e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	e005      	b.n	8002a1a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <LL_USART_Init+0xfc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69b9      	ldr	r1, [r7, #24]
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff fd64 	bl	8002504 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002a3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40011000 	.word	0x40011000
 8002a4c:	40004400 	.word	0x40004400
 8002a50:	40004800 	.word	0x40004800
 8002a54:	40011400 	.word	0x40011400
 8002a58:	40004c00 	.word	0x40004c00
 8002a5c:	40005000 	.word	0x40005000

08002a60 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <LL_SetSystemCoreClock+0x1c>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000

08002a80 <siprintf>:
 8002a80:	b40e      	push	{r1, r2, r3}
 8002a82:	b500      	push	{lr}
 8002a84:	b09c      	sub	sp, #112	; 0x70
 8002a86:	ab1d      	add	r3, sp, #116	; 0x74
 8002a88:	9002      	str	r0, [sp, #8]
 8002a8a:	9006      	str	r0, [sp, #24]
 8002a8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a90:	4809      	ldr	r0, [pc, #36]	; (8002ab8 <siprintf+0x38>)
 8002a92:	9107      	str	r1, [sp, #28]
 8002a94:	9104      	str	r1, [sp, #16]
 8002a96:	4909      	ldr	r1, [pc, #36]	; (8002abc <siprintf+0x3c>)
 8002a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a9c:	9105      	str	r1, [sp, #20]
 8002a9e:	6800      	ldr	r0, [r0, #0]
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	a902      	add	r1, sp, #8
 8002aa4:	f000 f98a 	bl	8002dbc <_svfiprintf_r>
 8002aa8:	9b02      	ldr	r3, [sp, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	b01c      	add	sp, #112	; 0x70
 8002ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ab4:	b003      	add	sp, #12
 8002ab6:	4770      	bx	lr
 8002ab8:	20000058 	.word	0x20000058
 8002abc:	ffff0208 	.word	0xffff0208

08002ac0 <__errno>:
 8002ac0:	4b01      	ldr	r3, [pc, #4]	; (8002ac8 <__errno+0x8>)
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000058 	.word	0x20000058

08002acc <__libc_init_array>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	4d0d      	ldr	r5, [pc, #52]	; (8002b04 <__libc_init_array+0x38>)
 8002ad0:	4c0d      	ldr	r4, [pc, #52]	; (8002b08 <__libc_init_array+0x3c>)
 8002ad2:	1b64      	subs	r4, r4, r5
 8002ad4:	10a4      	asrs	r4, r4, #2
 8002ad6:	2600      	movs	r6, #0
 8002ad8:	42a6      	cmp	r6, r4
 8002ada:	d109      	bne.n	8002af0 <__libc_init_array+0x24>
 8002adc:	4d0b      	ldr	r5, [pc, #44]	; (8002b0c <__libc_init_array+0x40>)
 8002ade:	4c0c      	ldr	r4, [pc, #48]	; (8002b10 <__libc_init_array+0x44>)
 8002ae0:	f000 fc6a 	bl	80033b8 <_init>
 8002ae4:	1b64      	subs	r4, r4, r5
 8002ae6:	10a4      	asrs	r4, r4, #2
 8002ae8:	2600      	movs	r6, #0
 8002aea:	42a6      	cmp	r6, r4
 8002aec:	d105      	bne.n	8002afa <__libc_init_array+0x2e>
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af4:	4798      	blx	r3
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7ee      	b.n	8002ad8 <__libc_init_array+0xc>
 8002afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afe:	4798      	blx	r3
 8002b00:	3601      	adds	r6, #1
 8002b02:	e7f2      	b.n	8002aea <__libc_init_array+0x1e>
 8002b04:	08003498 	.word	0x08003498
 8002b08:	08003498 	.word	0x08003498
 8002b0c:	08003498 	.word	0x08003498
 8002b10:	0800349c 	.word	0x0800349c

08002b14 <__retarget_lock_acquire_recursive>:
 8002b14:	4770      	bx	lr

08002b16 <__retarget_lock_release_recursive>:
 8002b16:	4770      	bx	lr

08002b18 <_free_r>:
 8002b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b1a:	2900      	cmp	r1, #0
 8002b1c:	d044      	beq.n	8002ba8 <_free_r+0x90>
 8002b1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b22:	9001      	str	r0, [sp, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f1a1 0404 	sub.w	r4, r1, #4
 8002b2a:	bfb8      	it	lt
 8002b2c:	18e4      	addlt	r4, r4, r3
 8002b2e:	f000 f8df 	bl	8002cf0 <__malloc_lock>
 8002b32:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <_free_r+0x94>)
 8002b34:	9801      	ldr	r0, [sp, #4]
 8002b36:	6813      	ldr	r3, [r2, #0]
 8002b38:	b933      	cbnz	r3, 8002b48 <_free_r+0x30>
 8002b3a:	6063      	str	r3, [r4, #4]
 8002b3c:	6014      	str	r4, [r2, #0]
 8002b3e:	b003      	add	sp, #12
 8002b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b44:	f000 b8da 	b.w	8002cfc <__malloc_unlock>
 8002b48:	42a3      	cmp	r3, r4
 8002b4a:	d908      	bls.n	8002b5e <_free_r+0x46>
 8002b4c:	6825      	ldr	r5, [r4, #0]
 8002b4e:	1961      	adds	r1, r4, r5
 8002b50:	428b      	cmp	r3, r1
 8002b52:	bf01      	itttt	eq
 8002b54:	6819      	ldreq	r1, [r3, #0]
 8002b56:	685b      	ldreq	r3, [r3, #4]
 8002b58:	1949      	addeq	r1, r1, r5
 8002b5a:	6021      	streq	r1, [r4, #0]
 8002b5c:	e7ed      	b.n	8002b3a <_free_r+0x22>
 8002b5e:	461a      	mov	r2, r3
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	b10b      	cbz	r3, 8002b68 <_free_r+0x50>
 8002b64:	42a3      	cmp	r3, r4
 8002b66:	d9fa      	bls.n	8002b5e <_free_r+0x46>
 8002b68:	6811      	ldr	r1, [r2, #0]
 8002b6a:	1855      	adds	r5, r2, r1
 8002b6c:	42a5      	cmp	r5, r4
 8002b6e:	d10b      	bne.n	8002b88 <_free_r+0x70>
 8002b70:	6824      	ldr	r4, [r4, #0]
 8002b72:	4421      	add	r1, r4
 8002b74:	1854      	adds	r4, r2, r1
 8002b76:	42a3      	cmp	r3, r4
 8002b78:	6011      	str	r1, [r2, #0]
 8002b7a:	d1e0      	bne.n	8002b3e <_free_r+0x26>
 8002b7c:	681c      	ldr	r4, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	6053      	str	r3, [r2, #4]
 8002b82:	440c      	add	r4, r1
 8002b84:	6014      	str	r4, [r2, #0]
 8002b86:	e7da      	b.n	8002b3e <_free_r+0x26>
 8002b88:	d902      	bls.n	8002b90 <_free_r+0x78>
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	6003      	str	r3, [r0, #0]
 8002b8e:	e7d6      	b.n	8002b3e <_free_r+0x26>
 8002b90:	6825      	ldr	r5, [r4, #0]
 8002b92:	1961      	adds	r1, r4, r5
 8002b94:	428b      	cmp	r3, r1
 8002b96:	bf04      	itt	eq
 8002b98:	6819      	ldreq	r1, [r3, #0]
 8002b9a:	685b      	ldreq	r3, [r3, #4]
 8002b9c:	6063      	str	r3, [r4, #4]
 8002b9e:	bf04      	itt	eq
 8002ba0:	1949      	addeq	r1, r1, r5
 8002ba2:	6021      	streq	r1, [r4, #0]
 8002ba4:	6054      	str	r4, [r2, #4]
 8002ba6:	e7ca      	b.n	8002b3e <_free_r+0x26>
 8002ba8:	b003      	add	sp, #12
 8002baa:	bd30      	pop	{r4, r5, pc}
 8002bac:	200002c4 	.word	0x200002c4

08002bb0 <sbrk_aligned>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	4e0e      	ldr	r6, [pc, #56]	; (8002bec <sbrk_aligned+0x3c>)
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	6831      	ldr	r1, [r6, #0]
 8002bb8:	4605      	mov	r5, r0
 8002bba:	b911      	cbnz	r1, 8002bc2 <sbrk_aligned+0x12>
 8002bbc:	f000 fba6 	bl	800330c <_sbrk_r>
 8002bc0:	6030      	str	r0, [r6, #0]
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	f000 fba1 	bl	800330c <_sbrk_r>
 8002bca:	1c43      	adds	r3, r0, #1
 8002bcc:	d00a      	beq.n	8002be4 <sbrk_aligned+0x34>
 8002bce:	1cc4      	adds	r4, r0, #3
 8002bd0:	f024 0403 	bic.w	r4, r4, #3
 8002bd4:	42a0      	cmp	r0, r4
 8002bd6:	d007      	beq.n	8002be8 <sbrk_aligned+0x38>
 8002bd8:	1a21      	subs	r1, r4, r0
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f000 fb96 	bl	800330c <_sbrk_r>
 8002be0:	3001      	adds	r0, #1
 8002be2:	d101      	bne.n	8002be8 <sbrk_aligned+0x38>
 8002be4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002be8:	4620      	mov	r0, r4
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	200002c8 	.word	0x200002c8

08002bf0 <_malloc_r>:
 8002bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf4:	1ccd      	adds	r5, r1, #3
 8002bf6:	f025 0503 	bic.w	r5, r5, #3
 8002bfa:	3508      	adds	r5, #8
 8002bfc:	2d0c      	cmp	r5, #12
 8002bfe:	bf38      	it	cc
 8002c00:	250c      	movcc	r5, #12
 8002c02:	2d00      	cmp	r5, #0
 8002c04:	4607      	mov	r7, r0
 8002c06:	db01      	blt.n	8002c0c <_malloc_r+0x1c>
 8002c08:	42a9      	cmp	r1, r5
 8002c0a:	d905      	bls.n	8002c18 <_malloc_r+0x28>
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	2600      	movs	r6, #0
 8002c12:	4630      	mov	r0, r6
 8002c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002cec <_malloc_r+0xfc>
 8002c1c:	f000 f868 	bl	8002cf0 <__malloc_lock>
 8002c20:	f8d8 3000 	ldr.w	r3, [r8]
 8002c24:	461c      	mov	r4, r3
 8002c26:	bb5c      	cbnz	r4, 8002c80 <_malloc_r+0x90>
 8002c28:	4629      	mov	r1, r5
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	f7ff ffc0 	bl	8002bb0 <sbrk_aligned>
 8002c30:	1c43      	adds	r3, r0, #1
 8002c32:	4604      	mov	r4, r0
 8002c34:	d155      	bne.n	8002ce2 <_malloc_r+0xf2>
 8002c36:	f8d8 4000 	ldr.w	r4, [r8]
 8002c3a:	4626      	mov	r6, r4
 8002c3c:	2e00      	cmp	r6, #0
 8002c3e:	d145      	bne.n	8002ccc <_malloc_r+0xdc>
 8002c40:	2c00      	cmp	r4, #0
 8002c42:	d048      	beq.n	8002cd6 <_malloc_r+0xe6>
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	4631      	mov	r1, r6
 8002c48:	4638      	mov	r0, r7
 8002c4a:	eb04 0903 	add.w	r9, r4, r3
 8002c4e:	f000 fb5d 	bl	800330c <_sbrk_r>
 8002c52:	4581      	cmp	r9, r0
 8002c54:	d13f      	bne.n	8002cd6 <_malloc_r+0xe6>
 8002c56:	6821      	ldr	r1, [r4, #0]
 8002c58:	1a6d      	subs	r5, r5, r1
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	4638      	mov	r0, r7
 8002c5e:	f7ff ffa7 	bl	8002bb0 <sbrk_aligned>
 8002c62:	3001      	adds	r0, #1
 8002c64:	d037      	beq.n	8002cd6 <_malloc_r+0xe6>
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	442b      	add	r3, r5
 8002c6a:	6023      	str	r3, [r4, #0]
 8002c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d038      	beq.n	8002ce6 <_malloc_r+0xf6>
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	42a2      	cmp	r2, r4
 8002c78:	d12b      	bne.n	8002cd2 <_malloc_r+0xe2>
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	e00f      	b.n	8002ca0 <_malloc_r+0xb0>
 8002c80:	6822      	ldr	r2, [r4, #0]
 8002c82:	1b52      	subs	r2, r2, r5
 8002c84:	d41f      	bmi.n	8002cc6 <_malloc_r+0xd6>
 8002c86:	2a0b      	cmp	r2, #11
 8002c88:	d917      	bls.n	8002cba <_malloc_r+0xca>
 8002c8a:	1961      	adds	r1, r4, r5
 8002c8c:	42a3      	cmp	r3, r4
 8002c8e:	6025      	str	r5, [r4, #0]
 8002c90:	bf18      	it	ne
 8002c92:	6059      	strne	r1, [r3, #4]
 8002c94:	6863      	ldr	r3, [r4, #4]
 8002c96:	bf08      	it	eq
 8002c98:	f8c8 1000 	streq.w	r1, [r8]
 8002c9c:	5162      	str	r2, [r4, r5]
 8002c9e:	604b      	str	r3, [r1, #4]
 8002ca0:	4638      	mov	r0, r7
 8002ca2:	f104 060b 	add.w	r6, r4, #11
 8002ca6:	f000 f829 	bl	8002cfc <__malloc_unlock>
 8002caa:	f026 0607 	bic.w	r6, r6, #7
 8002cae:	1d23      	adds	r3, r4, #4
 8002cb0:	1af2      	subs	r2, r6, r3
 8002cb2:	d0ae      	beq.n	8002c12 <_malloc_r+0x22>
 8002cb4:	1b9b      	subs	r3, r3, r6
 8002cb6:	50a3      	str	r3, [r4, r2]
 8002cb8:	e7ab      	b.n	8002c12 <_malloc_r+0x22>
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	6862      	ldr	r2, [r4, #4]
 8002cbe:	d1dd      	bne.n	8002c7c <_malloc_r+0x8c>
 8002cc0:	f8c8 2000 	str.w	r2, [r8]
 8002cc4:	e7ec      	b.n	8002ca0 <_malloc_r+0xb0>
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	6864      	ldr	r4, [r4, #4]
 8002cca:	e7ac      	b.n	8002c26 <_malloc_r+0x36>
 8002ccc:	4634      	mov	r4, r6
 8002cce:	6876      	ldr	r6, [r6, #4]
 8002cd0:	e7b4      	b.n	8002c3c <_malloc_r+0x4c>
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	e7cc      	b.n	8002c70 <_malloc_r+0x80>
 8002cd6:	230c      	movs	r3, #12
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4638      	mov	r0, r7
 8002cdc:	f000 f80e 	bl	8002cfc <__malloc_unlock>
 8002ce0:	e797      	b.n	8002c12 <_malloc_r+0x22>
 8002ce2:	6025      	str	r5, [r4, #0]
 8002ce4:	e7dc      	b.n	8002ca0 <_malloc_r+0xb0>
 8002ce6:	605b      	str	r3, [r3, #4]
 8002ce8:	deff      	udf	#255	; 0xff
 8002cea:	bf00      	nop
 8002cec:	200002c4 	.word	0x200002c4

08002cf0 <__malloc_lock>:
 8002cf0:	4801      	ldr	r0, [pc, #4]	; (8002cf8 <__malloc_lock+0x8>)
 8002cf2:	f7ff bf0f 	b.w	8002b14 <__retarget_lock_acquire_recursive>
 8002cf6:	bf00      	nop
 8002cf8:	200002c0 	.word	0x200002c0

08002cfc <__malloc_unlock>:
 8002cfc:	4801      	ldr	r0, [pc, #4]	; (8002d04 <__malloc_unlock+0x8>)
 8002cfe:	f7ff bf0a 	b.w	8002b16 <__retarget_lock_release_recursive>
 8002d02:	bf00      	nop
 8002d04:	200002c0 	.word	0x200002c0

08002d08 <__ssputs_r>:
 8002d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d0c:	688e      	ldr	r6, [r1, #8]
 8002d0e:	461f      	mov	r7, r3
 8002d10:	42be      	cmp	r6, r7
 8002d12:	680b      	ldr	r3, [r1, #0]
 8002d14:	4682      	mov	sl, r0
 8002d16:	460c      	mov	r4, r1
 8002d18:	4690      	mov	r8, r2
 8002d1a:	d82c      	bhi.n	8002d76 <__ssputs_r+0x6e>
 8002d1c:	898a      	ldrh	r2, [r1, #12]
 8002d1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d22:	d026      	beq.n	8002d72 <__ssputs_r+0x6a>
 8002d24:	6965      	ldr	r5, [r4, #20]
 8002d26:	6909      	ldr	r1, [r1, #16]
 8002d28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d2c:	eba3 0901 	sub.w	r9, r3, r1
 8002d30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d34:	1c7b      	adds	r3, r7, #1
 8002d36:	444b      	add	r3, r9
 8002d38:	106d      	asrs	r5, r5, #1
 8002d3a:	429d      	cmp	r5, r3
 8002d3c:	bf38      	it	cc
 8002d3e:	461d      	movcc	r5, r3
 8002d40:	0553      	lsls	r3, r2, #21
 8002d42:	d527      	bpl.n	8002d94 <__ssputs_r+0x8c>
 8002d44:	4629      	mov	r1, r5
 8002d46:	f7ff ff53 	bl	8002bf0 <_malloc_r>
 8002d4a:	4606      	mov	r6, r0
 8002d4c:	b360      	cbz	r0, 8002da8 <__ssputs_r+0xa0>
 8002d4e:	6921      	ldr	r1, [r4, #16]
 8002d50:	464a      	mov	r2, r9
 8002d52:	f000 faeb 	bl	800332c <memcpy>
 8002d56:	89a3      	ldrh	r3, [r4, #12]
 8002d58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d60:	81a3      	strh	r3, [r4, #12]
 8002d62:	6126      	str	r6, [r4, #16]
 8002d64:	6165      	str	r5, [r4, #20]
 8002d66:	444e      	add	r6, r9
 8002d68:	eba5 0509 	sub.w	r5, r5, r9
 8002d6c:	6026      	str	r6, [r4, #0]
 8002d6e:	60a5      	str	r5, [r4, #8]
 8002d70:	463e      	mov	r6, r7
 8002d72:	42be      	cmp	r6, r7
 8002d74:	d900      	bls.n	8002d78 <__ssputs_r+0x70>
 8002d76:	463e      	mov	r6, r7
 8002d78:	6820      	ldr	r0, [r4, #0]
 8002d7a:	4632      	mov	r2, r6
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	f000 faab 	bl	80032d8 <memmove>
 8002d82:	68a3      	ldr	r3, [r4, #8]
 8002d84:	1b9b      	subs	r3, r3, r6
 8002d86:	60a3      	str	r3, [r4, #8]
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	4433      	add	r3, r6
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	2000      	movs	r0, #0
 8002d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d94:	462a      	mov	r2, r5
 8002d96:	f000 fad7 	bl	8003348 <_realloc_r>
 8002d9a:	4606      	mov	r6, r0
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d1e0      	bne.n	8002d62 <__ssputs_r+0x5a>
 8002da0:	6921      	ldr	r1, [r4, #16]
 8002da2:	4650      	mov	r0, sl
 8002da4:	f7ff feb8 	bl	8002b18 <_free_r>
 8002da8:	230c      	movs	r3, #12
 8002daa:	f8ca 3000 	str.w	r3, [sl]
 8002dae:	89a3      	ldrh	r3, [r4, #12]
 8002db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db4:	81a3      	strh	r3, [r4, #12]
 8002db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dba:	e7e9      	b.n	8002d90 <__ssputs_r+0x88>

08002dbc <_svfiprintf_r>:
 8002dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc0:	4698      	mov	r8, r3
 8002dc2:	898b      	ldrh	r3, [r1, #12]
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	b09d      	sub	sp, #116	; 0x74
 8002dc8:	4607      	mov	r7, r0
 8002dca:	460d      	mov	r5, r1
 8002dcc:	4614      	mov	r4, r2
 8002dce:	d50e      	bpl.n	8002dee <_svfiprintf_r+0x32>
 8002dd0:	690b      	ldr	r3, [r1, #16]
 8002dd2:	b963      	cbnz	r3, 8002dee <_svfiprintf_r+0x32>
 8002dd4:	2140      	movs	r1, #64	; 0x40
 8002dd6:	f7ff ff0b 	bl	8002bf0 <_malloc_r>
 8002dda:	6028      	str	r0, [r5, #0]
 8002ddc:	6128      	str	r0, [r5, #16]
 8002dde:	b920      	cbnz	r0, 8002dea <_svfiprintf_r+0x2e>
 8002de0:	230c      	movs	r3, #12
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002de8:	e0d0      	b.n	8002f8c <_svfiprintf_r+0x1d0>
 8002dea:	2340      	movs	r3, #64	; 0x40
 8002dec:	616b      	str	r3, [r5, #20]
 8002dee:	2300      	movs	r3, #0
 8002df0:	9309      	str	r3, [sp, #36]	; 0x24
 8002df2:	2320      	movs	r3, #32
 8002df4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dfc:	2330      	movs	r3, #48	; 0x30
 8002dfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002fa4 <_svfiprintf_r+0x1e8>
 8002e02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e06:	f04f 0901 	mov.w	r9, #1
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	469a      	mov	sl, r3
 8002e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e12:	b10a      	cbz	r2, 8002e18 <_svfiprintf_r+0x5c>
 8002e14:	2a25      	cmp	r2, #37	; 0x25
 8002e16:	d1f9      	bne.n	8002e0c <_svfiprintf_r+0x50>
 8002e18:	ebba 0b04 	subs.w	fp, sl, r4
 8002e1c:	d00b      	beq.n	8002e36 <_svfiprintf_r+0x7a>
 8002e1e:	465b      	mov	r3, fp
 8002e20:	4622      	mov	r2, r4
 8002e22:	4629      	mov	r1, r5
 8002e24:	4638      	mov	r0, r7
 8002e26:	f7ff ff6f 	bl	8002d08 <__ssputs_r>
 8002e2a:	3001      	adds	r0, #1
 8002e2c:	f000 80a9 	beq.w	8002f82 <_svfiprintf_r+0x1c6>
 8002e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e32:	445a      	add	r2, fp
 8002e34:	9209      	str	r2, [sp, #36]	; 0x24
 8002e36:	f89a 3000 	ldrb.w	r3, [sl]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80a1 	beq.w	8002f82 <_svfiprintf_r+0x1c6>
 8002e40:	2300      	movs	r3, #0
 8002e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e4a:	f10a 0a01 	add.w	sl, sl, #1
 8002e4e:	9304      	str	r3, [sp, #16]
 8002e50:	9307      	str	r3, [sp, #28]
 8002e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e56:	931a      	str	r3, [sp, #104]	; 0x68
 8002e58:	4654      	mov	r4, sl
 8002e5a:	2205      	movs	r2, #5
 8002e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e60:	4850      	ldr	r0, [pc, #320]	; (8002fa4 <_svfiprintf_r+0x1e8>)
 8002e62:	f7fd f9d5 	bl	8000210 <memchr>
 8002e66:	9a04      	ldr	r2, [sp, #16]
 8002e68:	b9d8      	cbnz	r0, 8002ea2 <_svfiprintf_r+0xe6>
 8002e6a:	06d0      	lsls	r0, r2, #27
 8002e6c:	bf44      	itt	mi
 8002e6e:	2320      	movmi	r3, #32
 8002e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e74:	0711      	lsls	r1, r2, #28
 8002e76:	bf44      	itt	mi
 8002e78:	232b      	movmi	r3, #43	; 0x2b
 8002e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e82:	2b2a      	cmp	r3, #42	; 0x2a
 8002e84:	d015      	beq.n	8002eb2 <_svfiprintf_r+0xf6>
 8002e86:	9a07      	ldr	r2, [sp, #28]
 8002e88:	4654      	mov	r4, sl
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f04f 0c0a 	mov.w	ip, #10
 8002e90:	4621      	mov	r1, r4
 8002e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e96:	3b30      	subs	r3, #48	; 0x30
 8002e98:	2b09      	cmp	r3, #9
 8002e9a:	d94d      	bls.n	8002f38 <_svfiprintf_r+0x17c>
 8002e9c:	b1b0      	cbz	r0, 8002ecc <_svfiprintf_r+0x110>
 8002e9e:	9207      	str	r2, [sp, #28]
 8002ea0:	e014      	b.n	8002ecc <_svfiprintf_r+0x110>
 8002ea2:	eba0 0308 	sub.w	r3, r0, r8
 8002ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	9304      	str	r3, [sp, #16]
 8002eae:	46a2      	mov	sl, r4
 8002eb0:	e7d2      	b.n	8002e58 <_svfiprintf_r+0x9c>
 8002eb2:	9b03      	ldr	r3, [sp, #12]
 8002eb4:	1d19      	adds	r1, r3, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	9103      	str	r1, [sp, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bfbb      	ittet	lt
 8002ebe:	425b      	neglt	r3, r3
 8002ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ec4:	9307      	strge	r3, [sp, #28]
 8002ec6:	9307      	strlt	r3, [sp, #28]
 8002ec8:	bfb8      	it	lt
 8002eca:	9204      	strlt	r2, [sp, #16]
 8002ecc:	7823      	ldrb	r3, [r4, #0]
 8002ece:	2b2e      	cmp	r3, #46	; 0x2e
 8002ed0:	d10c      	bne.n	8002eec <_svfiprintf_r+0x130>
 8002ed2:	7863      	ldrb	r3, [r4, #1]
 8002ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed6:	d134      	bne.n	8002f42 <_svfiprintf_r+0x186>
 8002ed8:	9b03      	ldr	r3, [sp, #12]
 8002eda:	1d1a      	adds	r2, r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	9203      	str	r2, [sp, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bfb8      	it	lt
 8002ee4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ee8:	3402      	adds	r4, #2
 8002eea:	9305      	str	r3, [sp, #20]
 8002eec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002fb4 <_svfiprintf_r+0x1f8>
 8002ef0:	7821      	ldrb	r1, [r4, #0]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	4650      	mov	r0, sl
 8002ef6:	f7fd f98b 	bl	8000210 <memchr>
 8002efa:	b138      	cbz	r0, 8002f0c <_svfiprintf_r+0x150>
 8002efc:	9b04      	ldr	r3, [sp, #16]
 8002efe:	eba0 000a 	sub.w	r0, r0, sl
 8002f02:	2240      	movs	r2, #64	; 0x40
 8002f04:	4082      	lsls	r2, r0
 8002f06:	4313      	orrs	r3, r2
 8002f08:	3401      	adds	r4, #1
 8002f0a:	9304      	str	r3, [sp, #16]
 8002f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f10:	4825      	ldr	r0, [pc, #148]	; (8002fa8 <_svfiprintf_r+0x1ec>)
 8002f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f16:	2206      	movs	r2, #6
 8002f18:	f7fd f97a 	bl	8000210 <memchr>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d038      	beq.n	8002f92 <_svfiprintf_r+0x1d6>
 8002f20:	4b22      	ldr	r3, [pc, #136]	; (8002fac <_svfiprintf_r+0x1f0>)
 8002f22:	bb1b      	cbnz	r3, 8002f6c <_svfiprintf_r+0x1b0>
 8002f24:	9b03      	ldr	r3, [sp, #12]
 8002f26:	3307      	adds	r3, #7
 8002f28:	f023 0307 	bic.w	r3, r3, #7
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	9303      	str	r3, [sp, #12]
 8002f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f32:	4433      	add	r3, r6
 8002f34:	9309      	str	r3, [sp, #36]	; 0x24
 8002f36:	e768      	b.n	8002e0a <_svfiprintf_r+0x4e>
 8002f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	2001      	movs	r0, #1
 8002f40:	e7a6      	b.n	8002e90 <_svfiprintf_r+0xd4>
 8002f42:	2300      	movs	r3, #0
 8002f44:	3401      	adds	r4, #1
 8002f46:	9305      	str	r3, [sp, #20]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f04f 0c0a 	mov.w	ip, #10
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f54:	3a30      	subs	r2, #48	; 0x30
 8002f56:	2a09      	cmp	r2, #9
 8002f58:	d903      	bls.n	8002f62 <_svfiprintf_r+0x1a6>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0c6      	beq.n	8002eec <_svfiprintf_r+0x130>
 8002f5e:	9105      	str	r1, [sp, #20]
 8002f60:	e7c4      	b.n	8002eec <_svfiprintf_r+0x130>
 8002f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f66:	4604      	mov	r4, r0
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e7f0      	b.n	8002f4e <_svfiprintf_r+0x192>
 8002f6c:	ab03      	add	r3, sp, #12
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	462a      	mov	r2, r5
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <_svfiprintf_r+0x1f4>)
 8002f74:	a904      	add	r1, sp, #16
 8002f76:	4638      	mov	r0, r7
 8002f78:	f3af 8000 	nop.w
 8002f7c:	1c42      	adds	r2, r0, #1
 8002f7e:	4606      	mov	r6, r0
 8002f80:	d1d6      	bne.n	8002f30 <_svfiprintf_r+0x174>
 8002f82:	89ab      	ldrh	r3, [r5, #12]
 8002f84:	065b      	lsls	r3, r3, #25
 8002f86:	f53f af2d 	bmi.w	8002de4 <_svfiprintf_r+0x28>
 8002f8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f8c:	b01d      	add	sp, #116	; 0x74
 8002f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f92:	ab03      	add	r3, sp, #12
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	462a      	mov	r2, r5
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <_svfiprintf_r+0x1f4>)
 8002f9a:	a904      	add	r1, sp, #16
 8002f9c:	4638      	mov	r0, r7
 8002f9e:	f000 f879 	bl	8003094 <_printf_i>
 8002fa2:	e7eb      	b.n	8002f7c <_svfiprintf_r+0x1c0>
 8002fa4:	0800345c 	.word	0x0800345c
 8002fa8:	08003466 	.word	0x08003466
 8002fac:	00000000 	.word	0x00000000
 8002fb0:	08002d09 	.word	0x08002d09
 8002fb4:	08003462 	.word	0x08003462

08002fb8 <_printf_common>:
 8002fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fbc:	4616      	mov	r6, r2
 8002fbe:	4699      	mov	r9, r3
 8002fc0:	688a      	ldr	r2, [r1, #8]
 8002fc2:	690b      	ldr	r3, [r1, #16]
 8002fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	bfb8      	it	lt
 8002fcc:	4613      	movlt	r3, r2
 8002fce:	6033      	str	r3, [r6, #0]
 8002fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	460c      	mov	r4, r1
 8002fd8:	b10a      	cbz	r2, 8002fde <_printf_common+0x26>
 8002fda:	3301      	adds	r3, #1
 8002fdc:	6033      	str	r3, [r6, #0]
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	0699      	lsls	r1, r3, #26
 8002fe2:	bf42      	ittt	mi
 8002fe4:	6833      	ldrmi	r3, [r6, #0]
 8002fe6:	3302      	addmi	r3, #2
 8002fe8:	6033      	strmi	r3, [r6, #0]
 8002fea:	6825      	ldr	r5, [r4, #0]
 8002fec:	f015 0506 	ands.w	r5, r5, #6
 8002ff0:	d106      	bne.n	8003000 <_printf_common+0x48>
 8002ff2:	f104 0a19 	add.w	sl, r4, #25
 8002ff6:	68e3      	ldr	r3, [r4, #12]
 8002ff8:	6832      	ldr	r2, [r6, #0]
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	42ab      	cmp	r3, r5
 8002ffe:	dc26      	bgt.n	800304e <_printf_common+0x96>
 8003000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003004:	1e13      	subs	r3, r2, #0
 8003006:	6822      	ldr	r2, [r4, #0]
 8003008:	bf18      	it	ne
 800300a:	2301      	movne	r3, #1
 800300c:	0692      	lsls	r2, r2, #26
 800300e:	d42b      	bmi.n	8003068 <_printf_common+0xb0>
 8003010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003014:	4649      	mov	r1, r9
 8003016:	4638      	mov	r0, r7
 8003018:	47c0      	blx	r8
 800301a:	3001      	adds	r0, #1
 800301c:	d01e      	beq.n	800305c <_printf_common+0xa4>
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	6922      	ldr	r2, [r4, #16]
 8003022:	f003 0306 	and.w	r3, r3, #6
 8003026:	2b04      	cmp	r3, #4
 8003028:	bf02      	ittt	eq
 800302a:	68e5      	ldreq	r5, [r4, #12]
 800302c:	6833      	ldreq	r3, [r6, #0]
 800302e:	1aed      	subeq	r5, r5, r3
 8003030:	68a3      	ldr	r3, [r4, #8]
 8003032:	bf0c      	ite	eq
 8003034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003038:	2500      	movne	r5, #0
 800303a:	4293      	cmp	r3, r2
 800303c:	bfc4      	itt	gt
 800303e:	1a9b      	subgt	r3, r3, r2
 8003040:	18ed      	addgt	r5, r5, r3
 8003042:	2600      	movs	r6, #0
 8003044:	341a      	adds	r4, #26
 8003046:	42b5      	cmp	r5, r6
 8003048:	d11a      	bne.n	8003080 <_printf_common+0xc8>
 800304a:	2000      	movs	r0, #0
 800304c:	e008      	b.n	8003060 <_printf_common+0xa8>
 800304e:	2301      	movs	r3, #1
 8003050:	4652      	mov	r2, sl
 8003052:	4649      	mov	r1, r9
 8003054:	4638      	mov	r0, r7
 8003056:	47c0      	blx	r8
 8003058:	3001      	adds	r0, #1
 800305a:	d103      	bne.n	8003064 <_printf_common+0xac>
 800305c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003064:	3501      	adds	r5, #1
 8003066:	e7c6      	b.n	8002ff6 <_printf_common+0x3e>
 8003068:	18e1      	adds	r1, r4, r3
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	2030      	movs	r0, #48	; 0x30
 800306e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003072:	4422      	add	r2, r4
 8003074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800307c:	3302      	adds	r3, #2
 800307e:	e7c7      	b.n	8003010 <_printf_common+0x58>
 8003080:	2301      	movs	r3, #1
 8003082:	4622      	mov	r2, r4
 8003084:	4649      	mov	r1, r9
 8003086:	4638      	mov	r0, r7
 8003088:	47c0      	blx	r8
 800308a:	3001      	adds	r0, #1
 800308c:	d0e6      	beq.n	800305c <_printf_common+0xa4>
 800308e:	3601      	adds	r6, #1
 8003090:	e7d9      	b.n	8003046 <_printf_common+0x8e>
	...

08003094 <_printf_i>:
 8003094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003098:	7e0f      	ldrb	r7, [r1, #24]
 800309a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800309c:	2f78      	cmp	r7, #120	; 0x78
 800309e:	4691      	mov	r9, r2
 80030a0:	4680      	mov	r8, r0
 80030a2:	460c      	mov	r4, r1
 80030a4:	469a      	mov	sl, r3
 80030a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030aa:	d807      	bhi.n	80030bc <_printf_i+0x28>
 80030ac:	2f62      	cmp	r7, #98	; 0x62
 80030ae:	d80a      	bhi.n	80030c6 <_printf_i+0x32>
 80030b0:	2f00      	cmp	r7, #0
 80030b2:	f000 80d4 	beq.w	800325e <_printf_i+0x1ca>
 80030b6:	2f58      	cmp	r7, #88	; 0x58
 80030b8:	f000 80c0 	beq.w	800323c <_printf_i+0x1a8>
 80030bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030c4:	e03a      	b.n	800313c <_printf_i+0xa8>
 80030c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030ca:	2b15      	cmp	r3, #21
 80030cc:	d8f6      	bhi.n	80030bc <_printf_i+0x28>
 80030ce:	a101      	add	r1, pc, #4	; (adr r1, 80030d4 <_printf_i+0x40>)
 80030d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030d4:	0800312d 	.word	0x0800312d
 80030d8:	08003141 	.word	0x08003141
 80030dc:	080030bd 	.word	0x080030bd
 80030e0:	080030bd 	.word	0x080030bd
 80030e4:	080030bd 	.word	0x080030bd
 80030e8:	080030bd 	.word	0x080030bd
 80030ec:	08003141 	.word	0x08003141
 80030f0:	080030bd 	.word	0x080030bd
 80030f4:	080030bd 	.word	0x080030bd
 80030f8:	080030bd 	.word	0x080030bd
 80030fc:	080030bd 	.word	0x080030bd
 8003100:	08003245 	.word	0x08003245
 8003104:	0800316d 	.word	0x0800316d
 8003108:	080031ff 	.word	0x080031ff
 800310c:	080030bd 	.word	0x080030bd
 8003110:	080030bd 	.word	0x080030bd
 8003114:	08003267 	.word	0x08003267
 8003118:	080030bd 	.word	0x080030bd
 800311c:	0800316d 	.word	0x0800316d
 8003120:	080030bd 	.word	0x080030bd
 8003124:	080030bd 	.word	0x080030bd
 8003128:	08003207 	.word	0x08003207
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	1d1a      	adds	r2, r3, #4
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	602a      	str	r2, [r5, #0]
 8003134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800313c:	2301      	movs	r3, #1
 800313e:	e09f      	b.n	8003280 <_printf_i+0x1ec>
 8003140:	6820      	ldr	r0, [r4, #0]
 8003142:	682b      	ldr	r3, [r5, #0]
 8003144:	0607      	lsls	r7, r0, #24
 8003146:	f103 0104 	add.w	r1, r3, #4
 800314a:	6029      	str	r1, [r5, #0]
 800314c:	d501      	bpl.n	8003152 <_printf_i+0xbe>
 800314e:	681e      	ldr	r6, [r3, #0]
 8003150:	e003      	b.n	800315a <_printf_i+0xc6>
 8003152:	0646      	lsls	r6, r0, #25
 8003154:	d5fb      	bpl.n	800314e <_printf_i+0xba>
 8003156:	f9b3 6000 	ldrsh.w	r6, [r3]
 800315a:	2e00      	cmp	r6, #0
 800315c:	da03      	bge.n	8003166 <_printf_i+0xd2>
 800315e:	232d      	movs	r3, #45	; 0x2d
 8003160:	4276      	negs	r6, r6
 8003162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003166:	485a      	ldr	r0, [pc, #360]	; (80032d0 <_printf_i+0x23c>)
 8003168:	230a      	movs	r3, #10
 800316a:	e012      	b.n	8003192 <_printf_i+0xfe>
 800316c:	682b      	ldr	r3, [r5, #0]
 800316e:	6820      	ldr	r0, [r4, #0]
 8003170:	1d19      	adds	r1, r3, #4
 8003172:	6029      	str	r1, [r5, #0]
 8003174:	0605      	lsls	r5, r0, #24
 8003176:	d501      	bpl.n	800317c <_printf_i+0xe8>
 8003178:	681e      	ldr	r6, [r3, #0]
 800317a:	e002      	b.n	8003182 <_printf_i+0xee>
 800317c:	0641      	lsls	r1, r0, #25
 800317e:	d5fb      	bpl.n	8003178 <_printf_i+0xe4>
 8003180:	881e      	ldrh	r6, [r3, #0]
 8003182:	4853      	ldr	r0, [pc, #332]	; (80032d0 <_printf_i+0x23c>)
 8003184:	2f6f      	cmp	r7, #111	; 0x6f
 8003186:	bf0c      	ite	eq
 8003188:	2308      	moveq	r3, #8
 800318a:	230a      	movne	r3, #10
 800318c:	2100      	movs	r1, #0
 800318e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003192:	6865      	ldr	r5, [r4, #4]
 8003194:	60a5      	str	r5, [r4, #8]
 8003196:	2d00      	cmp	r5, #0
 8003198:	bfa2      	ittt	ge
 800319a:	6821      	ldrge	r1, [r4, #0]
 800319c:	f021 0104 	bicge.w	r1, r1, #4
 80031a0:	6021      	strge	r1, [r4, #0]
 80031a2:	b90e      	cbnz	r6, 80031a8 <_printf_i+0x114>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d04b      	beq.n	8003240 <_printf_i+0x1ac>
 80031a8:	4615      	mov	r5, r2
 80031aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80031ae:	fb03 6711 	mls	r7, r3, r1, r6
 80031b2:	5dc7      	ldrb	r7, [r0, r7]
 80031b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031b8:	4637      	mov	r7, r6
 80031ba:	42bb      	cmp	r3, r7
 80031bc:	460e      	mov	r6, r1
 80031be:	d9f4      	bls.n	80031aa <_printf_i+0x116>
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d10b      	bne.n	80031dc <_printf_i+0x148>
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	07de      	lsls	r6, r3, #31
 80031c8:	d508      	bpl.n	80031dc <_printf_i+0x148>
 80031ca:	6923      	ldr	r3, [r4, #16]
 80031cc:	6861      	ldr	r1, [r4, #4]
 80031ce:	4299      	cmp	r1, r3
 80031d0:	bfde      	ittt	le
 80031d2:	2330      	movle	r3, #48	; 0x30
 80031d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80031dc:	1b52      	subs	r2, r2, r5
 80031de:	6122      	str	r2, [r4, #16]
 80031e0:	f8cd a000 	str.w	sl, [sp]
 80031e4:	464b      	mov	r3, r9
 80031e6:	aa03      	add	r2, sp, #12
 80031e8:	4621      	mov	r1, r4
 80031ea:	4640      	mov	r0, r8
 80031ec:	f7ff fee4 	bl	8002fb8 <_printf_common>
 80031f0:	3001      	adds	r0, #1
 80031f2:	d14a      	bne.n	800328a <_printf_i+0x1f6>
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031f8:	b004      	add	sp, #16
 80031fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	f043 0320 	orr.w	r3, r3, #32
 8003204:	6023      	str	r3, [r4, #0]
 8003206:	4833      	ldr	r0, [pc, #204]	; (80032d4 <_printf_i+0x240>)
 8003208:	2778      	movs	r7, #120	; 0x78
 800320a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	6829      	ldr	r1, [r5, #0]
 8003212:	061f      	lsls	r7, r3, #24
 8003214:	f851 6b04 	ldr.w	r6, [r1], #4
 8003218:	d402      	bmi.n	8003220 <_printf_i+0x18c>
 800321a:	065f      	lsls	r7, r3, #25
 800321c:	bf48      	it	mi
 800321e:	b2b6      	uxthmi	r6, r6
 8003220:	07df      	lsls	r7, r3, #31
 8003222:	bf48      	it	mi
 8003224:	f043 0320 	orrmi.w	r3, r3, #32
 8003228:	6029      	str	r1, [r5, #0]
 800322a:	bf48      	it	mi
 800322c:	6023      	strmi	r3, [r4, #0]
 800322e:	b91e      	cbnz	r6, 8003238 <_printf_i+0x1a4>
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	f023 0320 	bic.w	r3, r3, #32
 8003236:	6023      	str	r3, [r4, #0]
 8003238:	2310      	movs	r3, #16
 800323a:	e7a7      	b.n	800318c <_printf_i+0xf8>
 800323c:	4824      	ldr	r0, [pc, #144]	; (80032d0 <_printf_i+0x23c>)
 800323e:	e7e4      	b.n	800320a <_printf_i+0x176>
 8003240:	4615      	mov	r5, r2
 8003242:	e7bd      	b.n	80031c0 <_printf_i+0x12c>
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	6826      	ldr	r6, [r4, #0]
 8003248:	6961      	ldr	r1, [r4, #20]
 800324a:	1d18      	adds	r0, r3, #4
 800324c:	6028      	str	r0, [r5, #0]
 800324e:	0635      	lsls	r5, r6, #24
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	d501      	bpl.n	8003258 <_printf_i+0x1c4>
 8003254:	6019      	str	r1, [r3, #0]
 8003256:	e002      	b.n	800325e <_printf_i+0x1ca>
 8003258:	0670      	lsls	r0, r6, #25
 800325a:	d5fb      	bpl.n	8003254 <_printf_i+0x1c0>
 800325c:	8019      	strh	r1, [r3, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	6123      	str	r3, [r4, #16]
 8003262:	4615      	mov	r5, r2
 8003264:	e7bc      	b.n	80031e0 <_printf_i+0x14c>
 8003266:	682b      	ldr	r3, [r5, #0]
 8003268:	1d1a      	adds	r2, r3, #4
 800326a:	602a      	str	r2, [r5, #0]
 800326c:	681d      	ldr	r5, [r3, #0]
 800326e:	6862      	ldr	r2, [r4, #4]
 8003270:	2100      	movs	r1, #0
 8003272:	4628      	mov	r0, r5
 8003274:	f7fc ffcc 	bl	8000210 <memchr>
 8003278:	b108      	cbz	r0, 800327e <_printf_i+0x1ea>
 800327a:	1b40      	subs	r0, r0, r5
 800327c:	6060      	str	r0, [r4, #4]
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	6123      	str	r3, [r4, #16]
 8003282:	2300      	movs	r3, #0
 8003284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003288:	e7aa      	b.n	80031e0 <_printf_i+0x14c>
 800328a:	6923      	ldr	r3, [r4, #16]
 800328c:	462a      	mov	r2, r5
 800328e:	4649      	mov	r1, r9
 8003290:	4640      	mov	r0, r8
 8003292:	47d0      	blx	sl
 8003294:	3001      	adds	r0, #1
 8003296:	d0ad      	beq.n	80031f4 <_printf_i+0x160>
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	079b      	lsls	r3, r3, #30
 800329c:	d413      	bmi.n	80032c6 <_printf_i+0x232>
 800329e:	68e0      	ldr	r0, [r4, #12]
 80032a0:	9b03      	ldr	r3, [sp, #12]
 80032a2:	4298      	cmp	r0, r3
 80032a4:	bfb8      	it	lt
 80032a6:	4618      	movlt	r0, r3
 80032a8:	e7a6      	b.n	80031f8 <_printf_i+0x164>
 80032aa:	2301      	movs	r3, #1
 80032ac:	4632      	mov	r2, r6
 80032ae:	4649      	mov	r1, r9
 80032b0:	4640      	mov	r0, r8
 80032b2:	47d0      	blx	sl
 80032b4:	3001      	adds	r0, #1
 80032b6:	d09d      	beq.n	80031f4 <_printf_i+0x160>
 80032b8:	3501      	adds	r5, #1
 80032ba:	68e3      	ldr	r3, [r4, #12]
 80032bc:	9903      	ldr	r1, [sp, #12]
 80032be:	1a5b      	subs	r3, r3, r1
 80032c0:	42ab      	cmp	r3, r5
 80032c2:	dcf2      	bgt.n	80032aa <_printf_i+0x216>
 80032c4:	e7eb      	b.n	800329e <_printf_i+0x20a>
 80032c6:	2500      	movs	r5, #0
 80032c8:	f104 0619 	add.w	r6, r4, #25
 80032cc:	e7f5      	b.n	80032ba <_printf_i+0x226>
 80032ce:	bf00      	nop
 80032d0:	0800346d 	.word	0x0800346d
 80032d4:	0800347e 	.word	0x0800347e

080032d8 <memmove>:
 80032d8:	4288      	cmp	r0, r1
 80032da:	b510      	push	{r4, lr}
 80032dc:	eb01 0402 	add.w	r4, r1, r2
 80032e0:	d902      	bls.n	80032e8 <memmove+0x10>
 80032e2:	4284      	cmp	r4, r0
 80032e4:	4623      	mov	r3, r4
 80032e6:	d807      	bhi.n	80032f8 <memmove+0x20>
 80032e8:	1e43      	subs	r3, r0, #1
 80032ea:	42a1      	cmp	r1, r4
 80032ec:	d008      	beq.n	8003300 <memmove+0x28>
 80032ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032f6:	e7f8      	b.n	80032ea <memmove+0x12>
 80032f8:	4402      	add	r2, r0
 80032fa:	4601      	mov	r1, r0
 80032fc:	428a      	cmp	r2, r1
 80032fe:	d100      	bne.n	8003302 <memmove+0x2a>
 8003300:	bd10      	pop	{r4, pc}
 8003302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800330a:	e7f7      	b.n	80032fc <memmove+0x24>

0800330c <_sbrk_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	4d06      	ldr	r5, [pc, #24]	; (8003328 <_sbrk_r+0x1c>)
 8003310:	2300      	movs	r3, #0
 8003312:	4604      	mov	r4, r0
 8003314:	4608      	mov	r0, r1
 8003316:	602b      	str	r3, [r5, #0]
 8003318:	f7fe faf4 	bl	8001904 <_sbrk>
 800331c:	1c43      	adds	r3, r0, #1
 800331e:	d102      	bne.n	8003326 <_sbrk_r+0x1a>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	b103      	cbz	r3, 8003326 <_sbrk_r+0x1a>
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	200002bc 	.word	0x200002bc

0800332c <memcpy>:
 800332c:	440a      	add	r2, r1
 800332e:	4291      	cmp	r1, r2
 8003330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003334:	d100      	bne.n	8003338 <memcpy+0xc>
 8003336:	4770      	bx	lr
 8003338:	b510      	push	{r4, lr}
 800333a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800333e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003342:	4291      	cmp	r1, r2
 8003344:	d1f9      	bne.n	800333a <memcpy+0xe>
 8003346:	bd10      	pop	{r4, pc}

08003348 <_realloc_r>:
 8003348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334c:	4680      	mov	r8, r0
 800334e:	4614      	mov	r4, r2
 8003350:	460e      	mov	r6, r1
 8003352:	b921      	cbnz	r1, 800335e <_realloc_r+0x16>
 8003354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003358:	4611      	mov	r1, r2
 800335a:	f7ff bc49 	b.w	8002bf0 <_malloc_r>
 800335e:	b92a      	cbnz	r2, 800336c <_realloc_r+0x24>
 8003360:	f7ff fbda 	bl	8002b18 <_free_r>
 8003364:	4625      	mov	r5, r4
 8003366:	4628      	mov	r0, r5
 8003368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800336c:	f000 f81b 	bl	80033a6 <_malloc_usable_size_r>
 8003370:	4284      	cmp	r4, r0
 8003372:	4607      	mov	r7, r0
 8003374:	d802      	bhi.n	800337c <_realloc_r+0x34>
 8003376:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800337a:	d812      	bhi.n	80033a2 <_realloc_r+0x5a>
 800337c:	4621      	mov	r1, r4
 800337e:	4640      	mov	r0, r8
 8003380:	f7ff fc36 	bl	8002bf0 <_malloc_r>
 8003384:	4605      	mov	r5, r0
 8003386:	2800      	cmp	r0, #0
 8003388:	d0ed      	beq.n	8003366 <_realloc_r+0x1e>
 800338a:	42bc      	cmp	r4, r7
 800338c:	4622      	mov	r2, r4
 800338e:	4631      	mov	r1, r6
 8003390:	bf28      	it	cs
 8003392:	463a      	movcs	r2, r7
 8003394:	f7ff ffca 	bl	800332c <memcpy>
 8003398:	4631      	mov	r1, r6
 800339a:	4640      	mov	r0, r8
 800339c:	f7ff fbbc 	bl	8002b18 <_free_r>
 80033a0:	e7e1      	b.n	8003366 <_realloc_r+0x1e>
 80033a2:	4635      	mov	r5, r6
 80033a4:	e7df      	b.n	8003366 <_realloc_r+0x1e>

080033a6 <_malloc_usable_size_r>:
 80033a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033aa:	1f18      	subs	r0, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bfbc      	itt	lt
 80033b0:	580b      	ldrlt	r3, [r1, r0]
 80033b2:	18c0      	addlt	r0, r0, r3
 80033b4:	4770      	bx	lr
	...

080033b8 <_init>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr

080033c4 <_fini>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr
