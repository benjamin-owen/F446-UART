
F446dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004458  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f0  080046f0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046f8  080046f8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000060  08004760  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004760  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000073d7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016fa  00000000  00000000  000274aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  00028ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079c  00000000  00000000  000295f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f040  00000000  00000000  00029d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006901  00000000  00000000  00048dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aae0f  00000000  00000000  0004f6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003460  00000000  00000000  000fa4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000fd93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004610 	.word	0x08004610

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08004610 	.word	0x08004610

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000714:	4a0d      	ldr	r2, [pc, #52]	; (800074c <LL_DMA_SetDataTransferDirection+0x44>)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4413      	add	r3, r2
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000728:	4908      	ldr	r1, [pc, #32]	; (800074c <LL_DMA_SetDataTransferDirection+0x44>)
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	440b      	add	r3, r1
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	440b      	add	r3, r1
 8000736:	4619      	mov	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4313      	orrs	r3, r2
 800073c:	600b      	str	r3, [r1, #0]
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	08004684 	.word	0x08004684

08000750 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <LL_DMA_SetMode+0x44>)
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000770:	4908      	ldr	r1, [pc, #32]	; (8000794 <LL_DMA_SetMode+0x44>)
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	440b      	add	r3, r1
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	440b      	add	r3, r1
 800077e:	4619      	mov	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4313      	orrs	r3, r2
 8000784:	600b      	str	r3, [r1, #0]
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	08004684 	.word	0x08004684

08000798 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <LL_DMA_SetPeriphIncMode+0x44>)
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4413      	add	r3, r2
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80007b8:	4908      	ldr	r1, [pc, #32]	; (80007dc <LL_DMA_SetPeriphIncMode+0x44>)
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	440b      	add	r3, r1
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	440b      	add	r3, r1
 80007c6:	4619      	mov	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	600b      	str	r3, [r1, #0]
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	08004684 	.word	0x08004684

080007e0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <LL_DMA_SetMemoryIncMode+0x44>)
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	4413      	add	r3, r2
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000800:	4908      	ldr	r1, [pc, #32]	; (8000824 <LL_DMA_SetMemoryIncMode+0x44>)
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	440b      	add	r3, r1
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	440b      	add	r3, r1
 800080e:	4619      	mov	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4313      	orrs	r3, r2
 8000814:	600b      	str	r3, [r1, #0]
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	08004684 	.word	0x08004684

08000828 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LL_DMA_SetPeriphSize+0x44>)
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	4413      	add	r3, r2
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000848:	4908      	ldr	r1, [pc, #32]	; (800086c <LL_DMA_SetPeriphSize+0x44>)
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	440b      	add	r3, r1
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	440b      	add	r3, r1
 8000856:	4619      	mov	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4313      	orrs	r3, r2
 800085c:	600b      	str	r3, [r1, #0]
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	08004684 	.word	0x08004684

08000870 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <LL_DMA_SetMemorySize+0x44>)
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	4413      	add	r3, r2
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000890:	4908      	ldr	r1, [pc, #32]	; (80008b4 <LL_DMA_SetMemorySize+0x44>)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	440b      	add	r3, r1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	440b      	add	r3, r1
 800089e:	4619      	mov	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	600b      	str	r3, [r1, #0]
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	08004684 	.word	0x08004684

080008b8 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <LL_DMA_SetStreamPriorityLevel+0x44>)
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008d8:	4908      	ldr	r1, [pc, #32]	; (80008fc <LL_DMA_SetStreamPriorityLevel+0x44>)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	440b      	add	r3, r1
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	440b      	add	r3, r1
 80008e6:	4619      	mov	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	600b      	str	r3, [r1, #0]
}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	08004684 	.word	0x08004684

08000900 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <LL_DMA_SetDataLength+0x44>)
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4413      	add	r3, r2
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	0c1b      	lsrs	r3, r3, #16
 800091e:	041b      	lsls	r3, r3, #16
 8000920:	4908      	ldr	r1, [pc, #32]	; (8000944 <LL_DMA_SetDataLength+0x44>)
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	440a      	add	r2, r1
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	4611      	mov	r1, r2
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	440a      	add	r2, r1
 800092e:	4611      	mov	r1, r2
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	4313      	orrs	r3, r2
 8000934:	604b      	str	r3, [r1, #4]
}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	08004684 	.word	0x08004684

08000948 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <LL_DMA_SetChannelSelection+0x44>)
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4413      	add	r3, r2
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000968:	4908      	ldr	r1, [pc, #32]	; (800098c <LL_DMA_SetChannelSelection+0x44>)
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	440b      	add	r3, r1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	440b      	add	r3, r1
 8000976:	4619      	mov	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4313      	orrs	r3, r2
 800097c:	600b      	str	r3, [r1, #0]
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	08004684 	.word	0x08004684

08000990 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800099a:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <LL_DMA_DisableFifoMode+0x3c>)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4908      	ldr	r1, [pc, #32]	; (80009cc <LL_DMA_DisableFifoMode+0x3c>)
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	440a      	add	r2, r1
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	4611      	mov	r1, r2
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	440a      	add	r2, r1
 80009b8:	f023 0304 	bic.w	r3, r3, #4
 80009bc:	6153      	str	r3, [r2, #20]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	08004684 	.word	0x08004684

080009d0 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	2b40      	cmp	r3, #64	; 0x40
 80009e2:	d114      	bne.n	8000a0e <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <LL_DMA_ConfigAddresses+0x74>)
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4413      	add	r3, r2
 80009f2:	461a      	mov	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <LL_DMA_ConfigAddresses+0x74>)
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4413      	add	r3, r2
 8000a06:	461a      	mov	r2, r3
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 8000a0c:	e013      	b.n	8000a36 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 8000a0e:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <LL_DMA_ConfigAddresses+0x74>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <LL_DMA_ConfigAddresses+0x74>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4413      	add	r3, r2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	461a      	mov	r2, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	60d3      	str	r3, [r2, #12]
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	08004684 	.word	0x08004684

08000a48 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000a52:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <LL_DMA_EnableIT_TC+0x3c>)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4908      	ldr	r1, [pc, #32]	; (8000a84 <LL_DMA_EnableIT_TC+0x3c>)
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	440a      	add	r2, r1
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	440a      	add	r2, r1
 8000a70:	f043 0310 	orr.w	r3, r3, #16
 8000a74:	6013      	str	r3, [r2, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	08004684 	.word	0x08004684

08000a88 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <LL_RCC_HSI_Enable+0x1c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <LL_RCC_HSI_Enable+0x1c>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <LL_RCC_HSI_IsReady+0x20>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	bf0c      	ite	eq
 8000ab8:	2301      	moveq	r3, #1
 8000aba:	2300      	movne	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40023800 	.word	0x40023800

08000acc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	4904      	ldr	r1, [pc, #16]	; (8000af4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	600b      	str	r3, [r1, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <LL_RCC_SetSysClkSource+0x24>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f023 0203 	bic.w	r2, r3, #3
 8000b08:	4904      	ldr	r1, [pc, #16]	; (8000b1c <LL_RCC_SetSysClkSource+0x24>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	608b      	str	r3, [r1, #8]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40023800 	.word	0x40023800

08000b20 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <LL_RCC_GetSysClkSource+0x18>)
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 030c 	and.w	r3, r3, #12
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b4c:	4904      	ldr	r1, [pc, #16]	; (8000b60 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	608b      	str	r3, [r1, #8]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40023800 	.word	0x40023800

08000b64 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000b74:	4904      	ldr	r1, [pc, #16]	; (8000b88 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40023800 	.word	0x40023800

08000b8c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000b9c:	4904      	ldr	r1, [pc, #16]	; (8000bb0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	608b      	str	r3, [r1, #8]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <LL_RCC_SetTIMPrescaler+0x28>)
 8000bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000bc6:	4905      	ldr	r1, [pc, #20]	; (8000bdc <LL_RCC_SetTIMPrescaler+0x28>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40023800 	.word	0x40023800

08000be0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <LL_RCC_PLL_Enable+0x1c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <LL_RCC_PLL_Enable+0x1c>)
 8000bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <LL_RCC_PLL_IsReady+0x24>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c10:	bf0c      	ite	eq
 8000c12:	2301      	moveq	r3, #1
 8000c14:	2300      	movne	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	68f9      	ldr	r1, [r7, #12]
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	4311      	orrs	r1, r2
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	0192      	lsls	r2, r2, #6
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	490c      	ldr	r1, [pc, #48]	; (8000c7c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c58:	4908      	ldr	r1, [pc, #32]	; (8000c7c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8000c68:	4904      	ldr	r1, [pc, #16]	; (8000c7c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	ffbf8000 	.word	0xffbf8000

08000c84 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	40023800 	.word	0x40023800

08000d14 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000d1e:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <LL_SYSCFG_SetEXTISource+0x58>)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	3302      	adds	r3, #2
 8000d26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	ea02 0103 	and.w	r1, r2, r3
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	fa93 f3a3 	rbit	r3, r3
 8000d40:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	fa03 f202 	lsl.w	r2, r3, r2
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <LL_SYSCFG_SetEXTISource+0x58>)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40013800 	.word	0x40013800

08000d70 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <LL_FLASH_SetLatency+0x24>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 020f 	bic.w	r2, r3, #15
 8000d80:	4904      	ldr	r1, [pc, #16]	; (8000d94 <LL_FLASH_SetLatency+0x24>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <LL_FLASH_GetLatency+0x18>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 030f 	and.w	r3, r3, #15
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023c00 	.word	0x40023c00

08000db4 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <LL_PWR_EnableOverDriveMode+0x1c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <LL_PWR_EnableOverDriveMode+0x1c>)
 8000dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000de4:	4904      	ldr	r1, [pc, #16]	; (8000df8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40007000 	.word	0x40007000

08000dfc <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e0c:	bf0c      	ite	eq
 8000e0e:	2301      	moveq	r3, #1
 8000e10:	2300      	movne	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40007000 	.word	0x40007000

08000e24 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f023 0210 	bic.w	r2, r3, #16
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	605a      	str	r2, [r3, #4]
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	330c      	adds	r3, #12
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <LL_SPI_TransmitData16>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	330c      	adds	r3, #12
 8000e96:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	801a      	strh	r2, [r3, #0]
#else
  SPIx->DR = TxData;
#endif /* __GNUC__ */
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d01c      	beq.n	8000f16 <LL_TIM_OC_DisableFast+0x4a>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d017      	beq.n	8000f12 <LL_TIM_OC_DisableFast+0x46>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b10      	cmp	r3, #16
 8000ee6:	d012      	beq.n	8000f0e <LL_TIM_OC_DisableFast+0x42>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2b40      	cmp	r3, #64	; 0x40
 8000eec:	d00d      	beq.n	8000f0a <LL_TIM_OC_DisableFast+0x3e>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef4:	d007      	beq.n	8000f06 <LL_TIM_OC_DisableFast+0x3a>
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000efc:	d101      	bne.n	8000f02 <LL_TIM_OC_DisableFast+0x36>
 8000efe:	2305      	movs	r3, #5
 8000f00:	e00a      	b.n	8000f18 <LL_TIM_OC_DisableFast+0x4c>
 8000f02:	2306      	movs	r3, #6
 8000f04:	e008      	b.n	8000f18 <LL_TIM_OC_DisableFast+0x4c>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e006      	b.n	8000f18 <LL_TIM_OC_DisableFast+0x4c>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <LL_TIM_OC_DisableFast+0x4c>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <LL_TIM_OC_DisableFast+0x4c>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <LL_TIM_OC_DisableFast+0x4c>
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3318      	adds	r3, #24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LL_TIM_OC_DisableFast+0x84>)
 8000f24:	5cd3      	ldrb	r3, [r2, r3]
 8000f26:	440b      	add	r3, r1
 8000f28:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	4908      	ldr	r1, [pc, #32]	; (8000f54 <LL_TIM_OC_DisableFast+0x88>)
 8000f32:	5ccb      	ldrb	r3, [r1, r3]
 8000f34:	4619      	mov	r1, r3
 8000f36:	2304      	movs	r3, #4
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	601a      	str	r2, [r3, #0]

}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	0800468c 	.word	0x0800468c
 8000f54:	08004694 	.word	0x08004694

08000f58 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d01c      	beq.n	8000fa2 <LL_TIM_OC_EnablePreload+0x4a>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d017      	beq.n	8000f9e <LL_TIM_OC_EnablePreload+0x46>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d012      	beq.n	8000f9a <LL_TIM_OC_EnablePreload+0x42>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b40      	cmp	r3, #64	; 0x40
 8000f78:	d00d      	beq.n	8000f96 <LL_TIM_OC_EnablePreload+0x3e>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f80:	d007      	beq.n	8000f92 <LL_TIM_OC_EnablePreload+0x3a>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f88:	d101      	bne.n	8000f8e <LL_TIM_OC_EnablePreload+0x36>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e00a      	b.n	8000fa4 <LL_TIM_OC_EnablePreload+0x4c>
 8000f8e:	2306      	movs	r3, #6
 8000f90:	e008      	b.n	8000fa4 <LL_TIM_OC_EnablePreload+0x4c>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <LL_TIM_OC_EnablePreload+0x4c>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <LL_TIM_OC_EnablePreload+0x4c>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <LL_TIM_OC_EnablePreload+0x4c>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <LL_TIM_OC_EnablePreload+0x4c>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3318      	adds	r3, #24
 8000faa:	4619      	mov	r1, r3
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <LL_TIM_OC_EnablePreload+0x80>)
 8000fb0:	5cd3      	ldrb	r3, [r2, r3]
 8000fb2:	440b      	add	r3, r1
 8000fb4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	4907      	ldr	r1, [pc, #28]	; (8000fdc <LL_TIM_OC_EnablePreload+0x84>)
 8000fbe:	5ccb      	ldrb	r3, [r1, r3]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	408b      	lsls	r3, r1
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	0800468c 	.word	0x0800468c
 8000fdc:	08004694 	.word	0x08004694

08000fe0 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800100e:	f023 0307 	bic.w	r3, r3, #7
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	609a      	str	r2, [r3, #8]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60da      	str	r2, [r3, #12]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	615a      	str	r2, [r3, #20]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c8:	2b80      	cmp	r3, #128	; 0x80
 80010ca:	bf0c      	ite	eq
 80010cc:	2301      	moveq	r3, #1
 80010ce:	2300      	movne	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80010de:	b480      	push	{r7}
 80010e0:	b089      	sub	sp, #36	; 0x24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	330c      	adds	r3, #12
 80010ea:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	e853 3f00 	ldrex	r3, [r3]
 80010f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	f043 0320 	orr.w	r3, r3, #32
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	330c      	adds	r3, #12
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	61ba      	str	r2, [r7, #24]
 8001104:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001106:	6979      	ldr	r1, [r7, #20]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	e841 2300 	strex	r3, r2, [r1]
 800110e:	613b      	str	r3, [r7, #16]
   return(result);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1e7      	bne.n	80010e6 <LL_USART_EnableIT_RXNE+0x8>
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3724      	adds	r7, #36	; 0x24
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3314      	adds	r3, #20
 8001130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	e853 3f00 	ldrex	r3, [r3]
 8001138:	60bb      	str	r3, [r7, #8]
   return(result);
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3314      	adds	r3, #20
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	61ba      	str	r2, [r7, #24]
 800114a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800114c:	6979      	ldr	r1, [r7, #20]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	e841 2300 	strex	r3, r2, [r1]
 8001154:	613b      	str	r3, [r7, #16]
   return(result);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1e7      	bne.n	800112c <LL_USART_EnableDMAReq_TX+0x8>
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3304      	adds	r3, #4
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800118e:	78fa      	ldrb	r2, [r7, #3]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	605a      	str	r2, [r3, #4]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	613b      	str	r3, [r7, #16]
  return result;
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	fab3 f383 	clz	r3, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2103      	movs	r1, #3
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	401a      	ands	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	fa93 f3a3 	rbit	r3, r3
 80011da:	61bb      	str	r3, [r7, #24]
  return result;
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fab3 f383 	clz	r3, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	431a      	orrs	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	601a      	str	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80011fe:	b480      	push	{r7}
 8001200:	b089      	sub	sp, #36	; 0x24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	613b      	str	r3, [r7, #16]
  return result;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	fab3 f383 	clz	r3, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2103      	movs	r1, #3
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	401a      	ands	r2, r3
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	61bb      	str	r3, [r7, #24]
  return result;
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	431a      	orrs	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	60da      	str	r2, [r3, #12]
}
 8001250:	bf00      	nop
 8001252:	3724      	adds	r7, #36	; 0x24
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	619a      	str	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b092      	sub	sp, #72	; 0x48
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800129e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012a2:	f7ff fd1f 	bl	8000ce4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80012a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80012aa:	f7ff fd03 	bl	8000cb4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ae:	2007      	movs	r0, #7
 80012b0:	f7ff f97c 	bl	80005ac <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f85a 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f000 fade 	bl	8001878 <MX_GPIO_Init>
  MX_DMA_Init();
 80012bc:	f000 fac4 	bl	8001848 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012c0:	f000 f9aa 	bl	8001618 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80012c4:	f000 fa46 	bl	8001754 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80012c8:	f000 f932 	bl	8001530 <MX_TIM3_Init>
  MX_SPI2_Init();
 80012cc:	f000 f8a0 	bl	8001410 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t welcome_msg[] = "\e[2J\e[HAMP Kart UART Interface\r\n=======================\r\n";
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <main+0xc0>)
 80012d2:	1d3c      	adds	r4, r7, #4
 80012d4:	461d      	mov	r5, r3
 80012d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012e6:	c403      	stmia	r4!, {r0, r1}
 80012e8:	8022      	strh	r2, [r4, #0]
//  HAL_UART_Transmit_IT(&huart2, welcome_msg, sizeof(welcome_msg));
  for (int i = 0; i < sizeof(welcome_msg); i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	647b      	str	r3, [r7, #68]	; 0x44
 80012ee:	e011      	b.n	8001314 <main+0x7c>
  {
	  LL_USART_TransmitData8(USART2, welcome_msg[i]);
 80012f0:	1d3a      	adds	r2, r7, #4
 80012f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4818      	ldr	r0, [pc, #96]	; (800135c <main+0xc4>)
 80012fc:	f7ff ff41 	bl	8001182 <LL_USART_TransmitData8>
	  while (!LL_USART_IsActiveFlag_TXE(USART2));
 8001300:	bf00      	nop
 8001302:	4816      	ldr	r0, [pc, #88]	; (800135c <main+0xc4>)
 8001304:	f7ff fed8 	bl	80010b8 <LL_USART_IsActiveFlag_TXE>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f9      	beq.n	8001302 <main+0x6a>
  for (int i = 0; i < sizeof(welcome_msg); i++)
 800130e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001310:	3301      	adds	r3, #1
 8001312:	647b      	str	r3, [r7, #68]	; 0x44
 8001314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001316:	2b39      	cmp	r3, #57	; 0x39
 8001318:	d9ea      	bls.n	80012f0 <main+0x58>
  }

  // read version number from RFM95W
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_3); // RFM95W RST
 800131a:	2108      	movs	r1, #8
 800131c:	4810      	ldr	r0, [pc, #64]	; (8001360 <main+0xc8>)
 800131e:	f7ff ffab 	bl	8001278 <LL_GPIO_ResetOutputPin>
//  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12); // SPI2 CS
  uint16_t RFM95_REGISTER_VERSION = 0x42 << 8;
 8001322:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001326:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  LL_SPI_TransmitData16(SPI2, RFM95_REGISTER_VERSION);
 800132a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800132e:	4619      	mov	r1, r3
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <main+0xcc>)
 8001332:	f7ff fda8 	bl	8000e86 <LL_SPI_TransmitData16>
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8001336:	2120      	movs	r1, #32
 8001338:	480b      	ldr	r0, [pc, #44]	; (8001368 <main+0xd0>)
 800133a:	f7ff ff8f 	bl	800125c <LL_GPIO_SetOutputPin>
  uint8_t recv_data = LL_SPI_ReceiveData8(SPI2);
 800133e:	4809      	ldr	r0, [pc, #36]	; (8001364 <main+0xcc>)
 8001340:	f7ff fd93 	bl	8000e6a <LL_SPI_ReceiveData8>
 8001344:	4603      	mov	r3, r0
 8001346:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
//  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_12); // SPI2 CS
  printf(recv_data);
 800134a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800134e:	4618      	mov	r0, r3
 8001350:	f002 f910 	bl	8003574 <iprintf>

  while (1)
 8001354:	e7fe      	b.n	8001354 <main+0xbc>
 8001356:	bf00      	nop
 8001358:	08004628 	.word	0x08004628
 800135c:	40004400 	.word	0x40004400
 8001360:	40020800 	.word	0x40020800
 8001364:	40003800 	.word	0x40003800
 8001368:	40020000 	.word	0x40020000

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001370:	2005      	movs	r0, #5
 8001372:	f7ff fcfd 	bl	8000d70 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001376:	bf00      	nop
 8001378:	f7ff fd0e 	bl	8000d98 <LL_FLASH_GetLatency>
 800137c:	4603      	mov	r3, r0
 800137e:	2b05      	cmp	r3, #5
 8001380:	d1fa      	bne.n	8001378 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001382:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001386:	f7ff fd25 	bl	8000dd4 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800138a:	f7ff fd13 	bl	8000db4 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSI_SetCalibTrimming(16);
 800138e:	2010      	movs	r0, #16
 8001390:	f7ff fb9c 	bl	8000acc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001394:	f7ff fb78 	bl	8000a88 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001398:	bf00      	nop
 800139a:	f7ff fb85 	bl	8000aa8 <LL_RCC_HSI_IsReady>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d1fa      	bne.n	800139a <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 180, LL_RCC_PLLP_DIV_2);
 80013a4:	2300      	movs	r3, #0
 80013a6:	22b4      	movs	r2, #180	; 0xb4
 80013a8:	2108      	movs	r1, #8
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fc3c 	bl	8000c28 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80013b0:	f7ff fc16 	bl	8000be0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80013b4:	bf00      	nop
 80013b6:	f7ff fc23 	bl	8000c00 <LL_RCC_PLL_IsReady>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d1fa      	bne.n	80013b6 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80013c0:	bf00      	nop
 80013c2:	f7ff fd1b 	bl	8000dfc <LL_PWR_IsActiveFlag_VOS>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0fa      	beq.n	80013c2 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff fbb5 	bl	8000b3c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80013d2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80013d6:	f7ff fbc5 	bl	8000b64 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80013da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013de:	f7ff fbd5 	bl	8000b8c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80013e2:	2002      	movs	r0, #2
 80013e4:	f7ff fb88 	bl	8000af8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80013e8:	bf00      	nop
 80013ea:	f7ff fb99 	bl	8000b20 <LL_RCC_GetSysClkSource>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d1fa      	bne.n	80013ea <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <SystemClock_Config+0xa0>)
 80013f6:	f001 ffdd 	bl	80033b4 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <SystemClock_Config+0xa0>)
 80013fc:	f001 ffe8 	bl	80033d0 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fbd7 	bl	8000bb4 <LL_RCC_SetTIMPrescaler>
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	0aba9500 	.word	0x0aba9500

08001410 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b090      	sub	sp, #64	; 0x40
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2228      	movs	r2, #40	; 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f002 f91d 	bl	800365e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001434:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001438:	f7ff fc3c 	bl	8000cb4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800143c:	2004      	movs	r0, #4
 800143e:	f7ff fc21 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001442:	2002      	movs	r0, #2
 8001444:	f7ff fc1e 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>
  PC1   ------> SPI2_MOSI
  PC2   ------> SPI2_MISO
  PB13   ------> SPI2_SCK
  PB4   ------> SPI2_NSS
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001448:	2302      	movs	r3, #2
 800144a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800144c:	2302      	movs	r3, #2
 800144e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800145c:	2307      	movs	r3, #7
 800145e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	463b      	mov	r3, r7
 8001462:	4619      	mov	r1, r3
 8001464:	482f      	ldr	r0, [pc, #188]	; (8001524 <MX_SPI2_Init+0x114>)
 8001466:	f000 ff4f 	bl	8002308 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800146a:	2304      	movs	r3, #4
 800146c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800146e:	2302      	movs	r3, #2
 8001470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800147e:	2305      	movs	r3, #5
 8001480:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	463b      	mov	r3, r7
 8001484:	4619      	mov	r1, r3
 8001486:	4827      	ldr	r0, [pc, #156]	; (8001524 <MX_SPI2_Init+0x114>)
 8001488:	f000 ff3e 	bl	8002308 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001492:	2302      	movs	r3, #2
 8001494:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80014a2:	2305      	movs	r3, #5
 80014a4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	481f      	ldr	r0, [pc, #124]	; (8001528 <MX_SPI2_Init+0x118>)
 80014ac:	f000 ff2c 	bl	8002308 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80014b0:	2310      	movs	r3, #16
 80014b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014b4:	2302      	movs	r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80014c4:	2307      	movs	r3, #7
 80014c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4816      	ldr	r0, [pc, #88]	; (8001528 <MX_SPI2_Init+0x118>)
 80014ce:	f000 ff1b 	bl	8002308 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80014d6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80014da:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 80014dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014e0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 80014ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256;
 80014f0:	2338      	movs	r3, #56	; 0x38
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80014f4:	2300      	movs	r3, #0
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80014fc:	230a      	movs	r3, #10
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	4619      	mov	r1, r3
 8001506:	4809      	ldr	r0, [pc, #36]	; (800152c <MX_SPI2_Init+0x11c>)
 8001508:	f001 f90d 	bl	8002726 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800150c:	2100      	movs	r1, #0
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_SPI2_Init+0x11c>)
 8001510:	f7ff fc98 	bl	8000e44 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */
  LL_SPI_Enable(SPI2);
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_SPI2_Init+0x11c>)
 8001516:	f7ff fc85 	bl	8000e24 <LL_SPI_Enable>
  /* USER CODE END SPI2_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3740      	adds	r7, #64	; 0x40
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40020800 	.word	0x40020800
 8001528:	40020400 	.word	0x40020400
 800152c:	40003800 	.word	0x40003800

08001530 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001536:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	2220      	movs	r2, #32
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f002 f885 	bl	800365e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
 8001562:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff fba5 	bl	8000cb4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_TIM_OC_SetCompareCH1(TIM3, 5); // 50% PWM
 800156a:	2105      	movs	r1, #5
 800156c:	4828      	ldr	r0, [pc, #160]	; (8001610 <MX_TIM3_Init+0xe0>)
 800156e:	f7ff fd37 	bl	8000fe0 <LL_TIM_OC_SetCompareCH1>
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 44999;
 8001572:	f64a 73c7 	movw	r3, #44999	; 0xafc7
 8001576:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001578:	2300      	movs	r3, #0
 800157a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 9;
 800157c:	2309      	movs	r3, #9
 800157e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001584:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001588:	4619      	mov	r1, r3
 800158a:	4821      	ldr	r0, [pc, #132]	; (8001610 <MX_TIM3_Init+0xe0>)
 800158c:	f001 f990 	bl	80028b0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001590:	481f      	ldr	r0, [pc, #124]	; (8001610 <MX_TIM3_Init+0xe0>)
 8001592:	f7ff fc8a 	bl	8000eaa <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001596:	2100      	movs	r1, #0
 8001598:	481d      	ldr	r0, [pc, #116]	; (8001610 <MX_TIM3_Init+0xe0>)
 800159a:	f7ff fd2f 	bl	8000ffc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 800159e:	2101      	movs	r1, #1
 80015a0:	481b      	ldr	r0, [pc, #108]	; (8001610 <MX_TIM3_Init+0xe0>)
 80015a2:	f7ff fcd9 	bl	8000f58 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
 80015a8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	461a      	mov	r2, r3
 80015c0:	2101      	movs	r1, #1
 80015c2:	4813      	ldr	r0, [pc, #76]	; (8001610 <MX_TIM3_Init+0xe0>)
 80015c4:	f001 fa0e 	bl	80029e4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80015c8:	2101      	movs	r1, #1
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_TIM3_Init+0xe0>)
 80015cc:	f7ff fc7e 	bl	8000ecc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80015d0:	2100      	movs	r1, #0
 80015d2:	480f      	ldr	r0, [pc, #60]	; (8001610 <MX_TIM3_Init+0xe0>)
 80015d4:	f7ff fd27 	bl	8001026 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_TIM3_Init+0xe0>)
 80015da:	f7ff fd37 	bl	800104c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80015de:	2004      	movs	r0, #4
 80015e0:	f7ff fb50 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80015e4:	2340      	movs	r3, #64	; 0x40
 80015e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_TIM3_Init+0xe4>)
 8001602:	f000 fe81 	bl	8002308 <LL_GPIO_Init>

}
 8001606:	bf00      	nop
 8001608:	3750      	adds	r7, #80	; 0x50
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40000400 	.word	0x40000400
 8001614:	40020800 	.word	0x40020800

08001618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b091      	sub	sp, #68	; 0x44
 800161c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]
 800162e:	615a      	str	r2, [r3, #20]
 8001630:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
 8001640:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001642:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001646:	f7ff fb35 	bl	8000cb4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fb1a 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001650:	230c      	movs	r3, #12
 8001652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001654:	2302      	movs	r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001664:	2307      	movs	r3, #7
 8001666:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	4619      	mov	r1, r3
 800166c:	4835      	ldr	r0, [pc, #212]	; (8001744 <MX_USART2_UART_Init+0x12c>)
 800166e:	f000 fe4b 	bl	8002308 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8001672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001676:	2106      	movs	r1, #6
 8001678:	4833      	ldr	r0, [pc, #204]	; (8001748 <MX_USART2_UART_Init+0x130>)
 800167a:	f7ff f965 	bl	8000948 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800167e:	2240      	movs	r2, #64	; 0x40
 8001680:	2106      	movs	r1, #6
 8001682:	4831      	ldr	r0, [pc, #196]	; (8001748 <MX_USART2_UART_Init+0x130>)
 8001684:	f7ff f840 	bl	8000708 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8001688:	2200      	movs	r2, #0
 800168a:	2106      	movs	r1, #6
 800168c:	482e      	ldr	r0, [pc, #184]	; (8001748 <MX_USART2_UART_Init+0x130>)
 800168e:	f7ff f913 	bl	80008b8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8001692:	2200      	movs	r2, #0
 8001694:	2106      	movs	r1, #6
 8001696:	482c      	ldr	r0, [pc, #176]	; (8001748 <MX_USART2_UART_Init+0x130>)
 8001698:	f7ff f85a 	bl	8000750 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800169c:	2200      	movs	r2, #0
 800169e:	2106      	movs	r1, #6
 80016a0:	4829      	ldr	r0, [pc, #164]	; (8001748 <MX_USART2_UART_Init+0x130>)
 80016a2:	f7ff f879 	bl	8000798 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 80016a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016aa:	2106      	movs	r1, #6
 80016ac:	4826      	ldr	r0, [pc, #152]	; (8001748 <MX_USART2_UART_Init+0x130>)
 80016ae:	f7ff f897 	bl	80007e0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2106      	movs	r1, #6
 80016b6:	4824      	ldr	r0, [pc, #144]	; (8001748 <MX_USART2_UART_Init+0x130>)
 80016b8:	f7ff f8b6 	bl	8000828 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 80016bc:	2200      	movs	r2, #0
 80016be:	2106      	movs	r1, #6
 80016c0:	4821      	ldr	r0, [pc, #132]	; (8001748 <MX_USART2_UART_Init+0x130>)
 80016c2:	f7ff f8d5 	bl	8000870 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 80016c6:	2106      	movs	r1, #6
 80016c8:	481f      	ldr	r0, [pc, #124]	; (8001748 <MX_USART2_UART_Init+0x130>)
 80016ca:	f7ff f961 	bl	8000990 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART2_Init 1 */
  LL_USART_EnableIT_RXNE(USART2);
 80016ce:	481f      	ldr	r0, [pc, #124]	; (800174c <MX_USART2_UART_Init+0x134>)
 80016d0:	f7ff fd05 	bl	80010de <LL_USART_EnableIT_RXNE>

  // DMA for TX
  LL_USART_EnableDMAReq_TX(USART2);
 80016d4:	481d      	ldr	r0, [pc, #116]	; (800174c <MX_USART2_UART_Init+0x134>)
 80016d6:	f7ff fd25 	bl	8001124 <LL_USART_EnableDMAReq_TX>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_STREAM_6, (uint32_t) buffer, LL_USART_DMA_GetRegAddr(USART2), LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80016da:	4c1d      	ldr	r4, [pc, #116]	; (8001750 <MX_USART2_UART_Init+0x138>)
 80016dc:	481b      	ldr	r0, [pc, #108]	; (800174c <MX_USART2_UART_Init+0x134>)
 80016de:	f7ff fd44 	bl	800116a <LL_USART_DMA_GetRegAddr>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2240      	movs	r2, #64	; 0x40
 80016e6:	9200      	str	r2, [sp, #0]
 80016e8:	4622      	mov	r2, r4
 80016ea:	2106      	movs	r1, #6
 80016ec:	4816      	ldr	r0, [pc, #88]	; (8001748 <MX_USART2_UART_Init+0x130>)
 80016ee:	f7ff f96f 	bl	80009d0 <LL_DMA_ConfigAddresses>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_6);
 80016f2:	2106      	movs	r1, #6
 80016f4:	4814      	ldr	r0, [pc, #80]	; (8001748 <MX_USART2_UART_Init+0x130>)
 80016f6:	f7ff f9a7 	bl	8000a48 <LL_DMA_EnableIT_TC>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, sizeof(buffer));
 80016fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fe:	2106      	movs	r1, #6
 8001700:	4811      	ldr	r0, [pc, #68]	; (8001748 <MX_USART2_UART_Init+0x130>)
 8001702:	f7ff f8fd 	bl	8000900 <LL_DMA_SetDataLength>
//  LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
//  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_6, 5);

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001706:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800170a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001714:	2300      	movs	r3, #0
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001718:	230c      	movs	r3, #12
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001720:	2300      	movs	r3, #0
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	4808      	ldr	r0, [pc, #32]	; (800174c <MX_USART2_UART_Init+0x134>)
 800172c:	f001 fda8 	bl	8003280 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001730:	4806      	ldr	r0, [pc, #24]	; (800174c <MX_USART2_UART_Init+0x134>)
 8001732:	f7ff fcab 	bl	800108c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART2_UART_Init+0x134>)
 8001738:	f7ff fc98 	bl	800106c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	373c      	adds	r7, #60	; 0x3c
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	40020000 	.word	0x40020000
 8001748:	40026000 	.word	0x40026000
 800174c:	40004400 	.word	0x40004400
 8001750:	2000007c 	.word	0x2000007c

08001754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
 800177c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800177e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001782:	f7ff fa97 	bl	8000cb4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001786:	2004      	movs	r0, #4
 8001788:	f7ff fa7c 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800178c:	2002      	movs	r0, #2
 800178e:	f7ff fa79 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001792:	2320      	movs	r3, #32
 8001794:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001796:	2302      	movs	r3, #2
 8001798:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80017a6:	2307      	movs	r3, #7
 80017a8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	4823      	ldr	r0, [pc, #140]	; (800183c <MX_USART3_UART_Init+0xe8>)
 80017b0:	f000 fdaa 	bl	8002308 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80017b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017ba:	2302      	movs	r3, #2
 80017bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80017ca:	2307      	movs	r3, #7
 80017cc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	481b      	ldr	r0, [pc, #108]	; (8001840 <MX_USART3_UART_Init+0xec>)
 80017d4:	f000 fd98 	bl	8002308 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017d8:	f7fe ff0c 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 80017dc:	4603      	mov	r3, r0
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe ff5c 	bl	80006a0 <NVIC_EncodePriority>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4619      	mov	r1, r3
 80017ec:	2027      	movs	r0, #39	; 0x27
 80017ee:	f7fe ff2d 	bl	800064c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80017f2:	2027      	movs	r0, #39	; 0x27
 80017f4:	f7fe ff0c 	bl	8000610 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */
  LL_USART_EnableIT_RXNE(USART3);
 80017f8:	4812      	ldr	r0, [pc, #72]	; (8001844 <MX_USART3_UART_Init+0xf0>)
 80017fa:	f7ff fc70 	bl	80010de <LL_USART_EnableIT_RXNE>

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80017fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001802:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001810:	230c      	movs	r3, #12
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001814:	2300      	movs	r3, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	4808      	ldr	r0, [pc, #32]	; (8001844 <MX_USART3_UART_Init+0xf0>)
 8001824:	f001 fd2c 	bl	8003280 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001828:	4806      	ldr	r0, [pc, #24]	; (8001844 <MX_USART3_UART_Init+0xf0>)
 800182a:	f7ff fc2f 	bl	800108c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_USART3_UART_Init+0xf0>)
 8001830:	f7ff fc1c 	bl	800106c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	3738      	adds	r7, #56	; 0x38
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40020800 	.word	0x40020800
 8001840:	40020400 	.word	0x40020400
 8001844:	40004800 	.word	0x40004800

08001848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800184c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001850:	f7ff fa18 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001854:	f7fe fece 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8001858:	4603      	mov	r3, r0
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe ff1e 	bl	80006a0 <NVIC_EncodePriority>
 8001864:	4603      	mov	r3, r0
 8001866:	4619      	mov	r1, r3
 8001868:	2011      	movs	r0, #17
 800186a:	f7fe feef 	bl	800064c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800186e:	2011      	movs	r0, #17
 8001870:	f7fe fece 	bl	8000610 <__NVIC_EnableIRQ>

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800187e:	f107 0318 	add.w	r3, r7, #24
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	463b      	mov	r3, r7
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001898:	2004      	movs	r0, #4
 800189a:	f7ff f9f3 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800189e:	2080      	movs	r0, #128	; 0x80
 80018a0:	f7ff f9f0 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff f9ed 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018aa:	2002      	movs	r0, #2
 80018ac:	f7ff f9ea 	bl	8000c84 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(RFM_RST_GPIO_Port, RFM_RST_Pin);
 80018b0:	2108      	movs	r1, #8
 80018b2:	4844      	ldr	r0, [pc, #272]	; (80019c4 <MX_GPIO_Init+0x14c>)
 80018b4:	f7ff fce0 	bl	8001278 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80018b8:	2120      	movs	r1, #32
 80018ba:	4843      	ldr	r0, [pc, #268]	; (80019c8 <MX_GPIO_Init+0x150>)
 80018bc:	f7ff fcdc 	bl	8001278 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_Port, SPI2_CS_Pin);
 80018c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c4:	4841      	ldr	r0, [pc, #260]	; (80019cc <MX_GPIO_Init+0x154>)
 80018c6:	f7ff fcd7 	bl	8001278 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80018ca:	4941      	ldr	r1, [pc, #260]	; (80019d0 <MX_GPIO_Init+0x158>)
 80018cc:	2002      	movs	r0, #2
 80018ce:	f7ff fa21 	bl	8000d14 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE0);
 80018d2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80018d6:	2002      	movs	r0, #2
 80018d8:	f7ff fa1c 	bl	8000d14 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80018dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e0:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80018e2:	2301      	movs	r3, #1
 80018e4:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80018ea:	2302      	movs	r3, #2
 80018ec:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80018ee:	f107 0318 	add.w	r3, r7, #24
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fb84 	bl	8002000 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80018f8:	2301      	movs	r3, #1
 80018fa:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80018fc:	2301      	movs	r3, #1
 80018fe:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001900:	2300      	movs	r3, #0
 8001902:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001904:	2301      	movs	r3, #1
 8001906:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001908:	f107 0318 	add.w	r3, r7, #24
 800190c:	4618      	mov	r0, r3
 800190e:	f000 fb77 	bl	8002000 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(Blue_user_button_GPIO_Port, Blue_user_button_Pin, LL_GPIO_PULL_UP);
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001918:	482a      	ldr	r0, [pc, #168]	; (80019c4 <MX_GPIO_Init+0x14c>)
 800191a:	f7ff fc70 	bl	80011fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(RFM_G0_GPIO_Port, RFM_G0_Pin, LL_GPIO_PULL_NO);
 800191e:	2200      	movs	r2, #0
 8001920:	2101      	movs	r1, #1
 8001922:	4828      	ldr	r0, [pc, #160]	; (80019c4 <MX_GPIO_Init+0x14c>)
 8001924:	f7ff fc6b 	bl	80011fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(Blue_user_button_GPIO_Port, Blue_user_button_Pin, LL_GPIO_MODE_INPUT);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192e:	4825      	ldr	r0, [pc, #148]	; (80019c4 <MX_GPIO_Init+0x14c>)
 8001930:	f7ff fc36 	bl	80011a0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(RFM_G0_GPIO_Port, RFM_G0_Pin, LL_GPIO_MODE_INPUT);
 8001934:	2200      	movs	r2, #0
 8001936:	2101      	movs	r1, #1
 8001938:	4822      	ldr	r0, [pc, #136]	; (80019c4 <MX_GPIO_Init+0x14c>)
 800193a:	f7ff fc31 	bl	80011a0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = RFM_RST_Pin;
 800193e:	2308      	movs	r3, #8
 8001940:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001942:	2301      	movs	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RFM_RST_GPIO_Port, &GPIO_InitStruct);
 8001952:	463b      	mov	r3, r7
 8001954:	4619      	mov	r1, r3
 8001956:	481b      	ldr	r0, [pc, #108]	; (80019c4 <MX_GPIO_Init+0x14c>)
 8001958:	f000 fcd6 	bl	8002308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800195c:	2320      	movs	r3, #32
 800195e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001960:	2301      	movs	r3, #1
 8001962:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4814      	ldr	r0, [pc, #80]	; (80019c8 <MX_GPIO_Init+0x150>)
 8001976:	f000 fcc7 	bl	8002308 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800197a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001980:	2301      	movs	r3, #1
 8001982:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <MX_GPIO_Init+0x154>)
 8001996:	f000 fcb7 	bl	8002308 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800199a:	f7fe fe2b 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 800199e:	4603      	mov	r3, r0
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fe7b 	bl	80006a0 <NVIC_EncodePriority>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4619      	mov	r1, r3
 80019ae:	2028      	movs	r0, #40	; 0x28
 80019b0:	f7fe fe4c 	bl	800064c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019b4:	2028      	movs	r0, #40	; 0x28
 80019b6:	f7fe fe2b 	bl	8000610 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ba:	bf00      	nop
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400
 80019d0:	00f00003 	.word	0x00f00003

080019d4 <LL_DMA_EnableStream>:
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80019de:	4a0c      	ldr	r2, [pc, #48]	; (8001a10 <LL_DMA_EnableStream+0x3c>)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <LL_DMA_EnableStream+0x3c>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	440a      	add	r2, r1
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	4611      	mov	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	440a      	add	r2, r1
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6013      	str	r3, [r2, #0]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	0800469c 	.word	0x0800469c

08001a14 <LL_DMA_IsActiveFlag_TC6>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_DMA_ClearFlag_TC6>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a4a:	60da      	str	r2, [r3, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4013      	ands	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	bf0c      	ite	eq
 8001a6e:	2301      	moveq	r3, #1
 8001a70:	2300      	movne	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40013c00 	.word	0x40013c00

08001a84 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6153      	str	r3, [r2, #20]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <LL_USART_IsActiveFlag_PE>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_USART_IsActiveFlag_FE>:
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_USART_IsActiveFlag_ORE>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_USART_IsActiveFlag_RXNE>:
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	bf0c      	ite	eq
 8001b2a:	2301      	moveq	r3, #1
 8001b2c:	2300      	movne	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_USART_ClearFlag_RXNE>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f06f 0220 	mvn.w	r2, #32
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_USART_ReceiveData8>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	b2db      	uxtb	r3, r3
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4013      	ands	r3, r2
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43d9      	mvns	r1, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	400b      	ands	r3, r1
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <NMI_Handler+0x4>

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if (LL_DMA_IsActiveFlag_TC6(DMA1))
 8001c00:	4808      	ldr	r0, [pc, #32]	; (8001c24 <DMA1_Stream6_IRQHandler+0x28>)
 8001c02:	f7ff ff07 	bl	8001a14 <LL_DMA_IsActiveFlag_TC6>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <DMA1_Stream6_IRQHandler+0x22>
	{
		LL_DMA_ClearFlag_TC6(DMA1);
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <DMA1_Stream6_IRQHandler+0x28>)
 8001c0e:	f7ff ff15 	bl	8001a3c <LL_DMA_ClearFlag_TC6>
		memset(buffer, 0, sizeof(buffer));
 8001c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c16:	2100      	movs	r1, #0
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <DMA1_Stream6_IRQHandler+0x2c>)
 8001c1a:	f001 fd20 	bl	800365e <memset>
  /* USER CODE END DMA1_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40026000 	.word	0x40026000
 8001c28:	2000007c 	.word	0x2000007c

08001c2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c2c:	b598      	push	{r3, r4, r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART3))
 8001c30:	4827      	ldr	r0, [pc, #156]	; (8001cd0 <USART3_IRQHandler+0xa4>)
 8001c32:	f7ff ff70 	bl	8001b16 <LL_USART_IsActiveFlag_RXNE>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d048      	beq.n	8001cce <USART3_IRQHandler+0xa2>
	{
		LL_USART_ClearFlag_RXNE(USART3);
 8001c3c:	4824      	ldr	r0, [pc, #144]	; (8001cd0 <USART3_IRQHandler+0xa4>)
 8001c3e:	f7ff ff7d 	bl	8001b3c <LL_USART_ClearFlag_RXNE>

		buffer[size] = LL_USART_ReceiveData8(USART3);
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <USART3_IRQHandler+0xa8>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461c      	mov	r4, r3
 8001c48:	4821      	ldr	r0, [pc, #132]	; (8001cd0 <USART3_IRQHandler+0xa4>)
 8001c4a:	f7ff ff85 	bl	8001b58 <LL_USART_ReceiveData8>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <USART3_IRQHandler+0xac>)
 8001c54:	551a      	strb	r2, [r3, r4]

		if ((size == 0) && (buffer[0] != 'A'))
 8001c56:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <USART3_IRQHandler+0xa8>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <USART3_IRQHandler+0x3a>
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <USART3_IRQHandler+0xac>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b41      	cmp	r3, #65	; 0x41
 8001c64:	d132      	bne.n	8001ccc <USART3_IRQHandler+0xa0>
		{
			return;
		}
		size++;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <USART3_IRQHandler+0xa8>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <USART3_IRQHandler+0xa8>)
 8001c70:	701a      	strb	r2, [r3, #0]

		if (LL_USART_IsActiveFlag_ORE(USART3) || LL_USART_IsActiveFlag_FE(USART3) || LL_USART_IsActiveFlag_PE(USART3))
 8001c72:	4817      	ldr	r0, [pc, #92]	; (8001cd0 <USART3_IRQHandler+0xa4>)
 8001c74:	f7ff ff3c 	bl	8001af0 <LL_USART_IsActiveFlag_ORE>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10b      	bne.n	8001c96 <USART3_IRQHandler+0x6a>
 8001c7e:	4814      	ldr	r0, [pc, #80]	; (8001cd0 <USART3_IRQHandler+0xa4>)
 8001c80:	f7ff ff23 	bl	8001aca <LL_USART_IsActiveFlag_FE>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d105      	bne.n	8001c96 <USART3_IRQHandler+0x6a>
 8001c8a:	4811      	ldr	r0, [pc, #68]	; (8001cd0 <USART3_IRQHandler+0xa4>)
 8001c8c:	f7ff ff0a 	bl	8001aa4 <LL_USART_IsActiveFlag_PE>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <USART3_IRQHandler+0x76>
		{
			// overrun error, framing error, or parity error
			buffer[0] = 0;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <USART3_IRQHandler+0xac>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
			size = 0;
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <USART3_IRQHandler+0xa8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
		}

		// TODO check size instead of end character
		if (size == 3)
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <USART3_IRQHandler+0xa8>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d111      	bne.n	8001cce <USART3_IRQHandler+0xa2>
		{
			// TODO check values and make sure they are valid
			sprintf((char *) buffer, "Throttle: %d, Steering: %d\r\n", buffer[1], buffer[2]);
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <USART3_IRQHandler+0xac>)
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <USART3_IRQHandler+0xac>)
 8001cb2:	789b      	ldrb	r3, [r3, #2]
 8001cb4:	4909      	ldr	r1, [pc, #36]	; (8001cdc <USART3_IRQHandler+0xb0>)
 8001cb6:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <USART3_IRQHandler+0xac>)
 8001cb8:	f001 fc6e 	bl	8003598 <siprintf>
			LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_6);
 8001cbc:	2106      	movs	r1, #6
 8001cbe:	4808      	ldr	r0, [pc, #32]	; (8001ce0 <USART3_IRQHandler+0xb4>)
 8001cc0:	f7ff fe88 	bl	80019d4 <LL_DMA_EnableStream>
			size = 0;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <USART3_IRQHandler+0xa8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e000      	b.n	8001cce <USART3_IRQHandler+0xa2>
			return;
 8001ccc:	bf00      	nop
	}
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cce:	bd98      	pop	{r3, r4, r7, pc}
 8001cd0:	40004800 	.word	0x40004800
 8001cd4:	2000017c 	.word	0x2000017c
 8001cd8:	2000007c 	.word	0x2000007c
 8001cdc:	08004664 	.word	0x08004664
 8001ce0:	40026000 	.word	0x40026000

08001ce4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001ce8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cec:	f7ff feb4 	bl	8001a58 <LL_EXTI_IsActiveFlag_0_31>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001cf6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cfa:	f7ff fec3 	bl	8001a84 <LL_EXTI_ClearFlag_0_31>

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 8001cfe:	2120      	movs	r1, #32
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <EXTI15_10_IRQHandler+0x28>)
 8001d02:	f7ff ff36 	bl	8001b72 <LL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40020000 	.word	0x40020000

08001d10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e00a      	b.n	8001d38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d22:	f3af 8000 	nop.w
 8001d26:	4601      	mov	r1, r0
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	b2ca      	uxtb	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbf0      	blt.n	8001d22 <_read+0x12>
  }

  return len;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e009      	b.n	8001d70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf1      	blt.n	8001d5c <_write+0x12>
  }
  return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_close>:

int _close(int file)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001daa:	605a      	str	r2, [r3, #4]
  return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_isatty>:

int _isatty(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f001 fc6e 	bl	80036fc <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20020000 	.word	0x20020000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	20000180 	.word	0x20000180
 8001e54:	200002d0 	.word	0x200002d0

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e80:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e82:	490e      	ldr	r1, [pc, #56]	; (8001ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e84:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e88:	e002      	b.n	8001e90 <LoopCopyDataInit>

08001e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8e:	3304      	adds	r3, #4

08001e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e94:	d3f9      	bcc.n	8001e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e98:	4c0b      	ldr	r4, [pc, #44]	; (8001ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e9c:	e001      	b.n	8001ea2 <LoopFillZerobss>

08001e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea0:	3204      	adds	r2, #4

08001ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea4:	d3fb      	bcc.n	8001e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ea6:	f7ff ffd7 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f001 fc2d 	bl	8003708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eae:	f7ff f9f3 	bl	8001298 <main>
  bx  lr    
 8001eb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ec0:	08004700 	.word	0x08004700
  ldr r2, =_sbss
 8001ec4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ec8:	200002d0 	.word	0x200002d0

08001ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC_IRQHandler>
	...

08001ed0 <LL_EXTI_EnableIT_0_31>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <LL_EXTI_EnableIT_0_31+0x20>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <LL_EXTI_EnableIT_0_31+0x20>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40013c00 	.word	0x40013c00

08001ef4 <LL_EXTI_DisableIT_0_31>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <LL_EXTI_DisableIT_0_31+0x24>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	4904      	ldr	r1, [pc, #16]	; (8001f18 <LL_EXTI_DisableIT_0_31+0x24>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40013c00 	.word	0x40013c00

08001f1c <LL_EXTI_EnableEvent_0_31>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	4904      	ldr	r1, [pc, #16]	; (8001f3c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40013c00 	.word	0x40013c00

08001f40 <LL_EXTI_DisableEvent_0_31>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	4904      	ldr	r1, [pc, #16]	; (8001f64 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40013c00 	.word	0x40013c00

08001f68 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4904      	ldr	r1, [pc, #16]	; (8001f88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	608b      	str	r3, [r1, #8]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	4904      	ldr	r1, [pc, #16]	; (8001fb0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40013c00 	.word	0x40013c00

08001fb4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	4904      	ldr	r1, [pc, #16]	; (8001fd4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40013c00 	.word	0x40013c00

08001fd8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	4904      	ldr	r1, [pc, #16]	; (8001ffc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	60cb      	str	r3, [r1, #12]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40013c00 	.word	0x40013c00

08002000 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	791b      	ldrb	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d065      	beq.n	80020e0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d06b      	beq.n	80020f4 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	795b      	ldrb	r3, [r3, #5]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d01c      	beq.n	800205e <LL_EXTI_Init+0x5e>
 8002024:	2b02      	cmp	r3, #2
 8002026:	dc25      	bgt.n	8002074 <LL_EXTI_Init+0x74>
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <LL_EXTI_Init+0x32>
 800202c:	2b01      	cmp	r3, #1
 800202e:	d00b      	beq.n	8002048 <LL_EXTI_Init+0x48>
 8002030:	e020      	b.n	8002074 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff82 	bl	8001f40 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff45 	bl	8001ed0 <LL_EXTI_EnableIT_0_31>
          break;
 8002046:	e018      	b.n	800207a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff51 	bl	8001ef4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff60 	bl	8001f1c <LL_EXTI_EnableEvent_0_31>
          break;
 800205c:	e00d      	b.n	800207a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff34 	bl	8001ed0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff55 	bl	8001f1c <LL_EXTI_EnableEvent_0_31>
          break;
 8002072:	e002      	b.n	800207a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
          break;
 8002078:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	799b      	ldrb	r3, [r3, #6]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d038      	beq.n	80020f4 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	799b      	ldrb	r3, [r3, #6]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d01c      	beq.n	80020c4 <LL_EXTI_Init+0xc4>
 800208a:	2b03      	cmp	r3, #3
 800208c:	dc25      	bgt.n	80020da <LL_EXTI_Init+0xda>
 800208e:	2b01      	cmp	r3, #1
 8002090:	d002      	beq.n	8002098 <LL_EXTI_Init+0x98>
 8002092:	2b02      	cmp	r3, #2
 8002094:	d00b      	beq.n	80020ae <LL_EXTI_Init+0xae>
 8002096:	e020      	b.n	80020da <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff9b 	bl	8001fd8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff5e 	bl	8001f68 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80020ac:	e022      	b.n	80020f4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff6a 	bl	8001f8c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff79 	bl	8001fb4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80020c2:	e017      	b.n	80020f4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff4d 	bl	8001f68 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff6e 	bl	8001fb4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80020d8:	e00c      	b.n	80020f4 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
            break;
 80020de:	e009      	b.n	80020f4 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff05 	bl	8001ef4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff26 	bl	8001f40 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <LL_GPIO_SetPinMode>:
{
 80020fe:	b480      	push	{r7}
 8002100:	b089      	sub	sp, #36	; 0x24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	613b      	str	r3, [r7, #16]
  return result;
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2103      	movs	r1, #3
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	401a      	ands	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	61bb      	str	r3, [r7, #24]
  return result;
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	431a      	orrs	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]
}
 8002150:	bf00      	nop
 8002152:	3724      	adds	r7, #36	; 0x24
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_GPIO_SetPinOutputType>:
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	43db      	mvns	r3, r3
 8002170:	401a      	ands	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	431a      	orrs	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	605a      	str	r2, [r3, #4]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_GPIO_SetPinSpeed>:
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	613b      	str	r3, [r7, #16]
  return result;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2103      	movs	r1, #3
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	401a      	ands	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	61bb      	str	r3, [r7, #24]
  return result;
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	431a      	orrs	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	609a      	str	r2, [r3, #8]
}
 80021de:	bf00      	nop
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_GPIO_SetPinPull>:
{
 80021ea:	b480      	push	{r7}
 80021ec:	b089      	sub	sp, #36	; 0x24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	613b      	str	r3, [r7, #16]
  return result;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2103      	movs	r1, #3
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	401a      	ands	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	61bb      	str	r3, [r7, #24]
  return result;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	431a      	orrs	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	60da      	str	r2, [r3, #12]
}
 800223c:	bf00      	nop
 800223e:	3724      	adds	r7, #36	; 0x24
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_GPIO_SetAFPin_0_7>:
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a1a      	ldr	r2, [r3, #32]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	613b      	str	r3, [r7, #16]
  return result;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	210f      	movs	r1, #15
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	61bb      	str	r3, [r7, #24]
  return result;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	431a      	orrs	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	621a      	str	r2, [r3, #32]
}
 800229a:	bf00      	nop
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_GPIO_SetAFPin_8_15>:
{
 80022a6:	b480      	push	{r7}
 80022a8:	b089      	sub	sp, #36	; 0x24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	613b      	str	r3, [r7, #16]
  return result;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	210f      	movs	r1, #15
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	401a      	ands	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	61bb      	str	r3, [r7, #24]
  return result;
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022fc:	bf00      	nop
 80022fe:	3724      	adds	r7, #36	; 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	613b      	str	r3, [r7, #16]
  return result;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002332:	e050      	b.n	80023d6 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d042      	beq.n	80023d0 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d003      	beq.n	800235a <LL_GPIO_Init+0x52>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d10d      	bne.n	8002376 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	461a      	mov	r2, r3
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ff12 	bl	800218c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	461a      	mov	r2, r3
 800236e:	69b9      	ldr	r1, [r7, #24]
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff fef3 	bl	800215c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	461a      	mov	r2, r3
 800237c:	69b9      	ldr	r1, [r7, #24]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ff33 	bl	80021ea <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d11a      	bne.n	80023c2 <LL_GPIO_Init+0xba>
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	60bb      	str	r3, [r7, #8]
  return result;
 8002398:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b07      	cmp	r3, #7
 80023a2:	d807      	bhi.n	80023b4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	461a      	mov	r2, r3
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff4b 	bl	8002248 <LL_GPIO_SetAFPin_0_7>
 80023b2:	e006      	b.n	80023c2 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	461a      	mov	r2, r3
 80023ba:	69b9      	ldr	r1, [r7, #24]
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff72 	bl	80022a6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	461a      	mov	r2, r3
 80023c8:	69b9      	ldr	r1, [r7, #24]
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fe97 	bl	80020fe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	3301      	adds	r3, #1
 80023d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1a7      	bne.n	8002334 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <LL_RCC_GetSysClkSource>:
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <LL_RCC_GetSysClkSource+0x18>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <LL_RCC_GetAHBPrescaler>:
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <LL_RCC_GetAHBPrescaler+0x18>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800

08002428 <LL_RCC_GetAPB1Prescaler>:
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <LL_RCC_GetAPB1Prescaler+0x18>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <LL_RCC_GetAPB2Prescaler>:
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <LL_RCC_GetAPB2Prescaler+0x18>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800

08002460 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <LL_RCC_PLL_GetMainSource+0x18>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800

0800247c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <LL_RCC_PLL_GetN+0x18>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40023800 	.word	0x40023800

08002498 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <LL_RCC_PLL_GetP+0x18>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <LL_RCC_PLL_GetR+0x18>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800

080024d0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <LL_RCC_PLL_GetDivider+0x18>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80024f4:	f000 f820 	bl	8002538 <RCC_GetSystemClockFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f85c 	bl	80025c0 <RCC_GetHCLKClockFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f86a 	bl	80025ec <RCC_GetPCLK1ClockFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f876 	bl	8002614 <RCC_GetPCLK2ClockFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60da      	str	r2, [r3, #12]
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002542:	f7ff ff55 	bl	80023f0 <LL_RCC_GetSysClkSource>
 8002546:	4603      	mov	r3, r0
 8002548:	2b0c      	cmp	r3, #12
 800254a:	d82d      	bhi.n	80025a8 <RCC_GetSystemClockFreq+0x70>
 800254c:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <RCC_GetSystemClockFreq+0x1c>)
 800254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002552:	bf00      	nop
 8002554:	08002589 	.word	0x08002589
 8002558:	080025a9 	.word	0x080025a9
 800255c:	080025a9 	.word	0x080025a9
 8002560:	080025a9 	.word	0x080025a9
 8002564:	0800258f 	.word	0x0800258f
 8002568:	080025a9 	.word	0x080025a9
 800256c:	080025a9 	.word	0x080025a9
 8002570:	080025a9 	.word	0x080025a9
 8002574:	08002595 	.word	0x08002595
 8002578:	080025a9 	.word	0x080025a9
 800257c:	080025a9 	.word	0x080025a9
 8002580:	080025a9 	.word	0x080025a9
 8002584:	0800259f 	.word	0x0800259f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <RCC_GetSystemClockFreq+0x80>)
 800258a:	607b      	str	r3, [r7, #4]
      break;
 800258c:	e00f      	b.n	80025ae <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <RCC_GetSystemClockFreq+0x84>)
 8002590:	607b      	str	r3, [r7, #4]
      break;
 8002592:	e00c      	b.n	80025ae <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002594:	2008      	movs	r0, #8
 8002596:	f000 f851 	bl	800263c <RCC_PLL_GetFreqDomain_SYS>
 800259a:	6078      	str	r0, [r7, #4]
      break;
 800259c:	e007      	b.n	80025ae <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800259e:	200c      	movs	r0, #12
 80025a0:	f000 f84c 	bl	800263c <RCC_PLL_GetFreqDomain_SYS>
 80025a4:	6078      	str	r0, [r7, #4]
      break;
 80025a6:	e002      	b.n	80025ae <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <RCC_GetSystemClockFreq+0x80>)
 80025aa:	607b      	str	r3, [r7, #4]
      break;
 80025ac:	bf00      	nop
  }

  return frequency;
 80025ae:	687b      	ldr	r3, [r7, #4]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	007a1200 	.word	0x007a1200

080025c0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80025c8:	f7ff ff20 	bl	800240c <LL_RCC_GetAHBPrescaler>
 80025cc:	4603      	mov	r3, r0
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <RCC_GetHCLKClockFreq+0x28>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	461a      	mov	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	40d3      	lsrs	r3, r2
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	080046a4 	.word	0x080046a4

080025ec <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80025f4:	f7ff ff18 	bl	8002428 <LL_RCC_GetAPB1Prescaler>
 80025f8:	4603      	mov	r3, r0
 80025fa:	0a9b      	lsrs	r3, r3, #10
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <RCC_GetPCLK1ClockFreq+0x24>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	461a      	mov	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	40d3      	lsrs	r3, r2
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	080046b4 	.word	0x080046b4

08002614 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800261c:	f7ff ff12 	bl	8002444 <LL_RCC_GetAPB2Prescaler>
 8002620:	4603      	mov	r3, r0
 8002622:	0b5b      	lsrs	r3, r3, #13
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <RCC_GetPCLK2ClockFreq+0x24>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	461a      	mov	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	40d3      	lsrs	r3, r2
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	080046b4 	.word	0x080046b4

0800263c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002650:	f7ff ff06 	bl	8002460 <LL_RCC_PLL_GetMainSource>
 8002654:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002662:	d003      	beq.n	800266c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002664:	e005      	b.n	8002672 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002668:	617b      	str	r3, [r7, #20]
      break;
 800266a:	e005      	b.n	8002678 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800266e:	617b      	str	r3, [r7, #20]
      break;
 8002670:	e002      	b.n	8002678 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8002674:	617b      	str	r3, [r7, #20]
      break;
 8002676:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b08      	cmp	r3, #8
 800267c:	d114      	bne.n	80026a8 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800267e:	f7ff ff27 	bl	80024d0 <LL_RCC_PLL_GetDivider>
 8002682:	4602      	mov	r2, r0
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fbb3 f4f2 	udiv	r4, r3, r2
 800268a:	f7ff fef7 	bl	800247c <LL_RCC_PLL_GetN>
 800268e:	4603      	mov	r3, r0
 8002690:	fb03 f404 	mul.w	r4, r3, r4
 8002694:	f7ff ff00 	bl	8002498 <LL_RCC_PLL_GetP>
 8002698:	4603      	mov	r3, r0
 800269a:	0c1b      	lsrs	r3, r3, #16
 800269c:	3301      	adds	r3, #1
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	e011      	b.n	80026cc <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80026a8:	f7ff ff12 	bl	80024d0 <LL_RCC_PLL_GetDivider>
 80026ac:	4602      	mov	r2, r0
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	fbb3 f4f2 	udiv	r4, r3, r2
 80026b4:	f7ff fee2 	bl	800247c <LL_RCC_PLL_GetN>
 80026b8:	4603      	mov	r3, r0
 80026ba:	fb03 f404 	mul.w	r4, r3, r4
 80026be:	f7ff fef9 	bl	80024b4 <LL_RCC_PLL_GetR>
 80026c2:	4603      	mov	r3, r0
 80026c4:	0f1b      	lsrs	r3, r3, #28
 80026c6:	fbb4 f3f3 	udiv	r3, r4, r3
 80026ca:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80026cc:	693b      	ldr	r3, [r7, #16]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}
 80026d6:	bf00      	nop
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	007a1200 	.word	0x007a1200

080026e0 <LL_SPI_IsEnabled>:
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d101      	bne.n	80026f8 <LL_SPI_IsEnabled+0x18>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <LL_SPI_IsEnabled+0x1a>
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_SPI_SetCRCPolynomial>:
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	611a      	str	r2, [r3, #16]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ffd3 	bl	80026e0 <LL_SPI_IsEnabled>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d139      	bne.n	80027b4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002748:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	6811      	ldr	r1, [r2, #0]
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	6852      	ldr	r2, [r2, #4]
 8002754:	4311      	orrs	r1, r2
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	6892      	ldr	r2, [r2, #8]
 800275a:	4311      	orrs	r1, r2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	68d2      	ldr	r2, [r2, #12]
 8002760:	4311      	orrs	r1, r2
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	6912      	ldr	r2, [r2, #16]
 8002766:	4311      	orrs	r1, r2
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	6952      	ldr	r2, [r2, #20]
 800276c:	4311      	orrs	r1, r2
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	6992      	ldr	r2, [r2, #24]
 8002772:	4311      	orrs	r1, r2
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	69d2      	ldr	r2, [r2, #28]
 8002778:	4311      	orrs	r1, r2
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	6a12      	ldr	r2, [r2, #32]
 800277e:	430a      	orrs	r2, r1
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 0204 	bic.w	r2, r3, #4
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a2:	d105      	bne.n	80027b0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffab 	bl	8002706 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	61da      	str	r2, [r3, #28]
  return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <LL_TIM_SetPrescaler>:
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_TIM_SetAutoReload>:
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_TIM_SetRepetitionCounter>:
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_TIM_OC_SetCompareCH1>:
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <LL_TIM_OC_SetCompareCH2>:
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_TIM_OC_SetCompareCH3>:
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_TIM_OC_SetCompareCH4>:
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	615a      	str	r2, [r3, #20]
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a3d      	ldr	r2, [pc, #244]	; (80029b8 <LL_TIM_Init+0x108>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <LL_TIM_Init+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ce:	d00f      	beq.n	80028f0 <LL_TIM_Init+0x40>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3a      	ldr	r2, [pc, #232]	; (80029bc <LL_TIM_Init+0x10c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <LL_TIM_Init+0x40>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a39      	ldr	r2, [pc, #228]	; (80029c0 <LL_TIM_Init+0x110>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <LL_TIM_Init+0x40>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a38      	ldr	r2, [pc, #224]	; (80029c4 <LL_TIM_Init+0x114>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <LL_TIM_Init+0x40>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a37      	ldr	r2, [pc, #220]	; (80029c8 <LL_TIM_Init+0x118>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d106      	bne.n	80028fe <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2d      	ldr	r2, [pc, #180]	; (80029b8 <LL_TIM_Init+0x108>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02b      	beq.n	800295e <LL_TIM_Init+0xae>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290c:	d027      	beq.n	800295e <LL_TIM_Init+0xae>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <LL_TIM_Init+0x10c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d023      	beq.n	800295e <LL_TIM_Init+0xae>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <LL_TIM_Init+0x110>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01f      	beq.n	800295e <LL_TIM_Init+0xae>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a28      	ldr	r2, [pc, #160]	; (80029c4 <LL_TIM_Init+0x114>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01b      	beq.n	800295e <LL_TIM_Init+0xae>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <LL_TIM_Init+0x118>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d017      	beq.n	800295e <LL_TIM_Init+0xae>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a26      	ldr	r2, [pc, #152]	; (80029cc <LL_TIM_Init+0x11c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <LL_TIM_Init+0xae>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <LL_TIM_Init+0x120>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00f      	beq.n	800295e <LL_TIM_Init+0xae>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <LL_TIM_Init+0x124>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00b      	beq.n	800295e <LL_TIM_Init+0xae>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <LL_TIM_Init+0x128>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <LL_TIM_Init+0xae>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a22      	ldr	r2, [pc, #136]	; (80029dc <LL_TIM_Init+0x12c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <LL_TIM_Init+0xae>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <LL_TIM_Init+0x130>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d106      	bne.n	800296c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4619      	mov	r1, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff34 	bl	80027e6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	4619      	mov	r1, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff20 	bl	80027ca <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <LL_TIM_Init+0x108>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d003      	beq.n	800299a <LL_TIM_Init+0xea>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <LL_TIM_Init+0x118>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d105      	bne.n	80029a6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff2e 	bl	8002802 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff ff71 	bl	800288e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40000c00 	.word	0x40000c00
 80029c8:	40010400 	.word	0x40010400
 80029cc:	40014000 	.word	0x40014000
 80029d0:	40014400 	.word	0x40014400
 80029d4:	40014800 	.word	0x40014800
 80029d8:	40001800 	.word	0x40001800
 80029dc:	40001c00 	.word	0x40001c00
 80029e0:	40002000 	.word	0x40002000

080029e4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fa:	d027      	beq.n	8002a4c <LL_TIM_OC_Init+0x68>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	d82a      	bhi.n	8002a5a <LL_TIM_OC_Init+0x76>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0a:	d018      	beq.n	8002a3e <LL_TIM_OC_Init+0x5a>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a12:	d822      	bhi.n	8002a5a <LL_TIM_OC_Init+0x76>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d003      	beq.n	8002a22 <LL_TIM_OC_Init+0x3e>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d007      	beq.n	8002a30 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002a20:	e01b      	b.n	8002a5a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f81f 	bl	8002a68 <OC1Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a2e:	e015      	b.n	8002a5c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f884 	bl	8002b40 <OC2Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a3c:	e00e      	b.n	8002a5c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f8ed 	bl	8002c20 <OC3Config>
 8002a46:	4603      	mov	r3, r0
 8002a48:	75fb      	strb	r3, [r7, #23]
      break;
 8002a4a:	e007      	b.n	8002a5c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f956 	bl	8002d00 <OC4Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	75fb      	strb	r3, [r7, #23]
      break;
 8002a58:	e000      	b.n	8002a5c <LL_TIM_OC_Init+0x78>
      break;
 8002a5a:	bf00      	nop
  }

  return result;
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f023 0202 	bic.w	r2, r3, #2
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f023 0201 	bic.w	r2, r3, #1
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <OC1Config+0xd0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <OC1Config+0x6a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <OC1Config+0xd4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d11e      	bne.n	8002b10 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f023 0208 	bic.w	r2, r3, #8
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 0204 	bic.w	r2, r3, #4
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4619      	mov	r1, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fe7b 	bl	800281e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40010400 	.word	0x40010400

08002b40 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f023 0210 	bic.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f023 0220 	bic.w	r2, r3, #32
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f023 0210 	bic.w	r2, r3, #16
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <OC2Config+0xd8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <OC2Config+0x70>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <OC2Config+0xdc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d11f      	bne.n	8002bf0 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	019b      	lsls	r3, r3, #6
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	019b      	lsls	r3, r3, #6
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff fe19 	bl	800283a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40010400 	.word	0x40010400

08002c20 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0303 	bic.w	r3, r3, #3
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <OC3Config+0xd8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d003      	beq.n	8002c8e <OC3Config+0x6e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <OC3Config+0xdc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d11f      	bne.n	8002cce <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	029b      	lsls	r3, r3, #10
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	029b      	lsls	r3, r3, #10
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	015b      	lsls	r3, r3, #5
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff fdb8 	bl	8002856 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40010400 	.word	0x40010400

08002d00 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	031b      	lsls	r3, r3, #12
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	031b      	lsls	r3, r3, #12
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <OC4Config+0xa8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <OC4Config+0x70>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <OC4Config+0xac>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d107      	bne.n	8002d80 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	019b      	lsls	r3, r3, #6
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fd6d 	bl	8002872 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40010000 	.word	0x40010000
 8002dac:	40010400 	.word	0x40010400

08002db0 <LL_USART_IsEnabled>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_USART_SetStopBitsLength>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	611a      	str	r2, [r3, #16]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_USART_SetHWFlowCtrl>:
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	615a      	str	r2, [r3, #20]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_USART_SetBaudRate>:
{
 8002e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e28:	b0c0      	sub	sp, #256	; 0x100
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e30:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002e34:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002e38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e44:	f040 810c 	bne.w	8003060 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002e48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e5a:	4622      	mov	r2, r4
 8002e5c:	462b      	mov	r3, r5
 8002e5e:	1891      	adds	r1, r2, r2
 8002e60:	6639      	str	r1, [r7, #96]	; 0x60
 8002e62:	415b      	adcs	r3, r3
 8002e64:	667b      	str	r3, [r7, #100]	; 0x64
 8002e66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	eb12 0801 	adds.w	r8, r2, r1
 8002e70:	4629      	mov	r1, r5
 8002e72:	eb43 0901 	adc.w	r9, r3, r1
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e8a:	4690      	mov	r8, r2
 8002e8c:	4699      	mov	r9, r3
 8002e8e:	4623      	mov	r3, r4
 8002e90:	eb18 0303 	adds.w	r3, r8, r3
 8002e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e98:	462b      	mov	r3, r5
 8002e9a:	eb49 0303 	adc.w	r3, r9, r3
 8002e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ea2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	469a      	mov	sl, r3
 8002eaa:	4693      	mov	fp, r2
 8002eac:	eb1a 030a 	adds.w	r3, sl, sl
 8002eb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eb2:	eb4b 030b 	adc.w	r3, fp, fp
 8002eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ec0:	f7fd f9f6 	bl	80002b0 <__aeabi_uldivmod>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4b64      	ldr	r3, [pc, #400]	; (800305c <LL_USART_SetBaudRate+0x238>)
 8002eca:	fba3 2302 	umull	r2, r3, r3, r2
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	b29c      	uxth	r4, r3
 8002ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ee0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ee4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002ee8:	4642      	mov	r2, r8
 8002eea:	464b      	mov	r3, r9
 8002eec:	1891      	adds	r1, r2, r2
 8002eee:	6539      	str	r1, [r7, #80]	; 0x50
 8002ef0:	415b      	adcs	r3, r3
 8002ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ef8:	4641      	mov	r1, r8
 8002efa:	1851      	adds	r1, r2, r1
 8002efc:	64b9      	str	r1, [r7, #72]	; 0x48
 8002efe:	4649      	mov	r1, r9
 8002f00:	414b      	adcs	r3, r1
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8002f10:	4659      	mov	r1, fp
 8002f12:	00cb      	lsls	r3, r1, #3
 8002f14:	4651      	mov	r1, sl
 8002f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	00ca      	lsls	r2, r1, #3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	4642      	mov	r2, r8
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f2c:	464b      	mov	r3, r9
 8002f2e:	460a      	mov	r2, r1
 8002f30:	eb42 0303 	adc.w	r3, r2, r3
 8002f34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002f38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f42:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002f46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	18db      	adds	r3, r3, r3
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f50:	4613      	mov	r3, r2
 8002f52:	eb42 0303 	adc.w	r3, r2, r3
 8002f56:	647b      	str	r3, [r7, #68]	; 0x44
 8002f58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f5c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002f60:	f7fd f9a6 	bl	80002b0 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4b3c      	ldr	r3, [pc, #240]	; (800305c <LL_USART_SetBaudRate+0x238>)
 8002f6c:	fba3 2301 	umull	r2, r3, r3, r1
 8002f70:	095b      	lsrs	r3, r3, #5
 8002f72:	2264      	movs	r2, #100	; 0x64
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	1acb      	subs	r3, r1, r3
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <LL_USART_SetBaudRate+0x238>)
 8002f82:	fba3 2302 	umull	r2, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	4423      	add	r3, r4
 8002f96:	b29c      	uxth	r4, r3
 8002f98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fa2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fa6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8002faa:	4642      	mov	r2, r8
 8002fac:	464b      	mov	r3, r9
 8002fae:	1891      	adds	r1, r2, r2
 8002fb0:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fb2:	415b      	adcs	r3, r3
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fba:	4641      	mov	r1, r8
 8002fbc:	1851      	adds	r1, r2, r1
 8002fbe:	6339      	str	r1, [r7, #48]	; 0x30
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	414b      	adcs	r3, r1
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fd2:	4659      	mov	r1, fp
 8002fd4:	00cb      	lsls	r3, r1, #3
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fdc:	4651      	mov	r1, sl
 8002fde:	00ca      	lsls	r2, r1, #3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4642      	mov	r2, r8
 8002fe8:	189b      	adds	r3, r3, r2
 8002fea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	eb42 0303 	adc.w	r3, r2, r3
 8002ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ffa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003004:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003008:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800300c:	460b      	mov	r3, r1
 800300e:	18db      	adds	r3, r3, r3
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
 8003012:	4613      	mov	r3, r2
 8003014:	eb42 0303 	adc.w	r3, r2, r3
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800301e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003022:	f7fd f945 	bl	80002b0 <__aeabi_uldivmod>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <LL_USART_SetBaudRate+0x238>)
 800302c:	fba3 1302 	umull	r1, r3, r3, r2
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	2164      	movs	r1, #100	; 0x64
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	3332      	adds	r3, #50	; 0x32
 800303e:	4a07      	ldr	r2, [pc, #28]	; (800305c <LL_USART_SetBaudRate+0x238>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	095b      	lsrs	r3, r3, #5
 8003046:	b29b      	uxth	r3, r3
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	b29b      	uxth	r3, r3
 800304e:	4423      	add	r3, r4
 8003050:	b29b      	uxth	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003058:	609a      	str	r2, [r3, #8]
}
 800305a:	e108      	b.n	800326e <LL_USART_SetBaudRate+0x44a>
 800305c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003060:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003064:	2200      	movs	r2, #0
 8003066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800306a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800306e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003072:	4642      	mov	r2, r8
 8003074:	464b      	mov	r3, r9
 8003076:	1891      	adds	r1, r2, r2
 8003078:	6239      	str	r1, [r7, #32]
 800307a:	415b      	adcs	r3, r3
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003082:	4641      	mov	r1, r8
 8003084:	1854      	adds	r4, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb43 0501 	adc.w	r5, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	00eb      	lsls	r3, r5, #3
 8003096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800309a:	00e2      	lsls	r2, r4, #3
 800309c:	4614      	mov	r4, r2
 800309e:	461d      	mov	r5, r3
 80030a0:	4643      	mov	r3, r8
 80030a2:	18e3      	adds	r3, r4, r3
 80030a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030a8:	464b      	mov	r3, r9
 80030aa:	eb45 0303 	adc.w	r3, r5, r3
 80030ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80030b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80030b6:	2200      	movs	r2, #0
 80030b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80030cc:	4629      	mov	r1, r5
 80030ce:	008b      	lsls	r3, r1, #2
 80030d0:	4621      	mov	r1, r4
 80030d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d6:	4621      	mov	r1, r4
 80030d8:	008a      	lsls	r2, r1, #2
 80030da:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80030de:	f7fd f8e7 	bl	80002b0 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4b65      	ldr	r3, [pc, #404]	; (800327c <LL_USART_SetBaudRate+0x458>)
 80030e8:	fba3 2302 	umull	r2, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	b29c      	uxth	r4, r3
 80030f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003102:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003106:	4642      	mov	r2, r8
 8003108:	464b      	mov	r3, r9
 800310a:	1891      	adds	r1, r2, r2
 800310c:	61b9      	str	r1, [r7, #24]
 800310e:	415b      	adcs	r3, r3
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003116:	4641      	mov	r1, r8
 8003118:	1851      	adds	r1, r2, r1
 800311a:	6139      	str	r1, [r7, #16]
 800311c:	4649      	mov	r1, r9
 800311e:	414b      	adcs	r3, r1
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800312e:	4659      	mov	r1, fp
 8003130:	00cb      	lsls	r3, r1, #3
 8003132:	4651      	mov	r1, sl
 8003134:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003138:	4651      	mov	r1, sl
 800313a:	00ca      	lsls	r2, r1, #3
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	4603      	mov	r3, r0
 8003142:	4642      	mov	r2, r8
 8003144:	189b      	adds	r3, r3, r2
 8003146:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800314a:	464b      	mov	r3, r9
 800314c:	460a      	mov	r2, r1
 800314e:	eb42 0303 	adc.w	r3, r2, r3
 8003152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003156:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800315a:	2200      	movs	r2, #0
 800315c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003160:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003170:	4649      	mov	r1, r9
 8003172:	008b      	lsls	r3, r1, #2
 8003174:	4641      	mov	r1, r8
 8003176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800317a:	4641      	mov	r1, r8
 800317c:	008a      	lsls	r2, r1, #2
 800317e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003182:	f7fd f895 	bl	80002b0 <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4611      	mov	r1, r2
 800318c:	4b3b      	ldr	r3, [pc, #236]	; (800327c <LL_USART_SetBaudRate+0x458>)
 800318e:	fba3 2301 	umull	r2, r3, r3, r1
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2264      	movs	r2, #100	; 0x64
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	1acb      	subs	r3, r1, r3
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	3332      	adds	r3, #50	; 0x32
 80031a0:	4a36      	ldr	r2, [pc, #216]	; (800327c <LL_USART_SetBaudRate+0x458>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	4423      	add	r3, r4
 80031b2:	b29c      	uxth	r4, r3
 80031b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031b8:	2200      	movs	r2, #0
 80031ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80031bc:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031be:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031c2:	4642      	mov	r2, r8
 80031c4:	464b      	mov	r3, r9
 80031c6:	1891      	adds	r1, r2, r2
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	415b      	adcs	r3, r3
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031d2:	4641      	mov	r1, r8
 80031d4:	1851      	adds	r1, r2, r1
 80031d6:	6039      	str	r1, [r7, #0]
 80031d8:	4649      	mov	r1, r9
 80031da:	414b      	adcs	r3, r1
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031ea:	4659      	mov	r1, fp
 80031ec:	00cb      	lsls	r3, r1, #3
 80031ee:	4651      	mov	r1, sl
 80031f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f4:	4651      	mov	r1, sl
 80031f6:	00ca      	lsls	r2, r1, #3
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	4603      	mov	r3, r0
 80031fe:	4642      	mov	r2, r8
 8003200:	189b      	adds	r3, r3, r2
 8003202:	673b      	str	r3, [r7, #112]	; 0x70
 8003204:	464b      	mov	r3, r9
 8003206:	460a      	mov	r2, r1
 8003208:	eb42 0303 	adc.w	r3, r2, r3
 800320c:	677b      	str	r3, [r7, #116]	; 0x74
 800320e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003212:	2200      	movs	r2, #0
 8003214:	66bb      	str	r3, [r7, #104]	; 0x68
 8003216:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003224:	4649      	mov	r1, r9
 8003226:	008b      	lsls	r3, r1, #2
 8003228:	4641      	mov	r1, r8
 800322a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322e:	4641      	mov	r1, r8
 8003230:	008a      	lsls	r2, r1, #2
 8003232:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003236:	f7fd f83b 	bl	80002b0 <__aeabi_uldivmod>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <LL_USART_SetBaudRate+0x458>)
 8003240:	fba3 1302 	umull	r1, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	2164      	movs	r1, #100	; 0x64
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	3332      	adds	r3, #50	; 0x32
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <LL_USART_SetBaudRate+0x458>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	b29b      	uxth	r3, r3
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	b29b      	uxth	r3, r3
 8003262:	4423      	add	r3, r4
 8003264:	b29b      	uxth	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326c:	609a      	str	r2, [r3, #8]
}
 800326e:	bf00      	nop
 8003270:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003274:	46bd      	mov	sp, r7
 8003276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800327a:	bf00      	nop
 800327c:	51eb851f 	.word	0x51eb851f

08003280 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff fd8c 	bl	8002db0 <LL_USART_IsEnabled>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d15e      	bne.n	800335c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032a6:	f023 030c 	bic.w	r3, r3, #12
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	6851      	ldr	r1, [r2, #4]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	68d2      	ldr	r2, [r2, #12]
 80032b2:	4311      	orrs	r1, r2
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	6912      	ldr	r2, [r2, #16]
 80032b8:	4311      	orrs	r1, r2
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	6992      	ldr	r2, [r2, #24]
 80032be:	430a      	orrs	r2, r1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff fd83 	bl	8002dd8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fd90 	bl	8002dfe <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80032de:	f107 0308 	add.w	r3, r7, #8
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f902 	bl	80024ec <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <LL_USART_Init+0xe8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d102      	bne.n	80032f6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	e021      	b.n	800333a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <LL_USART_Init+0xec>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d102      	bne.n	8003304 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e01a      	b.n	800333a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <LL_USART_Init+0xf0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d102      	bne.n	8003312 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	e013      	b.n	800333a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <LL_USART_Init+0xf4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d102      	bne.n	8003320 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	e00c      	b.n	800333a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a15      	ldr	r2, [pc, #84]	; (8003378 <LL_USART_Init+0xf8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d102      	bne.n	800332e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	e005      	b.n	800333a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a12      	ldr	r2, [pc, #72]	; (800337c <LL_USART_Init+0xfc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003348:	2300      	movs	r3, #0
 800334a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69b9      	ldr	r1, [r7, #24]
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff fd64 	bl	8002e24 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800335c:	7ffb      	ldrb	r3, [r7, #31]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40011000 	.word	0x40011000
 800336c:	40004400 	.word	0x40004400
 8003370:	40004800 	.word	0x40004800
 8003374:	40011400 	.word	0x40011400
 8003378:	40004c00 	.word	0x40004c00
 800337c:	40005000 	.word	0x40005000

08003380 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003392:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <LL_InitTick+0x30>)
 8003394:	3b01      	subs	r3, #1
 8003396:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <LL_InitTick+0x30>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <LL_InitTick+0x30>)
 80033a0:	2205      	movs	r2, #5
 80033a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80033bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ffdd 	bl	8003380 <LL_InitTick>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <LL_SetSystemCoreClock+0x1c>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6013      	str	r3, [r2, #0]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000000 	.word	0x20000000

080033f0 <std>:
 80033f0:	2300      	movs	r3, #0
 80033f2:	b510      	push	{r4, lr}
 80033f4:	4604      	mov	r4, r0
 80033f6:	e9c0 3300 	strd	r3, r3, [r0]
 80033fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033fe:	6083      	str	r3, [r0, #8]
 8003400:	8181      	strh	r1, [r0, #12]
 8003402:	6643      	str	r3, [r0, #100]	; 0x64
 8003404:	81c2      	strh	r2, [r0, #14]
 8003406:	6183      	str	r3, [r0, #24]
 8003408:	4619      	mov	r1, r3
 800340a:	2208      	movs	r2, #8
 800340c:	305c      	adds	r0, #92	; 0x5c
 800340e:	f000 f926 	bl	800365e <memset>
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <std+0x58>)
 8003414:	6263      	str	r3, [r4, #36]	; 0x24
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <std+0x5c>)
 8003418:	62a3      	str	r3, [r4, #40]	; 0x28
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <std+0x60>)
 800341c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <std+0x64>)
 8003420:	6323      	str	r3, [r4, #48]	; 0x30
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <std+0x68>)
 8003424:	6224      	str	r4, [r4, #32]
 8003426:	429c      	cmp	r4, r3
 8003428:	d006      	beq.n	8003438 <std+0x48>
 800342a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800342e:	4294      	cmp	r4, r2
 8003430:	d002      	beq.n	8003438 <std+0x48>
 8003432:	33d0      	adds	r3, #208	; 0xd0
 8003434:	429c      	cmp	r4, r3
 8003436:	d105      	bne.n	8003444 <std+0x54>
 8003438:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800343c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003440:	f000 b986 	b.w	8003750 <__retarget_lock_init_recursive>
 8003444:	bd10      	pop	{r4, pc}
 8003446:	bf00      	nop
 8003448:	080035d9 	.word	0x080035d9
 800344c:	080035fb 	.word	0x080035fb
 8003450:	08003633 	.word	0x08003633
 8003454:	08003657 	.word	0x08003657
 8003458:	20000184 	.word	0x20000184

0800345c <stdio_exit_handler>:
 800345c:	4a02      	ldr	r2, [pc, #8]	; (8003468 <stdio_exit_handler+0xc>)
 800345e:	4903      	ldr	r1, [pc, #12]	; (800346c <stdio_exit_handler+0x10>)
 8003460:	4803      	ldr	r0, [pc, #12]	; (8003470 <stdio_exit_handler+0x14>)
 8003462:	f000 b869 	b.w	8003538 <_fwalk_sglue>
 8003466:	bf00      	nop
 8003468:	20000004 	.word	0x20000004
 800346c:	080042ad 	.word	0x080042ad
 8003470:	20000010 	.word	0x20000010

08003474 <cleanup_stdio>:
 8003474:	6841      	ldr	r1, [r0, #4]
 8003476:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <cleanup_stdio+0x34>)
 8003478:	4299      	cmp	r1, r3
 800347a:	b510      	push	{r4, lr}
 800347c:	4604      	mov	r4, r0
 800347e:	d001      	beq.n	8003484 <cleanup_stdio+0x10>
 8003480:	f000 ff14 	bl	80042ac <_fflush_r>
 8003484:	68a1      	ldr	r1, [r4, #8]
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <cleanup_stdio+0x38>)
 8003488:	4299      	cmp	r1, r3
 800348a:	d002      	beq.n	8003492 <cleanup_stdio+0x1e>
 800348c:	4620      	mov	r0, r4
 800348e:	f000 ff0d 	bl	80042ac <_fflush_r>
 8003492:	68e1      	ldr	r1, [r4, #12]
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <cleanup_stdio+0x3c>)
 8003496:	4299      	cmp	r1, r3
 8003498:	d004      	beq.n	80034a4 <cleanup_stdio+0x30>
 800349a:	4620      	mov	r0, r4
 800349c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a0:	f000 bf04 	b.w	80042ac <_fflush_r>
 80034a4:	bd10      	pop	{r4, pc}
 80034a6:	bf00      	nop
 80034a8:	20000184 	.word	0x20000184
 80034ac:	200001ec 	.word	0x200001ec
 80034b0:	20000254 	.word	0x20000254

080034b4 <global_stdio_init.part.0>:
 80034b4:	b510      	push	{r4, lr}
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <global_stdio_init.part.0+0x30>)
 80034b8:	4c0b      	ldr	r4, [pc, #44]	; (80034e8 <global_stdio_init.part.0+0x34>)
 80034ba:	4a0c      	ldr	r2, [pc, #48]	; (80034ec <global_stdio_init.part.0+0x38>)
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	4620      	mov	r0, r4
 80034c0:	2200      	movs	r2, #0
 80034c2:	2104      	movs	r1, #4
 80034c4:	f7ff ff94 	bl	80033f0 <std>
 80034c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80034cc:	2201      	movs	r2, #1
 80034ce:	2109      	movs	r1, #9
 80034d0:	f7ff ff8e 	bl	80033f0 <std>
 80034d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80034d8:	2202      	movs	r2, #2
 80034da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034de:	2112      	movs	r1, #18
 80034e0:	f7ff bf86 	b.w	80033f0 <std>
 80034e4:	200002bc 	.word	0x200002bc
 80034e8:	20000184 	.word	0x20000184
 80034ec:	0800345d 	.word	0x0800345d

080034f0 <__sfp_lock_acquire>:
 80034f0:	4801      	ldr	r0, [pc, #4]	; (80034f8 <__sfp_lock_acquire+0x8>)
 80034f2:	f000 b92e 	b.w	8003752 <__retarget_lock_acquire_recursive>
 80034f6:	bf00      	nop
 80034f8:	200002c5 	.word	0x200002c5

080034fc <__sfp_lock_release>:
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <__sfp_lock_release+0x8>)
 80034fe:	f000 b929 	b.w	8003754 <__retarget_lock_release_recursive>
 8003502:	bf00      	nop
 8003504:	200002c5 	.word	0x200002c5

08003508 <__sinit>:
 8003508:	b510      	push	{r4, lr}
 800350a:	4604      	mov	r4, r0
 800350c:	f7ff fff0 	bl	80034f0 <__sfp_lock_acquire>
 8003510:	6a23      	ldr	r3, [r4, #32]
 8003512:	b11b      	cbz	r3, 800351c <__sinit+0x14>
 8003514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003518:	f7ff bff0 	b.w	80034fc <__sfp_lock_release>
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <__sinit+0x28>)
 800351e:	6223      	str	r3, [r4, #32]
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <__sinit+0x2c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f5      	bne.n	8003514 <__sinit+0xc>
 8003528:	f7ff ffc4 	bl	80034b4 <global_stdio_init.part.0>
 800352c:	e7f2      	b.n	8003514 <__sinit+0xc>
 800352e:	bf00      	nop
 8003530:	08003475 	.word	0x08003475
 8003534:	200002bc 	.word	0x200002bc

08003538 <_fwalk_sglue>:
 8003538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800353c:	4607      	mov	r7, r0
 800353e:	4688      	mov	r8, r1
 8003540:	4614      	mov	r4, r2
 8003542:	2600      	movs	r6, #0
 8003544:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003548:	f1b9 0901 	subs.w	r9, r9, #1
 800354c:	d505      	bpl.n	800355a <_fwalk_sglue+0x22>
 800354e:	6824      	ldr	r4, [r4, #0]
 8003550:	2c00      	cmp	r4, #0
 8003552:	d1f7      	bne.n	8003544 <_fwalk_sglue+0xc>
 8003554:	4630      	mov	r0, r6
 8003556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800355a:	89ab      	ldrh	r3, [r5, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d907      	bls.n	8003570 <_fwalk_sglue+0x38>
 8003560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003564:	3301      	adds	r3, #1
 8003566:	d003      	beq.n	8003570 <_fwalk_sglue+0x38>
 8003568:	4629      	mov	r1, r5
 800356a:	4638      	mov	r0, r7
 800356c:	47c0      	blx	r8
 800356e:	4306      	orrs	r6, r0
 8003570:	3568      	adds	r5, #104	; 0x68
 8003572:	e7e9      	b.n	8003548 <_fwalk_sglue+0x10>

08003574 <iprintf>:
 8003574:	b40f      	push	{r0, r1, r2, r3}
 8003576:	b507      	push	{r0, r1, r2, lr}
 8003578:	4906      	ldr	r1, [pc, #24]	; (8003594 <iprintf+0x20>)
 800357a:	ab04      	add	r3, sp, #16
 800357c:	6808      	ldr	r0, [r1, #0]
 800357e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003582:	6881      	ldr	r1, [r0, #8]
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	f000 fb61 	bl	8003c4c <_vfiprintf_r>
 800358a:	b003      	add	sp, #12
 800358c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003590:	b004      	add	sp, #16
 8003592:	4770      	bx	lr
 8003594:	2000005c 	.word	0x2000005c

08003598 <siprintf>:
 8003598:	b40e      	push	{r1, r2, r3}
 800359a:	b500      	push	{lr}
 800359c:	b09c      	sub	sp, #112	; 0x70
 800359e:	ab1d      	add	r3, sp, #116	; 0x74
 80035a0:	9002      	str	r0, [sp, #8]
 80035a2:	9006      	str	r0, [sp, #24]
 80035a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035a8:	4809      	ldr	r0, [pc, #36]	; (80035d0 <siprintf+0x38>)
 80035aa:	9107      	str	r1, [sp, #28]
 80035ac:	9104      	str	r1, [sp, #16]
 80035ae:	4909      	ldr	r1, [pc, #36]	; (80035d4 <siprintf+0x3c>)
 80035b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80035b4:	9105      	str	r1, [sp, #20]
 80035b6:	6800      	ldr	r0, [r0, #0]
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	a902      	add	r1, sp, #8
 80035bc:	f000 fa1e 	bl	80039fc <_svfiprintf_r>
 80035c0:	9b02      	ldr	r3, [sp, #8]
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]
 80035c6:	b01c      	add	sp, #112	; 0x70
 80035c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035cc:	b003      	add	sp, #12
 80035ce:	4770      	bx	lr
 80035d0:	2000005c 	.word	0x2000005c
 80035d4:	ffff0208 	.word	0xffff0208

080035d8 <__sread>:
 80035d8:	b510      	push	{r4, lr}
 80035da:	460c      	mov	r4, r1
 80035dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e0:	f000 f868 	bl	80036b4 <_read_r>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	bfab      	itete	ge
 80035e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035ea:	89a3      	ldrhlt	r3, [r4, #12]
 80035ec:	181b      	addge	r3, r3, r0
 80035ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035f2:	bfac      	ite	ge
 80035f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80035f6:	81a3      	strhlt	r3, [r4, #12]
 80035f8:	bd10      	pop	{r4, pc}

080035fa <__swrite>:
 80035fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035fe:	461f      	mov	r7, r3
 8003600:	898b      	ldrh	r3, [r1, #12]
 8003602:	05db      	lsls	r3, r3, #23
 8003604:	4605      	mov	r5, r0
 8003606:	460c      	mov	r4, r1
 8003608:	4616      	mov	r6, r2
 800360a:	d505      	bpl.n	8003618 <__swrite+0x1e>
 800360c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003610:	2302      	movs	r3, #2
 8003612:	2200      	movs	r2, #0
 8003614:	f000 f83c 	bl	8003690 <_lseek_r>
 8003618:	89a3      	ldrh	r3, [r4, #12]
 800361a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800361e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003622:	81a3      	strh	r3, [r4, #12]
 8003624:	4632      	mov	r2, r6
 8003626:	463b      	mov	r3, r7
 8003628:	4628      	mov	r0, r5
 800362a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800362e:	f000 b853 	b.w	80036d8 <_write_r>

08003632 <__sseek>:
 8003632:	b510      	push	{r4, lr}
 8003634:	460c      	mov	r4, r1
 8003636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800363a:	f000 f829 	bl	8003690 <_lseek_r>
 800363e:	1c43      	adds	r3, r0, #1
 8003640:	89a3      	ldrh	r3, [r4, #12]
 8003642:	bf15      	itete	ne
 8003644:	6560      	strne	r0, [r4, #84]	; 0x54
 8003646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800364a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800364e:	81a3      	strheq	r3, [r4, #12]
 8003650:	bf18      	it	ne
 8003652:	81a3      	strhne	r3, [r4, #12]
 8003654:	bd10      	pop	{r4, pc}

08003656 <__sclose>:
 8003656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800365a:	f000 b809 	b.w	8003670 <_close_r>

0800365e <memset>:
 800365e:	4402      	add	r2, r0
 8003660:	4603      	mov	r3, r0
 8003662:	4293      	cmp	r3, r2
 8003664:	d100      	bne.n	8003668 <memset+0xa>
 8003666:	4770      	bx	lr
 8003668:	f803 1b01 	strb.w	r1, [r3], #1
 800366c:	e7f9      	b.n	8003662 <memset+0x4>
	...

08003670 <_close_r>:
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	4d06      	ldr	r5, [pc, #24]	; (800368c <_close_r+0x1c>)
 8003674:	2300      	movs	r3, #0
 8003676:	4604      	mov	r4, r0
 8003678:	4608      	mov	r0, r1
 800367a:	602b      	str	r3, [r5, #0]
 800367c:	f7fe fb81 	bl	8001d82 <_close>
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	d102      	bne.n	800368a <_close_r+0x1a>
 8003684:	682b      	ldr	r3, [r5, #0]
 8003686:	b103      	cbz	r3, 800368a <_close_r+0x1a>
 8003688:	6023      	str	r3, [r4, #0]
 800368a:	bd38      	pop	{r3, r4, r5, pc}
 800368c:	200002c0 	.word	0x200002c0

08003690 <_lseek_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4d07      	ldr	r5, [pc, #28]	; (80036b0 <_lseek_r+0x20>)
 8003694:	4604      	mov	r4, r0
 8003696:	4608      	mov	r0, r1
 8003698:	4611      	mov	r1, r2
 800369a:	2200      	movs	r2, #0
 800369c:	602a      	str	r2, [r5, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	f7fe fb96 	bl	8001dd0 <_lseek>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d102      	bne.n	80036ae <_lseek_r+0x1e>
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	b103      	cbz	r3, 80036ae <_lseek_r+0x1e>
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	200002c0 	.word	0x200002c0

080036b4 <_read_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4d07      	ldr	r5, [pc, #28]	; (80036d4 <_read_r+0x20>)
 80036b8:	4604      	mov	r4, r0
 80036ba:	4608      	mov	r0, r1
 80036bc:	4611      	mov	r1, r2
 80036be:	2200      	movs	r2, #0
 80036c0:	602a      	str	r2, [r5, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f7fe fb24 	bl	8001d10 <_read>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d102      	bne.n	80036d2 <_read_r+0x1e>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	b103      	cbz	r3, 80036d2 <_read_r+0x1e>
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	200002c0 	.word	0x200002c0

080036d8 <_write_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4d07      	ldr	r5, [pc, #28]	; (80036f8 <_write_r+0x20>)
 80036dc:	4604      	mov	r4, r0
 80036de:	4608      	mov	r0, r1
 80036e0:	4611      	mov	r1, r2
 80036e2:	2200      	movs	r2, #0
 80036e4:	602a      	str	r2, [r5, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f7fe fb2f 	bl	8001d4a <_write>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d102      	bne.n	80036f6 <_write_r+0x1e>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	b103      	cbz	r3, 80036f6 <_write_r+0x1e>
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	bd38      	pop	{r3, r4, r5, pc}
 80036f8:	200002c0 	.word	0x200002c0

080036fc <__errno>:
 80036fc:	4b01      	ldr	r3, [pc, #4]	; (8003704 <__errno+0x8>)
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000005c 	.word	0x2000005c

08003708 <__libc_init_array>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	4d0d      	ldr	r5, [pc, #52]	; (8003740 <__libc_init_array+0x38>)
 800370c:	4c0d      	ldr	r4, [pc, #52]	; (8003744 <__libc_init_array+0x3c>)
 800370e:	1b64      	subs	r4, r4, r5
 8003710:	10a4      	asrs	r4, r4, #2
 8003712:	2600      	movs	r6, #0
 8003714:	42a6      	cmp	r6, r4
 8003716:	d109      	bne.n	800372c <__libc_init_array+0x24>
 8003718:	4d0b      	ldr	r5, [pc, #44]	; (8003748 <__libc_init_array+0x40>)
 800371a:	4c0c      	ldr	r4, [pc, #48]	; (800374c <__libc_init_array+0x44>)
 800371c:	f000 ff78 	bl	8004610 <_init>
 8003720:	1b64      	subs	r4, r4, r5
 8003722:	10a4      	asrs	r4, r4, #2
 8003724:	2600      	movs	r6, #0
 8003726:	42a6      	cmp	r6, r4
 8003728:	d105      	bne.n	8003736 <__libc_init_array+0x2e>
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003730:	4798      	blx	r3
 8003732:	3601      	adds	r6, #1
 8003734:	e7ee      	b.n	8003714 <__libc_init_array+0xc>
 8003736:	f855 3b04 	ldr.w	r3, [r5], #4
 800373a:	4798      	blx	r3
 800373c:	3601      	adds	r6, #1
 800373e:	e7f2      	b.n	8003726 <__libc_init_array+0x1e>
 8003740:	080046f8 	.word	0x080046f8
 8003744:	080046f8 	.word	0x080046f8
 8003748:	080046f8 	.word	0x080046f8
 800374c:	080046fc 	.word	0x080046fc

08003750 <__retarget_lock_init_recursive>:
 8003750:	4770      	bx	lr

08003752 <__retarget_lock_acquire_recursive>:
 8003752:	4770      	bx	lr

08003754 <__retarget_lock_release_recursive>:
 8003754:	4770      	bx	lr
	...

08003758 <_free_r>:
 8003758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800375a:	2900      	cmp	r1, #0
 800375c:	d044      	beq.n	80037e8 <_free_r+0x90>
 800375e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003762:	9001      	str	r0, [sp, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f1a1 0404 	sub.w	r4, r1, #4
 800376a:	bfb8      	it	lt
 800376c:	18e4      	addlt	r4, r4, r3
 800376e:	f000 f8df 	bl	8003930 <__malloc_lock>
 8003772:	4a1e      	ldr	r2, [pc, #120]	; (80037ec <_free_r+0x94>)
 8003774:	9801      	ldr	r0, [sp, #4]
 8003776:	6813      	ldr	r3, [r2, #0]
 8003778:	b933      	cbnz	r3, 8003788 <_free_r+0x30>
 800377a:	6063      	str	r3, [r4, #4]
 800377c:	6014      	str	r4, [r2, #0]
 800377e:	b003      	add	sp, #12
 8003780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003784:	f000 b8da 	b.w	800393c <__malloc_unlock>
 8003788:	42a3      	cmp	r3, r4
 800378a:	d908      	bls.n	800379e <_free_r+0x46>
 800378c:	6825      	ldr	r5, [r4, #0]
 800378e:	1961      	adds	r1, r4, r5
 8003790:	428b      	cmp	r3, r1
 8003792:	bf01      	itttt	eq
 8003794:	6819      	ldreq	r1, [r3, #0]
 8003796:	685b      	ldreq	r3, [r3, #4]
 8003798:	1949      	addeq	r1, r1, r5
 800379a:	6021      	streq	r1, [r4, #0]
 800379c:	e7ed      	b.n	800377a <_free_r+0x22>
 800379e:	461a      	mov	r2, r3
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	b10b      	cbz	r3, 80037a8 <_free_r+0x50>
 80037a4:	42a3      	cmp	r3, r4
 80037a6:	d9fa      	bls.n	800379e <_free_r+0x46>
 80037a8:	6811      	ldr	r1, [r2, #0]
 80037aa:	1855      	adds	r5, r2, r1
 80037ac:	42a5      	cmp	r5, r4
 80037ae:	d10b      	bne.n	80037c8 <_free_r+0x70>
 80037b0:	6824      	ldr	r4, [r4, #0]
 80037b2:	4421      	add	r1, r4
 80037b4:	1854      	adds	r4, r2, r1
 80037b6:	42a3      	cmp	r3, r4
 80037b8:	6011      	str	r1, [r2, #0]
 80037ba:	d1e0      	bne.n	800377e <_free_r+0x26>
 80037bc:	681c      	ldr	r4, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	6053      	str	r3, [r2, #4]
 80037c2:	440c      	add	r4, r1
 80037c4:	6014      	str	r4, [r2, #0]
 80037c6:	e7da      	b.n	800377e <_free_r+0x26>
 80037c8:	d902      	bls.n	80037d0 <_free_r+0x78>
 80037ca:	230c      	movs	r3, #12
 80037cc:	6003      	str	r3, [r0, #0]
 80037ce:	e7d6      	b.n	800377e <_free_r+0x26>
 80037d0:	6825      	ldr	r5, [r4, #0]
 80037d2:	1961      	adds	r1, r4, r5
 80037d4:	428b      	cmp	r3, r1
 80037d6:	bf04      	itt	eq
 80037d8:	6819      	ldreq	r1, [r3, #0]
 80037da:	685b      	ldreq	r3, [r3, #4]
 80037dc:	6063      	str	r3, [r4, #4]
 80037de:	bf04      	itt	eq
 80037e0:	1949      	addeq	r1, r1, r5
 80037e2:	6021      	streq	r1, [r4, #0]
 80037e4:	6054      	str	r4, [r2, #4]
 80037e6:	e7ca      	b.n	800377e <_free_r+0x26>
 80037e8:	b003      	add	sp, #12
 80037ea:	bd30      	pop	{r4, r5, pc}
 80037ec:	200002c8 	.word	0x200002c8

080037f0 <sbrk_aligned>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	4e0e      	ldr	r6, [pc, #56]	; (800382c <sbrk_aligned+0x3c>)
 80037f4:	460c      	mov	r4, r1
 80037f6:	6831      	ldr	r1, [r6, #0]
 80037f8:	4605      	mov	r5, r0
 80037fa:	b911      	cbnz	r1, 8003802 <sbrk_aligned+0x12>
 80037fc:	f000 fe2e 	bl	800445c <_sbrk_r>
 8003800:	6030      	str	r0, [r6, #0]
 8003802:	4621      	mov	r1, r4
 8003804:	4628      	mov	r0, r5
 8003806:	f000 fe29 	bl	800445c <_sbrk_r>
 800380a:	1c43      	adds	r3, r0, #1
 800380c:	d00a      	beq.n	8003824 <sbrk_aligned+0x34>
 800380e:	1cc4      	adds	r4, r0, #3
 8003810:	f024 0403 	bic.w	r4, r4, #3
 8003814:	42a0      	cmp	r0, r4
 8003816:	d007      	beq.n	8003828 <sbrk_aligned+0x38>
 8003818:	1a21      	subs	r1, r4, r0
 800381a:	4628      	mov	r0, r5
 800381c:	f000 fe1e 	bl	800445c <_sbrk_r>
 8003820:	3001      	adds	r0, #1
 8003822:	d101      	bne.n	8003828 <sbrk_aligned+0x38>
 8003824:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003828:	4620      	mov	r0, r4
 800382a:	bd70      	pop	{r4, r5, r6, pc}
 800382c:	200002cc 	.word	0x200002cc

08003830 <_malloc_r>:
 8003830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003834:	1ccd      	adds	r5, r1, #3
 8003836:	f025 0503 	bic.w	r5, r5, #3
 800383a:	3508      	adds	r5, #8
 800383c:	2d0c      	cmp	r5, #12
 800383e:	bf38      	it	cc
 8003840:	250c      	movcc	r5, #12
 8003842:	2d00      	cmp	r5, #0
 8003844:	4607      	mov	r7, r0
 8003846:	db01      	blt.n	800384c <_malloc_r+0x1c>
 8003848:	42a9      	cmp	r1, r5
 800384a:	d905      	bls.n	8003858 <_malloc_r+0x28>
 800384c:	230c      	movs	r3, #12
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	2600      	movs	r6, #0
 8003852:	4630      	mov	r0, r6
 8003854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003858:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800392c <_malloc_r+0xfc>
 800385c:	f000 f868 	bl	8003930 <__malloc_lock>
 8003860:	f8d8 3000 	ldr.w	r3, [r8]
 8003864:	461c      	mov	r4, r3
 8003866:	bb5c      	cbnz	r4, 80038c0 <_malloc_r+0x90>
 8003868:	4629      	mov	r1, r5
 800386a:	4638      	mov	r0, r7
 800386c:	f7ff ffc0 	bl	80037f0 <sbrk_aligned>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	4604      	mov	r4, r0
 8003874:	d155      	bne.n	8003922 <_malloc_r+0xf2>
 8003876:	f8d8 4000 	ldr.w	r4, [r8]
 800387a:	4626      	mov	r6, r4
 800387c:	2e00      	cmp	r6, #0
 800387e:	d145      	bne.n	800390c <_malloc_r+0xdc>
 8003880:	2c00      	cmp	r4, #0
 8003882:	d048      	beq.n	8003916 <_malloc_r+0xe6>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	4631      	mov	r1, r6
 8003888:	4638      	mov	r0, r7
 800388a:	eb04 0903 	add.w	r9, r4, r3
 800388e:	f000 fde5 	bl	800445c <_sbrk_r>
 8003892:	4581      	cmp	r9, r0
 8003894:	d13f      	bne.n	8003916 <_malloc_r+0xe6>
 8003896:	6821      	ldr	r1, [r4, #0]
 8003898:	1a6d      	subs	r5, r5, r1
 800389a:	4629      	mov	r1, r5
 800389c:	4638      	mov	r0, r7
 800389e:	f7ff ffa7 	bl	80037f0 <sbrk_aligned>
 80038a2:	3001      	adds	r0, #1
 80038a4:	d037      	beq.n	8003916 <_malloc_r+0xe6>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	442b      	add	r3, r5
 80038aa:	6023      	str	r3, [r4, #0]
 80038ac:	f8d8 3000 	ldr.w	r3, [r8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d038      	beq.n	8003926 <_malloc_r+0xf6>
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	42a2      	cmp	r2, r4
 80038b8:	d12b      	bne.n	8003912 <_malloc_r+0xe2>
 80038ba:	2200      	movs	r2, #0
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	e00f      	b.n	80038e0 <_malloc_r+0xb0>
 80038c0:	6822      	ldr	r2, [r4, #0]
 80038c2:	1b52      	subs	r2, r2, r5
 80038c4:	d41f      	bmi.n	8003906 <_malloc_r+0xd6>
 80038c6:	2a0b      	cmp	r2, #11
 80038c8:	d917      	bls.n	80038fa <_malloc_r+0xca>
 80038ca:	1961      	adds	r1, r4, r5
 80038cc:	42a3      	cmp	r3, r4
 80038ce:	6025      	str	r5, [r4, #0]
 80038d0:	bf18      	it	ne
 80038d2:	6059      	strne	r1, [r3, #4]
 80038d4:	6863      	ldr	r3, [r4, #4]
 80038d6:	bf08      	it	eq
 80038d8:	f8c8 1000 	streq.w	r1, [r8]
 80038dc:	5162      	str	r2, [r4, r5]
 80038de:	604b      	str	r3, [r1, #4]
 80038e0:	4638      	mov	r0, r7
 80038e2:	f104 060b 	add.w	r6, r4, #11
 80038e6:	f000 f829 	bl	800393c <__malloc_unlock>
 80038ea:	f026 0607 	bic.w	r6, r6, #7
 80038ee:	1d23      	adds	r3, r4, #4
 80038f0:	1af2      	subs	r2, r6, r3
 80038f2:	d0ae      	beq.n	8003852 <_malloc_r+0x22>
 80038f4:	1b9b      	subs	r3, r3, r6
 80038f6:	50a3      	str	r3, [r4, r2]
 80038f8:	e7ab      	b.n	8003852 <_malloc_r+0x22>
 80038fa:	42a3      	cmp	r3, r4
 80038fc:	6862      	ldr	r2, [r4, #4]
 80038fe:	d1dd      	bne.n	80038bc <_malloc_r+0x8c>
 8003900:	f8c8 2000 	str.w	r2, [r8]
 8003904:	e7ec      	b.n	80038e0 <_malloc_r+0xb0>
 8003906:	4623      	mov	r3, r4
 8003908:	6864      	ldr	r4, [r4, #4]
 800390a:	e7ac      	b.n	8003866 <_malloc_r+0x36>
 800390c:	4634      	mov	r4, r6
 800390e:	6876      	ldr	r6, [r6, #4]
 8003910:	e7b4      	b.n	800387c <_malloc_r+0x4c>
 8003912:	4613      	mov	r3, r2
 8003914:	e7cc      	b.n	80038b0 <_malloc_r+0x80>
 8003916:	230c      	movs	r3, #12
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4638      	mov	r0, r7
 800391c:	f000 f80e 	bl	800393c <__malloc_unlock>
 8003920:	e797      	b.n	8003852 <_malloc_r+0x22>
 8003922:	6025      	str	r5, [r4, #0]
 8003924:	e7dc      	b.n	80038e0 <_malloc_r+0xb0>
 8003926:	605b      	str	r3, [r3, #4]
 8003928:	deff      	udf	#255	; 0xff
 800392a:	bf00      	nop
 800392c:	200002c8 	.word	0x200002c8

08003930 <__malloc_lock>:
 8003930:	4801      	ldr	r0, [pc, #4]	; (8003938 <__malloc_lock+0x8>)
 8003932:	f7ff bf0e 	b.w	8003752 <__retarget_lock_acquire_recursive>
 8003936:	bf00      	nop
 8003938:	200002c4 	.word	0x200002c4

0800393c <__malloc_unlock>:
 800393c:	4801      	ldr	r0, [pc, #4]	; (8003944 <__malloc_unlock+0x8>)
 800393e:	f7ff bf09 	b.w	8003754 <__retarget_lock_release_recursive>
 8003942:	bf00      	nop
 8003944:	200002c4 	.word	0x200002c4

08003948 <__ssputs_r>:
 8003948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800394c:	688e      	ldr	r6, [r1, #8]
 800394e:	461f      	mov	r7, r3
 8003950:	42be      	cmp	r6, r7
 8003952:	680b      	ldr	r3, [r1, #0]
 8003954:	4682      	mov	sl, r0
 8003956:	460c      	mov	r4, r1
 8003958:	4690      	mov	r8, r2
 800395a:	d82c      	bhi.n	80039b6 <__ssputs_r+0x6e>
 800395c:	898a      	ldrh	r2, [r1, #12]
 800395e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003962:	d026      	beq.n	80039b2 <__ssputs_r+0x6a>
 8003964:	6965      	ldr	r5, [r4, #20]
 8003966:	6909      	ldr	r1, [r1, #16]
 8003968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800396c:	eba3 0901 	sub.w	r9, r3, r1
 8003970:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003974:	1c7b      	adds	r3, r7, #1
 8003976:	444b      	add	r3, r9
 8003978:	106d      	asrs	r5, r5, #1
 800397a:	429d      	cmp	r5, r3
 800397c:	bf38      	it	cc
 800397e:	461d      	movcc	r5, r3
 8003980:	0553      	lsls	r3, r2, #21
 8003982:	d527      	bpl.n	80039d4 <__ssputs_r+0x8c>
 8003984:	4629      	mov	r1, r5
 8003986:	f7ff ff53 	bl	8003830 <_malloc_r>
 800398a:	4606      	mov	r6, r0
 800398c:	b360      	cbz	r0, 80039e8 <__ssputs_r+0xa0>
 800398e:	6921      	ldr	r1, [r4, #16]
 8003990:	464a      	mov	r2, r9
 8003992:	f000 fd73 	bl	800447c <memcpy>
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800399c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a0:	81a3      	strh	r3, [r4, #12]
 80039a2:	6126      	str	r6, [r4, #16]
 80039a4:	6165      	str	r5, [r4, #20]
 80039a6:	444e      	add	r6, r9
 80039a8:	eba5 0509 	sub.w	r5, r5, r9
 80039ac:	6026      	str	r6, [r4, #0]
 80039ae:	60a5      	str	r5, [r4, #8]
 80039b0:	463e      	mov	r6, r7
 80039b2:	42be      	cmp	r6, r7
 80039b4:	d900      	bls.n	80039b8 <__ssputs_r+0x70>
 80039b6:	463e      	mov	r6, r7
 80039b8:	6820      	ldr	r0, [r4, #0]
 80039ba:	4632      	mov	r2, r6
 80039bc:	4641      	mov	r1, r8
 80039be:	f000 fd33 	bl	8004428 <memmove>
 80039c2:	68a3      	ldr	r3, [r4, #8]
 80039c4:	1b9b      	subs	r3, r3, r6
 80039c6:	60a3      	str	r3, [r4, #8]
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	4433      	add	r3, r6
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	2000      	movs	r0, #0
 80039d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d4:	462a      	mov	r2, r5
 80039d6:	f000 fd5f 	bl	8004498 <_realloc_r>
 80039da:	4606      	mov	r6, r0
 80039dc:	2800      	cmp	r0, #0
 80039de:	d1e0      	bne.n	80039a2 <__ssputs_r+0x5a>
 80039e0:	6921      	ldr	r1, [r4, #16]
 80039e2:	4650      	mov	r0, sl
 80039e4:	f7ff feb8 	bl	8003758 <_free_r>
 80039e8:	230c      	movs	r3, #12
 80039ea:	f8ca 3000 	str.w	r3, [sl]
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f4:	81a3      	strh	r3, [r4, #12]
 80039f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039fa:	e7e9      	b.n	80039d0 <__ssputs_r+0x88>

080039fc <_svfiprintf_r>:
 80039fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	4698      	mov	r8, r3
 8003a02:	898b      	ldrh	r3, [r1, #12]
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	b09d      	sub	sp, #116	; 0x74
 8003a08:	4607      	mov	r7, r0
 8003a0a:	460d      	mov	r5, r1
 8003a0c:	4614      	mov	r4, r2
 8003a0e:	d50e      	bpl.n	8003a2e <_svfiprintf_r+0x32>
 8003a10:	690b      	ldr	r3, [r1, #16]
 8003a12:	b963      	cbnz	r3, 8003a2e <_svfiprintf_r+0x32>
 8003a14:	2140      	movs	r1, #64	; 0x40
 8003a16:	f7ff ff0b 	bl	8003830 <_malloc_r>
 8003a1a:	6028      	str	r0, [r5, #0]
 8003a1c:	6128      	str	r0, [r5, #16]
 8003a1e:	b920      	cbnz	r0, 8003a2a <_svfiprintf_r+0x2e>
 8003a20:	230c      	movs	r3, #12
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a28:	e0d0      	b.n	8003bcc <_svfiprintf_r+0x1d0>
 8003a2a:	2340      	movs	r3, #64	; 0x40
 8003a2c:	616b      	str	r3, [r5, #20]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9309      	str	r3, [sp, #36]	; 0x24
 8003a32:	2320      	movs	r3, #32
 8003a34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a38:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a3c:	2330      	movs	r3, #48	; 0x30
 8003a3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003be4 <_svfiprintf_r+0x1e8>
 8003a42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a46:	f04f 0901 	mov.w	r9, #1
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	469a      	mov	sl, r3
 8003a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a52:	b10a      	cbz	r2, 8003a58 <_svfiprintf_r+0x5c>
 8003a54:	2a25      	cmp	r2, #37	; 0x25
 8003a56:	d1f9      	bne.n	8003a4c <_svfiprintf_r+0x50>
 8003a58:	ebba 0b04 	subs.w	fp, sl, r4
 8003a5c:	d00b      	beq.n	8003a76 <_svfiprintf_r+0x7a>
 8003a5e:	465b      	mov	r3, fp
 8003a60:	4622      	mov	r2, r4
 8003a62:	4629      	mov	r1, r5
 8003a64:	4638      	mov	r0, r7
 8003a66:	f7ff ff6f 	bl	8003948 <__ssputs_r>
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	f000 80a9 	beq.w	8003bc2 <_svfiprintf_r+0x1c6>
 8003a70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a72:	445a      	add	r2, fp
 8003a74:	9209      	str	r2, [sp, #36]	; 0x24
 8003a76:	f89a 3000 	ldrb.w	r3, [sl]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80a1 	beq.w	8003bc2 <_svfiprintf_r+0x1c6>
 8003a80:	2300      	movs	r3, #0
 8003a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a8a:	f10a 0a01 	add.w	sl, sl, #1
 8003a8e:	9304      	str	r3, [sp, #16]
 8003a90:	9307      	str	r3, [sp, #28]
 8003a92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a96:	931a      	str	r3, [sp, #104]	; 0x68
 8003a98:	4654      	mov	r4, sl
 8003a9a:	2205      	movs	r2, #5
 8003a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa0:	4850      	ldr	r0, [pc, #320]	; (8003be4 <_svfiprintf_r+0x1e8>)
 8003aa2:	f7fc fbb5 	bl	8000210 <memchr>
 8003aa6:	9a04      	ldr	r2, [sp, #16]
 8003aa8:	b9d8      	cbnz	r0, 8003ae2 <_svfiprintf_r+0xe6>
 8003aaa:	06d0      	lsls	r0, r2, #27
 8003aac:	bf44      	itt	mi
 8003aae:	2320      	movmi	r3, #32
 8003ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ab4:	0711      	lsls	r1, r2, #28
 8003ab6:	bf44      	itt	mi
 8003ab8:	232b      	movmi	r3, #43	; 0x2b
 8003aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003abe:	f89a 3000 	ldrb.w	r3, [sl]
 8003ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac4:	d015      	beq.n	8003af2 <_svfiprintf_r+0xf6>
 8003ac6:	9a07      	ldr	r2, [sp, #28]
 8003ac8:	4654      	mov	r4, sl
 8003aca:	2000      	movs	r0, #0
 8003acc:	f04f 0c0a 	mov.w	ip, #10
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ad6:	3b30      	subs	r3, #48	; 0x30
 8003ad8:	2b09      	cmp	r3, #9
 8003ada:	d94d      	bls.n	8003b78 <_svfiprintf_r+0x17c>
 8003adc:	b1b0      	cbz	r0, 8003b0c <_svfiprintf_r+0x110>
 8003ade:	9207      	str	r2, [sp, #28]
 8003ae0:	e014      	b.n	8003b0c <_svfiprintf_r+0x110>
 8003ae2:	eba0 0308 	sub.w	r3, r0, r8
 8003ae6:	fa09 f303 	lsl.w	r3, r9, r3
 8003aea:	4313      	orrs	r3, r2
 8003aec:	9304      	str	r3, [sp, #16]
 8003aee:	46a2      	mov	sl, r4
 8003af0:	e7d2      	b.n	8003a98 <_svfiprintf_r+0x9c>
 8003af2:	9b03      	ldr	r3, [sp, #12]
 8003af4:	1d19      	adds	r1, r3, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	9103      	str	r1, [sp, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bfbb      	ittet	lt
 8003afe:	425b      	neglt	r3, r3
 8003b00:	f042 0202 	orrlt.w	r2, r2, #2
 8003b04:	9307      	strge	r3, [sp, #28]
 8003b06:	9307      	strlt	r3, [sp, #28]
 8003b08:	bfb8      	it	lt
 8003b0a:	9204      	strlt	r2, [sp, #16]
 8003b0c:	7823      	ldrb	r3, [r4, #0]
 8003b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b10:	d10c      	bne.n	8003b2c <_svfiprintf_r+0x130>
 8003b12:	7863      	ldrb	r3, [r4, #1]
 8003b14:	2b2a      	cmp	r3, #42	; 0x2a
 8003b16:	d134      	bne.n	8003b82 <_svfiprintf_r+0x186>
 8003b18:	9b03      	ldr	r3, [sp, #12]
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	9203      	str	r2, [sp, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bfb8      	it	lt
 8003b24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b28:	3402      	adds	r4, #2
 8003b2a:	9305      	str	r3, [sp, #20]
 8003b2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003bf4 <_svfiprintf_r+0x1f8>
 8003b30:	7821      	ldrb	r1, [r4, #0]
 8003b32:	2203      	movs	r2, #3
 8003b34:	4650      	mov	r0, sl
 8003b36:	f7fc fb6b 	bl	8000210 <memchr>
 8003b3a:	b138      	cbz	r0, 8003b4c <_svfiprintf_r+0x150>
 8003b3c:	9b04      	ldr	r3, [sp, #16]
 8003b3e:	eba0 000a 	sub.w	r0, r0, sl
 8003b42:	2240      	movs	r2, #64	; 0x40
 8003b44:	4082      	lsls	r2, r0
 8003b46:	4313      	orrs	r3, r2
 8003b48:	3401      	adds	r4, #1
 8003b4a:	9304      	str	r3, [sp, #16]
 8003b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b50:	4825      	ldr	r0, [pc, #148]	; (8003be8 <_svfiprintf_r+0x1ec>)
 8003b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b56:	2206      	movs	r2, #6
 8003b58:	f7fc fb5a 	bl	8000210 <memchr>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d038      	beq.n	8003bd2 <_svfiprintf_r+0x1d6>
 8003b60:	4b22      	ldr	r3, [pc, #136]	; (8003bec <_svfiprintf_r+0x1f0>)
 8003b62:	bb1b      	cbnz	r3, 8003bac <_svfiprintf_r+0x1b0>
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	3307      	adds	r3, #7
 8003b68:	f023 0307 	bic.w	r3, r3, #7
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	9303      	str	r3, [sp, #12]
 8003b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b72:	4433      	add	r3, r6
 8003b74:	9309      	str	r3, [sp, #36]	; 0x24
 8003b76:	e768      	b.n	8003a4a <_svfiprintf_r+0x4e>
 8003b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	2001      	movs	r0, #1
 8003b80:	e7a6      	b.n	8003ad0 <_svfiprintf_r+0xd4>
 8003b82:	2300      	movs	r3, #0
 8003b84:	3401      	adds	r4, #1
 8003b86:	9305      	str	r3, [sp, #20]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f04f 0c0a 	mov.w	ip, #10
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b94:	3a30      	subs	r2, #48	; 0x30
 8003b96:	2a09      	cmp	r2, #9
 8003b98:	d903      	bls.n	8003ba2 <_svfiprintf_r+0x1a6>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0c6      	beq.n	8003b2c <_svfiprintf_r+0x130>
 8003b9e:	9105      	str	r1, [sp, #20]
 8003ba0:	e7c4      	b.n	8003b2c <_svfiprintf_r+0x130>
 8003ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e7f0      	b.n	8003b8e <_svfiprintf_r+0x192>
 8003bac:	ab03      	add	r3, sp, #12
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	462a      	mov	r2, r5
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <_svfiprintf_r+0x1f4>)
 8003bb4:	a904      	add	r1, sp, #16
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	f3af 8000 	nop.w
 8003bbc:	1c42      	adds	r2, r0, #1
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	d1d6      	bne.n	8003b70 <_svfiprintf_r+0x174>
 8003bc2:	89ab      	ldrh	r3, [r5, #12]
 8003bc4:	065b      	lsls	r3, r3, #25
 8003bc6:	f53f af2d 	bmi.w	8003a24 <_svfiprintf_r+0x28>
 8003bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bcc:	b01d      	add	sp, #116	; 0x74
 8003bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd2:	ab03      	add	r3, sp, #12
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	462a      	mov	r2, r5
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <_svfiprintf_r+0x1f4>)
 8003bda:	a904      	add	r1, sp, #16
 8003bdc:	4638      	mov	r0, r7
 8003bde:	f000 f9bd 	bl	8003f5c <_printf_i>
 8003be2:	e7eb      	b.n	8003bbc <_svfiprintf_r+0x1c0>
 8003be4:	080046bc 	.word	0x080046bc
 8003be8:	080046c6 	.word	0x080046c6
 8003bec:	00000000 	.word	0x00000000
 8003bf0:	08003949 	.word	0x08003949
 8003bf4:	080046c2 	.word	0x080046c2

08003bf8 <__sfputc_r>:
 8003bf8:	6893      	ldr	r3, [r2, #8]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	b410      	push	{r4}
 8003c00:	6093      	str	r3, [r2, #8]
 8003c02:	da08      	bge.n	8003c16 <__sfputc_r+0x1e>
 8003c04:	6994      	ldr	r4, [r2, #24]
 8003c06:	42a3      	cmp	r3, r4
 8003c08:	db01      	blt.n	8003c0e <__sfputc_r+0x16>
 8003c0a:	290a      	cmp	r1, #10
 8003c0c:	d103      	bne.n	8003c16 <__sfputc_r+0x1e>
 8003c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c12:	f000 bb73 	b.w	80042fc <__swbuf_r>
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	1c58      	adds	r0, r3, #1
 8003c1a:	6010      	str	r0, [r2, #0]
 8003c1c:	7019      	strb	r1, [r3, #0]
 8003c1e:	4608      	mov	r0, r1
 8003c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <__sfputs_r>:
 8003c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c28:	4606      	mov	r6, r0
 8003c2a:	460f      	mov	r7, r1
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	18d5      	adds	r5, r2, r3
 8003c30:	42ac      	cmp	r4, r5
 8003c32:	d101      	bne.n	8003c38 <__sfputs_r+0x12>
 8003c34:	2000      	movs	r0, #0
 8003c36:	e007      	b.n	8003c48 <__sfputs_r+0x22>
 8003c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c3c:	463a      	mov	r2, r7
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f7ff ffda 	bl	8003bf8 <__sfputc_r>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d1f3      	bne.n	8003c30 <__sfputs_r+0xa>
 8003c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c4c <_vfiprintf_r>:
 8003c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c50:	460d      	mov	r5, r1
 8003c52:	b09d      	sub	sp, #116	; 0x74
 8003c54:	4614      	mov	r4, r2
 8003c56:	4698      	mov	r8, r3
 8003c58:	4606      	mov	r6, r0
 8003c5a:	b118      	cbz	r0, 8003c64 <_vfiprintf_r+0x18>
 8003c5c:	6a03      	ldr	r3, [r0, #32]
 8003c5e:	b90b      	cbnz	r3, 8003c64 <_vfiprintf_r+0x18>
 8003c60:	f7ff fc52 	bl	8003508 <__sinit>
 8003c64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c66:	07d9      	lsls	r1, r3, #31
 8003c68:	d405      	bmi.n	8003c76 <_vfiprintf_r+0x2a>
 8003c6a:	89ab      	ldrh	r3, [r5, #12]
 8003c6c:	059a      	lsls	r2, r3, #22
 8003c6e:	d402      	bmi.n	8003c76 <_vfiprintf_r+0x2a>
 8003c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c72:	f7ff fd6e 	bl	8003752 <__retarget_lock_acquire_recursive>
 8003c76:	89ab      	ldrh	r3, [r5, #12]
 8003c78:	071b      	lsls	r3, r3, #28
 8003c7a:	d501      	bpl.n	8003c80 <_vfiprintf_r+0x34>
 8003c7c:	692b      	ldr	r3, [r5, #16]
 8003c7e:	b99b      	cbnz	r3, 8003ca8 <_vfiprintf_r+0x5c>
 8003c80:	4629      	mov	r1, r5
 8003c82:	4630      	mov	r0, r6
 8003c84:	f000 fb78 	bl	8004378 <__swsetup_r>
 8003c88:	b170      	cbz	r0, 8003ca8 <_vfiprintf_r+0x5c>
 8003c8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c8c:	07dc      	lsls	r4, r3, #31
 8003c8e:	d504      	bpl.n	8003c9a <_vfiprintf_r+0x4e>
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c94:	b01d      	add	sp, #116	; 0x74
 8003c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9a:	89ab      	ldrh	r3, [r5, #12]
 8003c9c:	0598      	lsls	r0, r3, #22
 8003c9e:	d4f7      	bmi.n	8003c90 <_vfiprintf_r+0x44>
 8003ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ca2:	f7ff fd57 	bl	8003754 <__retarget_lock_release_recursive>
 8003ca6:	e7f3      	b.n	8003c90 <_vfiprintf_r+0x44>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9309      	str	r3, [sp, #36]	; 0x24
 8003cac:	2320      	movs	r3, #32
 8003cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cb6:	2330      	movs	r3, #48	; 0x30
 8003cb8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003e6c <_vfiprintf_r+0x220>
 8003cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cc0:	f04f 0901 	mov.w	r9, #1
 8003cc4:	4623      	mov	r3, r4
 8003cc6:	469a      	mov	sl, r3
 8003cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ccc:	b10a      	cbz	r2, 8003cd2 <_vfiprintf_r+0x86>
 8003cce:	2a25      	cmp	r2, #37	; 0x25
 8003cd0:	d1f9      	bne.n	8003cc6 <_vfiprintf_r+0x7a>
 8003cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8003cd6:	d00b      	beq.n	8003cf0 <_vfiprintf_r+0xa4>
 8003cd8:	465b      	mov	r3, fp
 8003cda:	4622      	mov	r2, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f7ff ffa1 	bl	8003c26 <__sfputs_r>
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	f000 80a9 	beq.w	8003e3c <_vfiprintf_r+0x1f0>
 8003cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cec:	445a      	add	r2, fp
 8003cee:	9209      	str	r2, [sp, #36]	; 0x24
 8003cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80a1 	beq.w	8003e3c <_vfiprintf_r+0x1f0>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d04:	f10a 0a01 	add.w	sl, sl, #1
 8003d08:	9304      	str	r3, [sp, #16]
 8003d0a:	9307      	str	r3, [sp, #28]
 8003d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d10:	931a      	str	r3, [sp, #104]	; 0x68
 8003d12:	4654      	mov	r4, sl
 8003d14:	2205      	movs	r2, #5
 8003d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d1a:	4854      	ldr	r0, [pc, #336]	; (8003e6c <_vfiprintf_r+0x220>)
 8003d1c:	f7fc fa78 	bl	8000210 <memchr>
 8003d20:	9a04      	ldr	r2, [sp, #16]
 8003d22:	b9d8      	cbnz	r0, 8003d5c <_vfiprintf_r+0x110>
 8003d24:	06d1      	lsls	r1, r2, #27
 8003d26:	bf44      	itt	mi
 8003d28:	2320      	movmi	r3, #32
 8003d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d2e:	0713      	lsls	r3, r2, #28
 8003d30:	bf44      	itt	mi
 8003d32:	232b      	movmi	r3, #43	; 0x2b
 8003d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d38:	f89a 3000 	ldrb.w	r3, [sl]
 8003d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d3e:	d015      	beq.n	8003d6c <_vfiprintf_r+0x120>
 8003d40:	9a07      	ldr	r2, [sp, #28]
 8003d42:	4654      	mov	r4, sl
 8003d44:	2000      	movs	r0, #0
 8003d46:	f04f 0c0a 	mov.w	ip, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d50:	3b30      	subs	r3, #48	; 0x30
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	d94d      	bls.n	8003df2 <_vfiprintf_r+0x1a6>
 8003d56:	b1b0      	cbz	r0, 8003d86 <_vfiprintf_r+0x13a>
 8003d58:	9207      	str	r2, [sp, #28]
 8003d5a:	e014      	b.n	8003d86 <_vfiprintf_r+0x13a>
 8003d5c:	eba0 0308 	sub.w	r3, r0, r8
 8003d60:	fa09 f303 	lsl.w	r3, r9, r3
 8003d64:	4313      	orrs	r3, r2
 8003d66:	9304      	str	r3, [sp, #16]
 8003d68:	46a2      	mov	sl, r4
 8003d6a:	e7d2      	b.n	8003d12 <_vfiprintf_r+0xc6>
 8003d6c:	9b03      	ldr	r3, [sp, #12]
 8003d6e:	1d19      	adds	r1, r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	9103      	str	r1, [sp, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bfbb      	ittet	lt
 8003d78:	425b      	neglt	r3, r3
 8003d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003d7e:	9307      	strge	r3, [sp, #28]
 8003d80:	9307      	strlt	r3, [sp, #28]
 8003d82:	bfb8      	it	lt
 8003d84:	9204      	strlt	r2, [sp, #16]
 8003d86:	7823      	ldrb	r3, [r4, #0]
 8003d88:	2b2e      	cmp	r3, #46	; 0x2e
 8003d8a:	d10c      	bne.n	8003da6 <_vfiprintf_r+0x15a>
 8003d8c:	7863      	ldrb	r3, [r4, #1]
 8003d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d90:	d134      	bne.n	8003dfc <_vfiprintf_r+0x1b0>
 8003d92:	9b03      	ldr	r3, [sp, #12]
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	9203      	str	r2, [sp, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bfb8      	it	lt
 8003d9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003da2:	3402      	adds	r4, #2
 8003da4:	9305      	str	r3, [sp, #20]
 8003da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003e7c <_vfiprintf_r+0x230>
 8003daa:	7821      	ldrb	r1, [r4, #0]
 8003dac:	2203      	movs	r2, #3
 8003dae:	4650      	mov	r0, sl
 8003db0:	f7fc fa2e 	bl	8000210 <memchr>
 8003db4:	b138      	cbz	r0, 8003dc6 <_vfiprintf_r+0x17a>
 8003db6:	9b04      	ldr	r3, [sp, #16]
 8003db8:	eba0 000a 	sub.w	r0, r0, sl
 8003dbc:	2240      	movs	r2, #64	; 0x40
 8003dbe:	4082      	lsls	r2, r0
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	3401      	adds	r4, #1
 8003dc4:	9304      	str	r3, [sp, #16]
 8003dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dca:	4829      	ldr	r0, [pc, #164]	; (8003e70 <_vfiprintf_r+0x224>)
 8003dcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dd0:	2206      	movs	r2, #6
 8003dd2:	f7fc fa1d 	bl	8000210 <memchr>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d03f      	beq.n	8003e5a <_vfiprintf_r+0x20e>
 8003dda:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <_vfiprintf_r+0x228>)
 8003ddc:	bb1b      	cbnz	r3, 8003e26 <_vfiprintf_r+0x1da>
 8003dde:	9b03      	ldr	r3, [sp, #12]
 8003de0:	3307      	adds	r3, #7
 8003de2:	f023 0307 	bic.w	r3, r3, #7
 8003de6:	3308      	adds	r3, #8
 8003de8:	9303      	str	r3, [sp, #12]
 8003dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dec:	443b      	add	r3, r7
 8003dee:	9309      	str	r3, [sp, #36]	; 0x24
 8003df0:	e768      	b.n	8003cc4 <_vfiprintf_r+0x78>
 8003df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003df6:	460c      	mov	r4, r1
 8003df8:	2001      	movs	r0, #1
 8003dfa:	e7a6      	b.n	8003d4a <_vfiprintf_r+0xfe>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	3401      	adds	r4, #1
 8003e00:	9305      	str	r3, [sp, #20]
 8003e02:	4619      	mov	r1, r3
 8003e04:	f04f 0c0a 	mov.w	ip, #10
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e0e:	3a30      	subs	r2, #48	; 0x30
 8003e10:	2a09      	cmp	r2, #9
 8003e12:	d903      	bls.n	8003e1c <_vfiprintf_r+0x1d0>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0c6      	beq.n	8003da6 <_vfiprintf_r+0x15a>
 8003e18:	9105      	str	r1, [sp, #20]
 8003e1a:	e7c4      	b.n	8003da6 <_vfiprintf_r+0x15a>
 8003e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e20:	4604      	mov	r4, r0
 8003e22:	2301      	movs	r3, #1
 8003e24:	e7f0      	b.n	8003e08 <_vfiprintf_r+0x1bc>
 8003e26:	ab03      	add	r3, sp, #12
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	462a      	mov	r2, r5
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <_vfiprintf_r+0x22c>)
 8003e2e:	a904      	add	r1, sp, #16
 8003e30:	4630      	mov	r0, r6
 8003e32:	f3af 8000 	nop.w
 8003e36:	4607      	mov	r7, r0
 8003e38:	1c78      	adds	r0, r7, #1
 8003e3a:	d1d6      	bne.n	8003dea <_vfiprintf_r+0x19e>
 8003e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e3e:	07d9      	lsls	r1, r3, #31
 8003e40:	d405      	bmi.n	8003e4e <_vfiprintf_r+0x202>
 8003e42:	89ab      	ldrh	r3, [r5, #12]
 8003e44:	059a      	lsls	r2, r3, #22
 8003e46:	d402      	bmi.n	8003e4e <_vfiprintf_r+0x202>
 8003e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e4a:	f7ff fc83 	bl	8003754 <__retarget_lock_release_recursive>
 8003e4e:	89ab      	ldrh	r3, [r5, #12]
 8003e50:	065b      	lsls	r3, r3, #25
 8003e52:	f53f af1d 	bmi.w	8003c90 <_vfiprintf_r+0x44>
 8003e56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e58:	e71c      	b.n	8003c94 <_vfiprintf_r+0x48>
 8003e5a:	ab03      	add	r3, sp, #12
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	462a      	mov	r2, r5
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <_vfiprintf_r+0x22c>)
 8003e62:	a904      	add	r1, sp, #16
 8003e64:	4630      	mov	r0, r6
 8003e66:	f000 f879 	bl	8003f5c <_printf_i>
 8003e6a:	e7e4      	b.n	8003e36 <_vfiprintf_r+0x1ea>
 8003e6c:	080046bc 	.word	0x080046bc
 8003e70:	080046c6 	.word	0x080046c6
 8003e74:	00000000 	.word	0x00000000
 8003e78:	08003c27 	.word	0x08003c27
 8003e7c:	080046c2 	.word	0x080046c2

08003e80 <_printf_common>:
 8003e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e84:	4616      	mov	r6, r2
 8003e86:	4699      	mov	r9, r3
 8003e88:	688a      	ldr	r2, [r1, #8]
 8003e8a:	690b      	ldr	r3, [r1, #16]
 8003e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e90:	4293      	cmp	r3, r2
 8003e92:	bfb8      	it	lt
 8003e94:	4613      	movlt	r3, r2
 8003e96:	6033      	str	r3, [r6, #0]
 8003e98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e9c:	4607      	mov	r7, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	b10a      	cbz	r2, 8003ea6 <_printf_common+0x26>
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	6033      	str	r3, [r6, #0]
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	0699      	lsls	r1, r3, #26
 8003eaa:	bf42      	ittt	mi
 8003eac:	6833      	ldrmi	r3, [r6, #0]
 8003eae:	3302      	addmi	r3, #2
 8003eb0:	6033      	strmi	r3, [r6, #0]
 8003eb2:	6825      	ldr	r5, [r4, #0]
 8003eb4:	f015 0506 	ands.w	r5, r5, #6
 8003eb8:	d106      	bne.n	8003ec8 <_printf_common+0x48>
 8003eba:	f104 0a19 	add.w	sl, r4, #25
 8003ebe:	68e3      	ldr	r3, [r4, #12]
 8003ec0:	6832      	ldr	r2, [r6, #0]
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	42ab      	cmp	r3, r5
 8003ec6:	dc26      	bgt.n	8003f16 <_printf_common+0x96>
 8003ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ecc:	1e13      	subs	r3, r2, #0
 8003ece:	6822      	ldr	r2, [r4, #0]
 8003ed0:	bf18      	it	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	0692      	lsls	r2, r2, #26
 8003ed6:	d42b      	bmi.n	8003f30 <_printf_common+0xb0>
 8003ed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003edc:	4649      	mov	r1, r9
 8003ede:	4638      	mov	r0, r7
 8003ee0:	47c0      	blx	r8
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d01e      	beq.n	8003f24 <_printf_common+0xa4>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	6922      	ldr	r2, [r4, #16]
 8003eea:	f003 0306 	and.w	r3, r3, #6
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	bf02      	ittt	eq
 8003ef2:	68e5      	ldreq	r5, [r4, #12]
 8003ef4:	6833      	ldreq	r3, [r6, #0]
 8003ef6:	1aed      	subeq	r5, r5, r3
 8003ef8:	68a3      	ldr	r3, [r4, #8]
 8003efa:	bf0c      	ite	eq
 8003efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f00:	2500      	movne	r5, #0
 8003f02:	4293      	cmp	r3, r2
 8003f04:	bfc4      	itt	gt
 8003f06:	1a9b      	subgt	r3, r3, r2
 8003f08:	18ed      	addgt	r5, r5, r3
 8003f0a:	2600      	movs	r6, #0
 8003f0c:	341a      	adds	r4, #26
 8003f0e:	42b5      	cmp	r5, r6
 8003f10:	d11a      	bne.n	8003f48 <_printf_common+0xc8>
 8003f12:	2000      	movs	r0, #0
 8003f14:	e008      	b.n	8003f28 <_printf_common+0xa8>
 8003f16:	2301      	movs	r3, #1
 8003f18:	4652      	mov	r2, sl
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	47c0      	blx	r8
 8003f20:	3001      	adds	r0, #1
 8003f22:	d103      	bne.n	8003f2c <_printf_common+0xac>
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2c:	3501      	adds	r5, #1
 8003f2e:	e7c6      	b.n	8003ebe <_printf_common+0x3e>
 8003f30:	18e1      	adds	r1, r4, r3
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	2030      	movs	r0, #48	; 0x30
 8003f36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f3a:	4422      	add	r2, r4
 8003f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f44:	3302      	adds	r3, #2
 8003f46:	e7c7      	b.n	8003ed8 <_printf_common+0x58>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	4638      	mov	r0, r7
 8003f50:	47c0      	blx	r8
 8003f52:	3001      	adds	r0, #1
 8003f54:	d0e6      	beq.n	8003f24 <_printf_common+0xa4>
 8003f56:	3601      	adds	r6, #1
 8003f58:	e7d9      	b.n	8003f0e <_printf_common+0x8e>
	...

08003f5c <_printf_i>:
 8003f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f60:	7e0f      	ldrb	r7, [r1, #24]
 8003f62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f64:	2f78      	cmp	r7, #120	; 0x78
 8003f66:	4691      	mov	r9, r2
 8003f68:	4680      	mov	r8, r0
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	469a      	mov	sl, r3
 8003f6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f72:	d807      	bhi.n	8003f84 <_printf_i+0x28>
 8003f74:	2f62      	cmp	r7, #98	; 0x62
 8003f76:	d80a      	bhi.n	8003f8e <_printf_i+0x32>
 8003f78:	2f00      	cmp	r7, #0
 8003f7a:	f000 80d4 	beq.w	8004126 <_printf_i+0x1ca>
 8003f7e:	2f58      	cmp	r7, #88	; 0x58
 8003f80:	f000 80c0 	beq.w	8004104 <_printf_i+0x1a8>
 8003f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f8c:	e03a      	b.n	8004004 <_printf_i+0xa8>
 8003f8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f92:	2b15      	cmp	r3, #21
 8003f94:	d8f6      	bhi.n	8003f84 <_printf_i+0x28>
 8003f96:	a101      	add	r1, pc, #4	; (adr r1, 8003f9c <_printf_i+0x40>)
 8003f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f9c:	08003ff5 	.word	0x08003ff5
 8003fa0:	08004009 	.word	0x08004009
 8003fa4:	08003f85 	.word	0x08003f85
 8003fa8:	08003f85 	.word	0x08003f85
 8003fac:	08003f85 	.word	0x08003f85
 8003fb0:	08003f85 	.word	0x08003f85
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08003f85 	.word	0x08003f85
 8003fbc:	08003f85 	.word	0x08003f85
 8003fc0:	08003f85 	.word	0x08003f85
 8003fc4:	08003f85 	.word	0x08003f85
 8003fc8:	0800410d 	.word	0x0800410d
 8003fcc:	08004035 	.word	0x08004035
 8003fd0:	080040c7 	.word	0x080040c7
 8003fd4:	08003f85 	.word	0x08003f85
 8003fd8:	08003f85 	.word	0x08003f85
 8003fdc:	0800412f 	.word	0x0800412f
 8003fe0:	08003f85 	.word	0x08003f85
 8003fe4:	08004035 	.word	0x08004035
 8003fe8:	08003f85 	.word	0x08003f85
 8003fec:	08003f85 	.word	0x08003f85
 8003ff0:	080040cf 	.word	0x080040cf
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	1d1a      	adds	r2, r3, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	602a      	str	r2, [r5, #0]
 8003ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004004:	2301      	movs	r3, #1
 8004006:	e09f      	b.n	8004148 <_printf_i+0x1ec>
 8004008:	6820      	ldr	r0, [r4, #0]
 800400a:	682b      	ldr	r3, [r5, #0]
 800400c:	0607      	lsls	r7, r0, #24
 800400e:	f103 0104 	add.w	r1, r3, #4
 8004012:	6029      	str	r1, [r5, #0]
 8004014:	d501      	bpl.n	800401a <_printf_i+0xbe>
 8004016:	681e      	ldr	r6, [r3, #0]
 8004018:	e003      	b.n	8004022 <_printf_i+0xc6>
 800401a:	0646      	lsls	r6, r0, #25
 800401c:	d5fb      	bpl.n	8004016 <_printf_i+0xba>
 800401e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004022:	2e00      	cmp	r6, #0
 8004024:	da03      	bge.n	800402e <_printf_i+0xd2>
 8004026:	232d      	movs	r3, #45	; 0x2d
 8004028:	4276      	negs	r6, r6
 800402a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800402e:	485a      	ldr	r0, [pc, #360]	; (8004198 <_printf_i+0x23c>)
 8004030:	230a      	movs	r3, #10
 8004032:	e012      	b.n	800405a <_printf_i+0xfe>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	6820      	ldr	r0, [r4, #0]
 8004038:	1d19      	adds	r1, r3, #4
 800403a:	6029      	str	r1, [r5, #0]
 800403c:	0605      	lsls	r5, r0, #24
 800403e:	d501      	bpl.n	8004044 <_printf_i+0xe8>
 8004040:	681e      	ldr	r6, [r3, #0]
 8004042:	e002      	b.n	800404a <_printf_i+0xee>
 8004044:	0641      	lsls	r1, r0, #25
 8004046:	d5fb      	bpl.n	8004040 <_printf_i+0xe4>
 8004048:	881e      	ldrh	r6, [r3, #0]
 800404a:	4853      	ldr	r0, [pc, #332]	; (8004198 <_printf_i+0x23c>)
 800404c:	2f6f      	cmp	r7, #111	; 0x6f
 800404e:	bf0c      	ite	eq
 8004050:	2308      	moveq	r3, #8
 8004052:	230a      	movne	r3, #10
 8004054:	2100      	movs	r1, #0
 8004056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800405a:	6865      	ldr	r5, [r4, #4]
 800405c:	60a5      	str	r5, [r4, #8]
 800405e:	2d00      	cmp	r5, #0
 8004060:	bfa2      	ittt	ge
 8004062:	6821      	ldrge	r1, [r4, #0]
 8004064:	f021 0104 	bicge.w	r1, r1, #4
 8004068:	6021      	strge	r1, [r4, #0]
 800406a:	b90e      	cbnz	r6, 8004070 <_printf_i+0x114>
 800406c:	2d00      	cmp	r5, #0
 800406e:	d04b      	beq.n	8004108 <_printf_i+0x1ac>
 8004070:	4615      	mov	r5, r2
 8004072:	fbb6 f1f3 	udiv	r1, r6, r3
 8004076:	fb03 6711 	mls	r7, r3, r1, r6
 800407a:	5dc7      	ldrb	r7, [r0, r7]
 800407c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004080:	4637      	mov	r7, r6
 8004082:	42bb      	cmp	r3, r7
 8004084:	460e      	mov	r6, r1
 8004086:	d9f4      	bls.n	8004072 <_printf_i+0x116>
 8004088:	2b08      	cmp	r3, #8
 800408a:	d10b      	bne.n	80040a4 <_printf_i+0x148>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	07de      	lsls	r6, r3, #31
 8004090:	d508      	bpl.n	80040a4 <_printf_i+0x148>
 8004092:	6923      	ldr	r3, [r4, #16]
 8004094:	6861      	ldr	r1, [r4, #4]
 8004096:	4299      	cmp	r1, r3
 8004098:	bfde      	ittt	le
 800409a:	2330      	movle	r3, #48	; 0x30
 800409c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040a4:	1b52      	subs	r2, r2, r5
 80040a6:	6122      	str	r2, [r4, #16]
 80040a8:	f8cd a000 	str.w	sl, [sp]
 80040ac:	464b      	mov	r3, r9
 80040ae:	aa03      	add	r2, sp, #12
 80040b0:	4621      	mov	r1, r4
 80040b2:	4640      	mov	r0, r8
 80040b4:	f7ff fee4 	bl	8003e80 <_printf_common>
 80040b8:	3001      	adds	r0, #1
 80040ba:	d14a      	bne.n	8004152 <_printf_i+0x1f6>
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040c0:	b004      	add	sp, #16
 80040c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	f043 0320 	orr.w	r3, r3, #32
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	4833      	ldr	r0, [pc, #204]	; (800419c <_printf_i+0x240>)
 80040d0:	2778      	movs	r7, #120	; 0x78
 80040d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	6829      	ldr	r1, [r5, #0]
 80040da:	061f      	lsls	r7, r3, #24
 80040dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80040e0:	d402      	bmi.n	80040e8 <_printf_i+0x18c>
 80040e2:	065f      	lsls	r7, r3, #25
 80040e4:	bf48      	it	mi
 80040e6:	b2b6      	uxthmi	r6, r6
 80040e8:	07df      	lsls	r7, r3, #31
 80040ea:	bf48      	it	mi
 80040ec:	f043 0320 	orrmi.w	r3, r3, #32
 80040f0:	6029      	str	r1, [r5, #0]
 80040f2:	bf48      	it	mi
 80040f4:	6023      	strmi	r3, [r4, #0]
 80040f6:	b91e      	cbnz	r6, 8004100 <_printf_i+0x1a4>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	f023 0320 	bic.w	r3, r3, #32
 80040fe:	6023      	str	r3, [r4, #0]
 8004100:	2310      	movs	r3, #16
 8004102:	e7a7      	b.n	8004054 <_printf_i+0xf8>
 8004104:	4824      	ldr	r0, [pc, #144]	; (8004198 <_printf_i+0x23c>)
 8004106:	e7e4      	b.n	80040d2 <_printf_i+0x176>
 8004108:	4615      	mov	r5, r2
 800410a:	e7bd      	b.n	8004088 <_printf_i+0x12c>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	6826      	ldr	r6, [r4, #0]
 8004110:	6961      	ldr	r1, [r4, #20]
 8004112:	1d18      	adds	r0, r3, #4
 8004114:	6028      	str	r0, [r5, #0]
 8004116:	0635      	lsls	r5, r6, #24
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	d501      	bpl.n	8004120 <_printf_i+0x1c4>
 800411c:	6019      	str	r1, [r3, #0]
 800411e:	e002      	b.n	8004126 <_printf_i+0x1ca>
 8004120:	0670      	lsls	r0, r6, #25
 8004122:	d5fb      	bpl.n	800411c <_printf_i+0x1c0>
 8004124:	8019      	strh	r1, [r3, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	6123      	str	r3, [r4, #16]
 800412a:	4615      	mov	r5, r2
 800412c:	e7bc      	b.n	80040a8 <_printf_i+0x14c>
 800412e:	682b      	ldr	r3, [r5, #0]
 8004130:	1d1a      	adds	r2, r3, #4
 8004132:	602a      	str	r2, [r5, #0]
 8004134:	681d      	ldr	r5, [r3, #0]
 8004136:	6862      	ldr	r2, [r4, #4]
 8004138:	2100      	movs	r1, #0
 800413a:	4628      	mov	r0, r5
 800413c:	f7fc f868 	bl	8000210 <memchr>
 8004140:	b108      	cbz	r0, 8004146 <_printf_i+0x1ea>
 8004142:	1b40      	subs	r0, r0, r5
 8004144:	6060      	str	r0, [r4, #4]
 8004146:	6863      	ldr	r3, [r4, #4]
 8004148:	6123      	str	r3, [r4, #16]
 800414a:	2300      	movs	r3, #0
 800414c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004150:	e7aa      	b.n	80040a8 <_printf_i+0x14c>
 8004152:	6923      	ldr	r3, [r4, #16]
 8004154:	462a      	mov	r2, r5
 8004156:	4649      	mov	r1, r9
 8004158:	4640      	mov	r0, r8
 800415a:	47d0      	blx	sl
 800415c:	3001      	adds	r0, #1
 800415e:	d0ad      	beq.n	80040bc <_printf_i+0x160>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	079b      	lsls	r3, r3, #30
 8004164:	d413      	bmi.n	800418e <_printf_i+0x232>
 8004166:	68e0      	ldr	r0, [r4, #12]
 8004168:	9b03      	ldr	r3, [sp, #12]
 800416a:	4298      	cmp	r0, r3
 800416c:	bfb8      	it	lt
 800416e:	4618      	movlt	r0, r3
 8004170:	e7a6      	b.n	80040c0 <_printf_i+0x164>
 8004172:	2301      	movs	r3, #1
 8004174:	4632      	mov	r2, r6
 8004176:	4649      	mov	r1, r9
 8004178:	4640      	mov	r0, r8
 800417a:	47d0      	blx	sl
 800417c:	3001      	adds	r0, #1
 800417e:	d09d      	beq.n	80040bc <_printf_i+0x160>
 8004180:	3501      	adds	r5, #1
 8004182:	68e3      	ldr	r3, [r4, #12]
 8004184:	9903      	ldr	r1, [sp, #12]
 8004186:	1a5b      	subs	r3, r3, r1
 8004188:	42ab      	cmp	r3, r5
 800418a:	dcf2      	bgt.n	8004172 <_printf_i+0x216>
 800418c:	e7eb      	b.n	8004166 <_printf_i+0x20a>
 800418e:	2500      	movs	r5, #0
 8004190:	f104 0619 	add.w	r6, r4, #25
 8004194:	e7f5      	b.n	8004182 <_printf_i+0x226>
 8004196:	bf00      	nop
 8004198:	080046cd 	.word	0x080046cd
 800419c:	080046de 	.word	0x080046de

080041a0 <__sflush_r>:
 80041a0:	898a      	ldrh	r2, [r1, #12]
 80041a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a6:	4605      	mov	r5, r0
 80041a8:	0710      	lsls	r0, r2, #28
 80041aa:	460c      	mov	r4, r1
 80041ac:	d458      	bmi.n	8004260 <__sflush_r+0xc0>
 80041ae:	684b      	ldr	r3, [r1, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	dc05      	bgt.n	80041c0 <__sflush_r+0x20>
 80041b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	dc02      	bgt.n	80041c0 <__sflush_r+0x20>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041c2:	2e00      	cmp	r6, #0
 80041c4:	d0f9      	beq.n	80041ba <__sflush_r+0x1a>
 80041c6:	2300      	movs	r3, #0
 80041c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041cc:	682f      	ldr	r7, [r5, #0]
 80041ce:	6a21      	ldr	r1, [r4, #32]
 80041d0:	602b      	str	r3, [r5, #0]
 80041d2:	d032      	beq.n	800423a <__sflush_r+0x9a>
 80041d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	075a      	lsls	r2, r3, #29
 80041da:	d505      	bpl.n	80041e8 <__sflush_r+0x48>
 80041dc:	6863      	ldr	r3, [r4, #4]
 80041de:	1ac0      	subs	r0, r0, r3
 80041e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041e2:	b10b      	cbz	r3, 80041e8 <__sflush_r+0x48>
 80041e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041e6:	1ac0      	subs	r0, r0, r3
 80041e8:	2300      	movs	r3, #0
 80041ea:	4602      	mov	r2, r0
 80041ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ee:	6a21      	ldr	r1, [r4, #32]
 80041f0:	4628      	mov	r0, r5
 80041f2:	47b0      	blx	r6
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	d106      	bne.n	8004208 <__sflush_r+0x68>
 80041fa:	6829      	ldr	r1, [r5, #0]
 80041fc:	291d      	cmp	r1, #29
 80041fe:	d82b      	bhi.n	8004258 <__sflush_r+0xb8>
 8004200:	4a29      	ldr	r2, [pc, #164]	; (80042a8 <__sflush_r+0x108>)
 8004202:	410a      	asrs	r2, r1
 8004204:	07d6      	lsls	r6, r2, #31
 8004206:	d427      	bmi.n	8004258 <__sflush_r+0xb8>
 8004208:	2200      	movs	r2, #0
 800420a:	6062      	str	r2, [r4, #4]
 800420c:	04d9      	lsls	r1, r3, #19
 800420e:	6922      	ldr	r2, [r4, #16]
 8004210:	6022      	str	r2, [r4, #0]
 8004212:	d504      	bpl.n	800421e <__sflush_r+0x7e>
 8004214:	1c42      	adds	r2, r0, #1
 8004216:	d101      	bne.n	800421c <__sflush_r+0x7c>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b903      	cbnz	r3, 800421e <__sflush_r+0x7e>
 800421c:	6560      	str	r0, [r4, #84]	; 0x54
 800421e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004220:	602f      	str	r7, [r5, #0]
 8004222:	2900      	cmp	r1, #0
 8004224:	d0c9      	beq.n	80041ba <__sflush_r+0x1a>
 8004226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800422a:	4299      	cmp	r1, r3
 800422c:	d002      	beq.n	8004234 <__sflush_r+0x94>
 800422e:	4628      	mov	r0, r5
 8004230:	f7ff fa92 	bl	8003758 <_free_r>
 8004234:	2000      	movs	r0, #0
 8004236:	6360      	str	r0, [r4, #52]	; 0x34
 8004238:	e7c0      	b.n	80041bc <__sflush_r+0x1c>
 800423a:	2301      	movs	r3, #1
 800423c:	4628      	mov	r0, r5
 800423e:	47b0      	blx	r6
 8004240:	1c41      	adds	r1, r0, #1
 8004242:	d1c8      	bne.n	80041d6 <__sflush_r+0x36>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0c5      	beq.n	80041d6 <__sflush_r+0x36>
 800424a:	2b1d      	cmp	r3, #29
 800424c:	d001      	beq.n	8004252 <__sflush_r+0xb2>
 800424e:	2b16      	cmp	r3, #22
 8004250:	d101      	bne.n	8004256 <__sflush_r+0xb6>
 8004252:	602f      	str	r7, [r5, #0]
 8004254:	e7b1      	b.n	80041ba <__sflush_r+0x1a>
 8004256:	89a3      	ldrh	r3, [r4, #12]
 8004258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425c:	81a3      	strh	r3, [r4, #12]
 800425e:	e7ad      	b.n	80041bc <__sflush_r+0x1c>
 8004260:	690f      	ldr	r7, [r1, #16]
 8004262:	2f00      	cmp	r7, #0
 8004264:	d0a9      	beq.n	80041ba <__sflush_r+0x1a>
 8004266:	0793      	lsls	r3, r2, #30
 8004268:	680e      	ldr	r6, [r1, #0]
 800426a:	bf08      	it	eq
 800426c:	694b      	ldreq	r3, [r1, #20]
 800426e:	600f      	str	r7, [r1, #0]
 8004270:	bf18      	it	ne
 8004272:	2300      	movne	r3, #0
 8004274:	eba6 0807 	sub.w	r8, r6, r7
 8004278:	608b      	str	r3, [r1, #8]
 800427a:	f1b8 0f00 	cmp.w	r8, #0
 800427e:	dd9c      	ble.n	80041ba <__sflush_r+0x1a>
 8004280:	6a21      	ldr	r1, [r4, #32]
 8004282:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004284:	4643      	mov	r3, r8
 8004286:	463a      	mov	r2, r7
 8004288:	4628      	mov	r0, r5
 800428a:	47b0      	blx	r6
 800428c:	2800      	cmp	r0, #0
 800428e:	dc06      	bgt.n	800429e <__sflush_r+0xfe>
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800429c:	e78e      	b.n	80041bc <__sflush_r+0x1c>
 800429e:	4407      	add	r7, r0
 80042a0:	eba8 0800 	sub.w	r8, r8, r0
 80042a4:	e7e9      	b.n	800427a <__sflush_r+0xda>
 80042a6:	bf00      	nop
 80042a8:	dfbffffe 	.word	0xdfbffffe

080042ac <_fflush_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	690b      	ldr	r3, [r1, #16]
 80042b0:	4605      	mov	r5, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	b913      	cbnz	r3, 80042bc <_fflush_r+0x10>
 80042b6:	2500      	movs	r5, #0
 80042b8:	4628      	mov	r0, r5
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	b118      	cbz	r0, 80042c6 <_fflush_r+0x1a>
 80042be:	6a03      	ldr	r3, [r0, #32]
 80042c0:	b90b      	cbnz	r3, 80042c6 <_fflush_r+0x1a>
 80042c2:	f7ff f921 	bl	8003508 <__sinit>
 80042c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f3      	beq.n	80042b6 <_fflush_r+0xa>
 80042ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042d0:	07d0      	lsls	r0, r2, #31
 80042d2:	d404      	bmi.n	80042de <_fflush_r+0x32>
 80042d4:	0599      	lsls	r1, r3, #22
 80042d6:	d402      	bmi.n	80042de <_fflush_r+0x32>
 80042d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042da:	f7ff fa3a 	bl	8003752 <__retarget_lock_acquire_recursive>
 80042de:	4628      	mov	r0, r5
 80042e0:	4621      	mov	r1, r4
 80042e2:	f7ff ff5d 	bl	80041a0 <__sflush_r>
 80042e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042e8:	07da      	lsls	r2, r3, #31
 80042ea:	4605      	mov	r5, r0
 80042ec:	d4e4      	bmi.n	80042b8 <_fflush_r+0xc>
 80042ee:	89a3      	ldrh	r3, [r4, #12]
 80042f0:	059b      	lsls	r3, r3, #22
 80042f2:	d4e1      	bmi.n	80042b8 <_fflush_r+0xc>
 80042f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042f6:	f7ff fa2d 	bl	8003754 <__retarget_lock_release_recursive>
 80042fa:	e7dd      	b.n	80042b8 <_fflush_r+0xc>

080042fc <__swbuf_r>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	460e      	mov	r6, r1
 8004300:	4614      	mov	r4, r2
 8004302:	4605      	mov	r5, r0
 8004304:	b118      	cbz	r0, 800430e <__swbuf_r+0x12>
 8004306:	6a03      	ldr	r3, [r0, #32]
 8004308:	b90b      	cbnz	r3, 800430e <__swbuf_r+0x12>
 800430a:	f7ff f8fd 	bl	8003508 <__sinit>
 800430e:	69a3      	ldr	r3, [r4, #24]
 8004310:	60a3      	str	r3, [r4, #8]
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	071a      	lsls	r2, r3, #28
 8004316:	d525      	bpl.n	8004364 <__swbuf_r+0x68>
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	b31b      	cbz	r3, 8004364 <__swbuf_r+0x68>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	6922      	ldr	r2, [r4, #16]
 8004320:	1a98      	subs	r0, r3, r2
 8004322:	6963      	ldr	r3, [r4, #20]
 8004324:	b2f6      	uxtb	r6, r6
 8004326:	4283      	cmp	r3, r0
 8004328:	4637      	mov	r7, r6
 800432a:	dc04      	bgt.n	8004336 <__swbuf_r+0x3a>
 800432c:	4621      	mov	r1, r4
 800432e:	4628      	mov	r0, r5
 8004330:	f7ff ffbc 	bl	80042ac <_fflush_r>
 8004334:	b9e0      	cbnz	r0, 8004370 <__swbuf_r+0x74>
 8004336:	68a3      	ldr	r3, [r4, #8]
 8004338:	3b01      	subs	r3, #1
 800433a:	60a3      	str	r3, [r4, #8]
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	6022      	str	r2, [r4, #0]
 8004342:	701e      	strb	r6, [r3, #0]
 8004344:	6962      	ldr	r2, [r4, #20]
 8004346:	1c43      	adds	r3, r0, #1
 8004348:	429a      	cmp	r2, r3
 800434a:	d004      	beq.n	8004356 <__swbuf_r+0x5a>
 800434c:	89a3      	ldrh	r3, [r4, #12]
 800434e:	07db      	lsls	r3, r3, #31
 8004350:	d506      	bpl.n	8004360 <__swbuf_r+0x64>
 8004352:	2e0a      	cmp	r6, #10
 8004354:	d104      	bne.n	8004360 <__swbuf_r+0x64>
 8004356:	4621      	mov	r1, r4
 8004358:	4628      	mov	r0, r5
 800435a:	f7ff ffa7 	bl	80042ac <_fflush_r>
 800435e:	b938      	cbnz	r0, 8004370 <__swbuf_r+0x74>
 8004360:	4638      	mov	r0, r7
 8004362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004364:	4621      	mov	r1, r4
 8004366:	4628      	mov	r0, r5
 8004368:	f000 f806 	bl	8004378 <__swsetup_r>
 800436c:	2800      	cmp	r0, #0
 800436e:	d0d5      	beq.n	800431c <__swbuf_r+0x20>
 8004370:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004374:	e7f4      	b.n	8004360 <__swbuf_r+0x64>
	...

08004378 <__swsetup_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4b2a      	ldr	r3, [pc, #168]	; (8004424 <__swsetup_r+0xac>)
 800437c:	4605      	mov	r5, r0
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	460c      	mov	r4, r1
 8004382:	b118      	cbz	r0, 800438c <__swsetup_r+0x14>
 8004384:	6a03      	ldr	r3, [r0, #32]
 8004386:	b90b      	cbnz	r3, 800438c <__swsetup_r+0x14>
 8004388:	f7ff f8be 	bl	8003508 <__sinit>
 800438c:	89a3      	ldrh	r3, [r4, #12]
 800438e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004392:	0718      	lsls	r0, r3, #28
 8004394:	d422      	bmi.n	80043dc <__swsetup_r+0x64>
 8004396:	06d9      	lsls	r1, r3, #27
 8004398:	d407      	bmi.n	80043aa <__swsetup_r+0x32>
 800439a:	2309      	movs	r3, #9
 800439c:	602b      	str	r3, [r5, #0]
 800439e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043a2:	81a3      	strh	r3, [r4, #12]
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043a8:	e034      	b.n	8004414 <__swsetup_r+0x9c>
 80043aa:	0758      	lsls	r0, r3, #29
 80043ac:	d512      	bpl.n	80043d4 <__swsetup_r+0x5c>
 80043ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043b0:	b141      	cbz	r1, 80043c4 <__swsetup_r+0x4c>
 80043b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043b6:	4299      	cmp	r1, r3
 80043b8:	d002      	beq.n	80043c0 <__swsetup_r+0x48>
 80043ba:	4628      	mov	r0, r5
 80043bc:	f7ff f9cc 	bl	8003758 <_free_r>
 80043c0:	2300      	movs	r3, #0
 80043c2:	6363      	str	r3, [r4, #52]	; 0x34
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043ca:	81a3      	strh	r3, [r4, #12]
 80043cc:	2300      	movs	r3, #0
 80043ce:	6063      	str	r3, [r4, #4]
 80043d0:	6923      	ldr	r3, [r4, #16]
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	f043 0308 	orr.w	r3, r3, #8
 80043da:	81a3      	strh	r3, [r4, #12]
 80043dc:	6923      	ldr	r3, [r4, #16]
 80043de:	b94b      	cbnz	r3, 80043f4 <__swsetup_r+0x7c>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ea:	d003      	beq.n	80043f4 <__swsetup_r+0x7c>
 80043ec:	4621      	mov	r1, r4
 80043ee:	4628      	mov	r0, r5
 80043f0:	f000 f8a7 	bl	8004542 <__smakebuf_r>
 80043f4:	89a0      	ldrh	r0, [r4, #12]
 80043f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043fa:	f010 0301 	ands.w	r3, r0, #1
 80043fe:	d00a      	beq.n	8004416 <__swsetup_r+0x9e>
 8004400:	2300      	movs	r3, #0
 8004402:	60a3      	str	r3, [r4, #8]
 8004404:	6963      	ldr	r3, [r4, #20]
 8004406:	425b      	negs	r3, r3
 8004408:	61a3      	str	r3, [r4, #24]
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	b943      	cbnz	r3, 8004420 <__swsetup_r+0xa8>
 800440e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004412:	d1c4      	bne.n	800439e <__swsetup_r+0x26>
 8004414:	bd38      	pop	{r3, r4, r5, pc}
 8004416:	0781      	lsls	r1, r0, #30
 8004418:	bf58      	it	pl
 800441a:	6963      	ldrpl	r3, [r4, #20]
 800441c:	60a3      	str	r3, [r4, #8]
 800441e:	e7f4      	b.n	800440a <__swsetup_r+0x92>
 8004420:	2000      	movs	r0, #0
 8004422:	e7f7      	b.n	8004414 <__swsetup_r+0x9c>
 8004424:	2000005c 	.word	0x2000005c

08004428 <memmove>:
 8004428:	4288      	cmp	r0, r1
 800442a:	b510      	push	{r4, lr}
 800442c:	eb01 0402 	add.w	r4, r1, r2
 8004430:	d902      	bls.n	8004438 <memmove+0x10>
 8004432:	4284      	cmp	r4, r0
 8004434:	4623      	mov	r3, r4
 8004436:	d807      	bhi.n	8004448 <memmove+0x20>
 8004438:	1e43      	subs	r3, r0, #1
 800443a:	42a1      	cmp	r1, r4
 800443c:	d008      	beq.n	8004450 <memmove+0x28>
 800443e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004446:	e7f8      	b.n	800443a <memmove+0x12>
 8004448:	4402      	add	r2, r0
 800444a:	4601      	mov	r1, r0
 800444c:	428a      	cmp	r2, r1
 800444e:	d100      	bne.n	8004452 <memmove+0x2a>
 8004450:	bd10      	pop	{r4, pc}
 8004452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800445a:	e7f7      	b.n	800444c <memmove+0x24>

0800445c <_sbrk_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4d06      	ldr	r5, [pc, #24]	; (8004478 <_sbrk_r+0x1c>)
 8004460:	2300      	movs	r3, #0
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fd fcc0 	bl	8001dec <_sbrk>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_sbrk_r+0x1a>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_sbrk_r+0x1a>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	200002c0 	.word	0x200002c0

0800447c <memcpy>:
 800447c:	440a      	add	r2, r1
 800447e:	4291      	cmp	r1, r2
 8004480:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004484:	d100      	bne.n	8004488 <memcpy+0xc>
 8004486:	4770      	bx	lr
 8004488:	b510      	push	{r4, lr}
 800448a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800448e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004492:	4291      	cmp	r1, r2
 8004494:	d1f9      	bne.n	800448a <memcpy+0xe>
 8004496:	bd10      	pop	{r4, pc}

08004498 <_realloc_r>:
 8004498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800449c:	4680      	mov	r8, r0
 800449e:	4614      	mov	r4, r2
 80044a0:	460e      	mov	r6, r1
 80044a2:	b921      	cbnz	r1, 80044ae <_realloc_r+0x16>
 80044a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044a8:	4611      	mov	r1, r2
 80044aa:	f7ff b9c1 	b.w	8003830 <_malloc_r>
 80044ae:	b92a      	cbnz	r2, 80044bc <_realloc_r+0x24>
 80044b0:	f7ff f952 	bl	8003758 <_free_r>
 80044b4:	4625      	mov	r5, r4
 80044b6:	4628      	mov	r0, r5
 80044b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044bc:	f000 f8a0 	bl	8004600 <_malloc_usable_size_r>
 80044c0:	4284      	cmp	r4, r0
 80044c2:	4607      	mov	r7, r0
 80044c4:	d802      	bhi.n	80044cc <_realloc_r+0x34>
 80044c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044ca:	d812      	bhi.n	80044f2 <_realloc_r+0x5a>
 80044cc:	4621      	mov	r1, r4
 80044ce:	4640      	mov	r0, r8
 80044d0:	f7ff f9ae 	bl	8003830 <_malloc_r>
 80044d4:	4605      	mov	r5, r0
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d0ed      	beq.n	80044b6 <_realloc_r+0x1e>
 80044da:	42bc      	cmp	r4, r7
 80044dc:	4622      	mov	r2, r4
 80044de:	4631      	mov	r1, r6
 80044e0:	bf28      	it	cs
 80044e2:	463a      	movcs	r2, r7
 80044e4:	f7ff ffca 	bl	800447c <memcpy>
 80044e8:	4631      	mov	r1, r6
 80044ea:	4640      	mov	r0, r8
 80044ec:	f7ff f934 	bl	8003758 <_free_r>
 80044f0:	e7e1      	b.n	80044b6 <_realloc_r+0x1e>
 80044f2:	4635      	mov	r5, r6
 80044f4:	e7df      	b.n	80044b6 <_realloc_r+0x1e>

080044f6 <__swhatbuf_r>:
 80044f6:	b570      	push	{r4, r5, r6, lr}
 80044f8:	460c      	mov	r4, r1
 80044fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fe:	2900      	cmp	r1, #0
 8004500:	b096      	sub	sp, #88	; 0x58
 8004502:	4615      	mov	r5, r2
 8004504:	461e      	mov	r6, r3
 8004506:	da0d      	bge.n	8004524 <__swhatbuf_r+0x2e>
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	bf0c      	ite	eq
 8004514:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004518:	2340      	movne	r3, #64	; 0x40
 800451a:	2000      	movs	r0, #0
 800451c:	6031      	str	r1, [r6, #0]
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	b016      	add	sp, #88	; 0x58
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	466a      	mov	r2, sp
 8004526:	f000 f849 	bl	80045bc <_fstat_r>
 800452a:	2800      	cmp	r0, #0
 800452c:	dbec      	blt.n	8004508 <__swhatbuf_r+0x12>
 800452e:	9901      	ldr	r1, [sp, #4]
 8004530:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004534:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004538:	4259      	negs	r1, r3
 800453a:	4159      	adcs	r1, r3
 800453c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004540:	e7eb      	b.n	800451a <__swhatbuf_r+0x24>

08004542 <__smakebuf_r>:
 8004542:	898b      	ldrh	r3, [r1, #12]
 8004544:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004546:	079d      	lsls	r5, r3, #30
 8004548:	4606      	mov	r6, r0
 800454a:	460c      	mov	r4, r1
 800454c:	d507      	bpl.n	800455e <__smakebuf_r+0x1c>
 800454e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004552:	6023      	str	r3, [r4, #0]
 8004554:	6123      	str	r3, [r4, #16]
 8004556:	2301      	movs	r3, #1
 8004558:	6163      	str	r3, [r4, #20]
 800455a:	b002      	add	sp, #8
 800455c:	bd70      	pop	{r4, r5, r6, pc}
 800455e:	ab01      	add	r3, sp, #4
 8004560:	466a      	mov	r2, sp
 8004562:	f7ff ffc8 	bl	80044f6 <__swhatbuf_r>
 8004566:	9900      	ldr	r1, [sp, #0]
 8004568:	4605      	mov	r5, r0
 800456a:	4630      	mov	r0, r6
 800456c:	f7ff f960 	bl	8003830 <_malloc_r>
 8004570:	b948      	cbnz	r0, 8004586 <__smakebuf_r+0x44>
 8004572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004576:	059a      	lsls	r2, r3, #22
 8004578:	d4ef      	bmi.n	800455a <__smakebuf_r+0x18>
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	f043 0302 	orr.w	r3, r3, #2
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	e7e3      	b.n	800454e <__smakebuf_r+0xc>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	6020      	str	r0, [r4, #0]
 800458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	9b00      	ldr	r3, [sp, #0]
 8004592:	6163      	str	r3, [r4, #20]
 8004594:	9b01      	ldr	r3, [sp, #4]
 8004596:	6120      	str	r0, [r4, #16]
 8004598:	b15b      	cbz	r3, 80045b2 <__smakebuf_r+0x70>
 800459a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800459e:	4630      	mov	r0, r6
 80045a0:	f000 f81e 	bl	80045e0 <_isatty_r>
 80045a4:	b128      	cbz	r0, 80045b2 <__smakebuf_r+0x70>
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	f023 0303 	bic.w	r3, r3, #3
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	81a3      	strh	r3, [r4, #12]
 80045b2:	89a3      	ldrh	r3, [r4, #12]
 80045b4:	431d      	orrs	r5, r3
 80045b6:	81a5      	strh	r5, [r4, #12]
 80045b8:	e7cf      	b.n	800455a <__smakebuf_r+0x18>
	...

080045bc <_fstat_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4d07      	ldr	r5, [pc, #28]	; (80045dc <_fstat_r+0x20>)
 80045c0:	2300      	movs	r3, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	f7fd fbe6 	bl	8001d9a <_fstat>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d102      	bne.n	80045d8 <_fstat_r+0x1c>
 80045d2:	682b      	ldr	r3, [r5, #0]
 80045d4:	b103      	cbz	r3, 80045d8 <_fstat_r+0x1c>
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	200002c0 	.word	0x200002c0

080045e0 <_isatty_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4d06      	ldr	r5, [pc, #24]	; (80045fc <_isatty_r+0x1c>)
 80045e4:	2300      	movs	r3, #0
 80045e6:	4604      	mov	r4, r0
 80045e8:	4608      	mov	r0, r1
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	f7fd fbe5 	bl	8001dba <_isatty>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d102      	bne.n	80045fa <_isatty_r+0x1a>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b103      	cbz	r3, 80045fa <_isatty_r+0x1a>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	200002c0 	.word	0x200002c0

08004600 <_malloc_usable_size_r>:
 8004600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004604:	1f18      	subs	r0, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	bfbc      	itt	lt
 800460a:	580b      	ldrlt	r3, [r1, r0]
 800460c:	18c0      	addlt	r0, r0, r3
 800460e:	4770      	bx	lr

08004610 <_init>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr

0800461c <_fini>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr
