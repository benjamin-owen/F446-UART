
F446dev-remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004568  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08004628  08004628  00014628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e8  080047e8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080047e8  080047e8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047e8  080047e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080047f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000005c  0800484c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  0800484c  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085f9  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d50  00000000  00000000  000286c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002a410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007dd  00000000  00000000  0002aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c97  00000000  00000000  0002b685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a298  00000000  00000000  0004231c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008aa6e  00000000  00000000  0004c5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a34  00000000  00000000  000d7024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d9a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800460c 	.word	0x0800460c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	0800460c 	.word	0x0800460c

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_ddiv>:
 8000404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000406:	4657      	mov	r7, sl
 8000408:	464e      	mov	r6, r9
 800040a:	4645      	mov	r5, r8
 800040c:	46de      	mov	lr, fp
 800040e:	b5e0      	push	{r5, r6, r7, lr}
 8000410:	030c      	lsls	r4, r1, #12
 8000412:	001f      	movs	r7, r3
 8000414:	004b      	lsls	r3, r1, #1
 8000416:	4681      	mov	r9, r0
 8000418:	4692      	mov	sl, r2
 800041a:	0005      	movs	r5, r0
 800041c:	b085      	sub	sp, #20
 800041e:	0b24      	lsrs	r4, r4, #12
 8000420:	0d5b      	lsrs	r3, r3, #21
 8000422:	0fce      	lsrs	r6, r1, #31
 8000424:	2b00      	cmp	r3, #0
 8000426:	d100      	bne.n	800042a <__aeabi_ddiv+0x26>
 8000428:	e152      	b.n	80006d0 <__aeabi_ddiv+0x2cc>
 800042a:	4ad2      	ldr	r2, [pc, #840]	; (8000774 <__aeabi_ddiv+0x370>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d100      	bne.n	8000432 <__aeabi_ddiv+0x2e>
 8000430:	e16e      	b.n	8000710 <__aeabi_ddiv+0x30c>
 8000432:	0f42      	lsrs	r2, r0, #29
 8000434:	00e4      	lsls	r4, r4, #3
 8000436:	4314      	orrs	r4, r2
 8000438:	2280      	movs	r2, #128	; 0x80
 800043a:	0412      	lsls	r2, r2, #16
 800043c:	4322      	orrs	r2, r4
 800043e:	4690      	mov	r8, r2
 8000440:	4acd      	ldr	r2, [pc, #820]	; (8000778 <__aeabi_ddiv+0x374>)
 8000442:	00c5      	lsls	r5, r0, #3
 8000444:	4693      	mov	fp, r2
 8000446:	449b      	add	fp, r3
 8000448:	2300      	movs	r3, #0
 800044a:	4699      	mov	r9, r3
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	033c      	lsls	r4, r7, #12
 8000450:	007b      	lsls	r3, r7, #1
 8000452:	4650      	mov	r0, sl
 8000454:	0b24      	lsrs	r4, r4, #12
 8000456:	0d5b      	lsrs	r3, r3, #21
 8000458:	0fff      	lsrs	r7, r7, #31
 800045a:	2b00      	cmp	r3, #0
 800045c:	d100      	bne.n	8000460 <__aeabi_ddiv+0x5c>
 800045e:	e11a      	b.n	8000696 <__aeabi_ddiv+0x292>
 8000460:	4ac4      	ldr	r2, [pc, #784]	; (8000774 <__aeabi_ddiv+0x370>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d100      	bne.n	8000468 <__aeabi_ddiv+0x64>
 8000466:	e15e      	b.n	8000726 <__aeabi_ddiv+0x322>
 8000468:	0f42      	lsrs	r2, r0, #29
 800046a:	00e4      	lsls	r4, r4, #3
 800046c:	4322      	orrs	r2, r4
 800046e:	2480      	movs	r4, #128	; 0x80
 8000470:	0424      	lsls	r4, r4, #16
 8000472:	4314      	orrs	r4, r2
 8000474:	4ac0      	ldr	r2, [pc, #768]	; (8000778 <__aeabi_ddiv+0x374>)
 8000476:	00c1      	lsls	r1, r0, #3
 8000478:	4694      	mov	ip, r2
 800047a:	465a      	mov	r2, fp
 800047c:	4463      	add	r3, ip
 800047e:	1ad3      	subs	r3, r2, r3
 8000480:	469b      	mov	fp, r3
 8000482:	2000      	movs	r0, #0
 8000484:	0033      	movs	r3, r6
 8000486:	407b      	eors	r3, r7
 8000488:	469a      	mov	sl, r3
 800048a:	464b      	mov	r3, r9
 800048c:	2b0f      	cmp	r3, #15
 800048e:	d827      	bhi.n	80004e0 <__aeabi_ddiv+0xdc>
 8000490:	4aba      	ldr	r2, [pc, #744]	; (800077c <__aeabi_ddiv+0x378>)
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	58d3      	ldr	r3, [r2, r3]
 8000496:	469f      	mov	pc, r3
 8000498:	46b2      	mov	sl, r6
 800049a:	9b00      	ldr	r3, [sp, #0]
 800049c:	2b02      	cmp	r3, #2
 800049e:	d016      	beq.n	80004ce <__aeabi_ddiv+0xca>
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d100      	bne.n	80004a6 <__aeabi_ddiv+0xa2>
 80004a4:	e287      	b.n	80009b6 <__aeabi_ddiv+0x5b2>
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d000      	beq.n	80004ac <__aeabi_ddiv+0xa8>
 80004aa:	e0d5      	b.n	8000658 <__aeabi_ddiv+0x254>
 80004ac:	2300      	movs	r3, #0
 80004ae:	2200      	movs	r2, #0
 80004b0:	2500      	movs	r5, #0
 80004b2:	051b      	lsls	r3, r3, #20
 80004b4:	4313      	orrs	r3, r2
 80004b6:	4652      	mov	r2, sl
 80004b8:	07d2      	lsls	r2, r2, #31
 80004ba:	4313      	orrs	r3, r2
 80004bc:	0028      	movs	r0, r5
 80004be:	0019      	movs	r1, r3
 80004c0:	b005      	add	sp, #20
 80004c2:	bcf0      	pop	{r4, r5, r6, r7}
 80004c4:	46bb      	mov	fp, r7
 80004c6:	46b2      	mov	sl, r6
 80004c8:	46a9      	mov	r9, r5
 80004ca:	46a0      	mov	r8, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	2200      	movs	r2, #0
 80004d0:	2500      	movs	r5, #0
 80004d2:	4ba8      	ldr	r3, [pc, #672]	; (8000774 <__aeabi_ddiv+0x370>)
 80004d4:	e7ed      	b.n	80004b2 <__aeabi_ddiv+0xae>
 80004d6:	46ba      	mov	sl, r7
 80004d8:	46a0      	mov	r8, r4
 80004da:	000d      	movs	r5, r1
 80004dc:	9000      	str	r0, [sp, #0]
 80004de:	e7dc      	b.n	800049a <__aeabi_ddiv+0x96>
 80004e0:	4544      	cmp	r4, r8
 80004e2:	d200      	bcs.n	80004e6 <__aeabi_ddiv+0xe2>
 80004e4:	e1c4      	b.n	8000870 <__aeabi_ddiv+0x46c>
 80004e6:	d100      	bne.n	80004ea <__aeabi_ddiv+0xe6>
 80004e8:	e1bf      	b.n	800086a <__aeabi_ddiv+0x466>
 80004ea:	2301      	movs	r3, #1
 80004ec:	425b      	negs	r3, r3
 80004ee:	469c      	mov	ip, r3
 80004f0:	002e      	movs	r6, r5
 80004f2:	4640      	mov	r0, r8
 80004f4:	2500      	movs	r5, #0
 80004f6:	44e3      	add	fp, ip
 80004f8:	0223      	lsls	r3, r4, #8
 80004fa:	0e0c      	lsrs	r4, r1, #24
 80004fc:	431c      	orrs	r4, r3
 80004fe:	0c1b      	lsrs	r3, r3, #16
 8000500:	4699      	mov	r9, r3
 8000502:	0423      	lsls	r3, r4, #16
 8000504:	020a      	lsls	r2, r1, #8
 8000506:	0c1f      	lsrs	r7, r3, #16
 8000508:	4649      	mov	r1, r9
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9701      	str	r7, [sp, #4]
 800050e:	f7ff fe89 	bl	8000224 <__aeabi_uidivmod>
 8000512:	0002      	movs	r2, r0
 8000514:	437a      	muls	r2, r7
 8000516:	040b      	lsls	r3, r1, #16
 8000518:	0c31      	lsrs	r1, r6, #16
 800051a:	4680      	mov	r8, r0
 800051c:	4319      	orrs	r1, r3
 800051e:	428a      	cmp	r2, r1
 8000520:	d907      	bls.n	8000532 <__aeabi_ddiv+0x12e>
 8000522:	2301      	movs	r3, #1
 8000524:	425b      	negs	r3, r3
 8000526:	469c      	mov	ip, r3
 8000528:	1909      	adds	r1, r1, r4
 800052a:	44e0      	add	r8, ip
 800052c:	428c      	cmp	r4, r1
 800052e:	d800      	bhi.n	8000532 <__aeabi_ddiv+0x12e>
 8000530:	e201      	b.n	8000936 <__aeabi_ddiv+0x532>
 8000532:	1a88      	subs	r0, r1, r2
 8000534:	4649      	mov	r1, r9
 8000536:	f7ff fe75 	bl	8000224 <__aeabi_uidivmod>
 800053a:	9a01      	ldr	r2, [sp, #4]
 800053c:	0436      	lsls	r6, r6, #16
 800053e:	4342      	muls	r2, r0
 8000540:	0409      	lsls	r1, r1, #16
 8000542:	0c36      	lsrs	r6, r6, #16
 8000544:	0003      	movs	r3, r0
 8000546:	430e      	orrs	r6, r1
 8000548:	42b2      	cmp	r2, r6
 800054a:	d904      	bls.n	8000556 <__aeabi_ddiv+0x152>
 800054c:	1936      	adds	r6, r6, r4
 800054e:	3b01      	subs	r3, #1
 8000550:	42b4      	cmp	r4, r6
 8000552:	d800      	bhi.n	8000556 <__aeabi_ddiv+0x152>
 8000554:	e1e9      	b.n	800092a <__aeabi_ddiv+0x526>
 8000556:	1ab0      	subs	r0, r6, r2
 8000558:	4642      	mov	r2, r8
 800055a:	9e00      	ldr	r6, [sp, #0]
 800055c:	0412      	lsls	r2, r2, #16
 800055e:	431a      	orrs	r2, r3
 8000560:	0c33      	lsrs	r3, r6, #16
 8000562:	001f      	movs	r7, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	4690      	mov	r8, r2
 8000568:	9302      	str	r3, [sp, #8]
 800056a:	0413      	lsls	r3, r2, #16
 800056c:	0432      	lsls	r2, r6, #16
 800056e:	0c16      	lsrs	r6, r2, #16
 8000570:	0032      	movs	r2, r6
 8000572:	0c1b      	lsrs	r3, r3, #16
 8000574:	435a      	muls	r2, r3
 8000576:	9603      	str	r6, [sp, #12]
 8000578:	437b      	muls	r3, r7
 800057a:	434e      	muls	r6, r1
 800057c:	4379      	muls	r1, r7
 800057e:	0c17      	lsrs	r7, r2, #16
 8000580:	46bc      	mov	ip, r7
 8000582:	199b      	adds	r3, r3, r6
 8000584:	4463      	add	r3, ip
 8000586:	429e      	cmp	r6, r3
 8000588:	d903      	bls.n	8000592 <__aeabi_ddiv+0x18e>
 800058a:	2680      	movs	r6, #128	; 0x80
 800058c:	0276      	lsls	r6, r6, #9
 800058e:	46b4      	mov	ip, r6
 8000590:	4461      	add	r1, ip
 8000592:	0c1e      	lsrs	r6, r3, #16
 8000594:	1871      	adds	r1, r6, r1
 8000596:	0416      	lsls	r6, r2, #16
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c36      	lsrs	r6, r6, #16
 800059c:	199e      	adds	r6, r3, r6
 800059e:	4288      	cmp	r0, r1
 80005a0:	d302      	bcc.n	80005a8 <__aeabi_ddiv+0x1a4>
 80005a2:	d112      	bne.n	80005ca <__aeabi_ddiv+0x1c6>
 80005a4:	42b5      	cmp	r5, r6
 80005a6:	d210      	bcs.n	80005ca <__aeabi_ddiv+0x1c6>
 80005a8:	4643      	mov	r3, r8
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	9b00      	ldr	r3, [sp, #0]
 80005ae:	469c      	mov	ip, r3
 80005b0:	4465      	add	r5, ip
 80005b2:	001f      	movs	r7, r3
 80005b4:	429d      	cmp	r5, r3
 80005b6:	419b      	sbcs	r3, r3
 80005b8:	425b      	negs	r3, r3
 80005ba:	191b      	adds	r3, r3, r4
 80005bc:	18c0      	adds	r0, r0, r3
 80005be:	4284      	cmp	r4, r0
 80005c0:	d200      	bcs.n	80005c4 <__aeabi_ddiv+0x1c0>
 80005c2:	e19e      	b.n	8000902 <__aeabi_ddiv+0x4fe>
 80005c4:	d100      	bne.n	80005c8 <__aeabi_ddiv+0x1c4>
 80005c6:	e199      	b.n	80008fc <__aeabi_ddiv+0x4f8>
 80005c8:	4690      	mov	r8, r2
 80005ca:	1bae      	subs	r6, r5, r6
 80005cc:	42b5      	cmp	r5, r6
 80005ce:	41ad      	sbcs	r5, r5
 80005d0:	1a40      	subs	r0, r0, r1
 80005d2:	426d      	negs	r5, r5
 80005d4:	1b40      	subs	r0, r0, r5
 80005d6:	4284      	cmp	r4, r0
 80005d8:	d100      	bne.n	80005dc <__aeabi_ddiv+0x1d8>
 80005da:	e1d2      	b.n	8000982 <__aeabi_ddiv+0x57e>
 80005dc:	4649      	mov	r1, r9
 80005de:	f7ff fe21 	bl	8000224 <__aeabi_uidivmod>
 80005e2:	9a01      	ldr	r2, [sp, #4]
 80005e4:	040b      	lsls	r3, r1, #16
 80005e6:	4342      	muls	r2, r0
 80005e8:	0c31      	lsrs	r1, r6, #16
 80005ea:	0005      	movs	r5, r0
 80005ec:	4319      	orrs	r1, r3
 80005ee:	428a      	cmp	r2, r1
 80005f0:	d900      	bls.n	80005f4 <__aeabi_ddiv+0x1f0>
 80005f2:	e16c      	b.n	80008ce <__aeabi_ddiv+0x4ca>
 80005f4:	1a88      	subs	r0, r1, r2
 80005f6:	4649      	mov	r1, r9
 80005f8:	f7ff fe14 	bl	8000224 <__aeabi_uidivmod>
 80005fc:	9a01      	ldr	r2, [sp, #4]
 80005fe:	0436      	lsls	r6, r6, #16
 8000600:	4342      	muls	r2, r0
 8000602:	0409      	lsls	r1, r1, #16
 8000604:	0c36      	lsrs	r6, r6, #16
 8000606:	0003      	movs	r3, r0
 8000608:	430e      	orrs	r6, r1
 800060a:	42b2      	cmp	r2, r6
 800060c:	d900      	bls.n	8000610 <__aeabi_ddiv+0x20c>
 800060e:	e153      	b.n	80008b8 <__aeabi_ddiv+0x4b4>
 8000610:	9803      	ldr	r0, [sp, #12]
 8000612:	1ab6      	subs	r6, r6, r2
 8000614:	0002      	movs	r2, r0
 8000616:	042d      	lsls	r5, r5, #16
 8000618:	431d      	orrs	r5, r3
 800061a:	9f02      	ldr	r7, [sp, #8]
 800061c:	042b      	lsls	r3, r5, #16
 800061e:	0c1b      	lsrs	r3, r3, #16
 8000620:	435a      	muls	r2, r3
 8000622:	437b      	muls	r3, r7
 8000624:	469c      	mov	ip, r3
 8000626:	0c29      	lsrs	r1, r5, #16
 8000628:	4348      	muls	r0, r1
 800062a:	0c13      	lsrs	r3, r2, #16
 800062c:	4484      	add	ip, r0
 800062e:	4463      	add	r3, ip
 8000630:	4379      	muls	r1, r7
 8000632:	4298      	cmp	r0, r3
 8000634:	d903      	bls.n	800063e <__aeabi_ddiv+0x23a>
 8000636:	2080      	movs	r0, #128	; 0x80
 8000638:	0240      	lsls	r0, r0, #9
 800063a:	4684      	mov	ip, r0
 800063c:	4461      	add	r1, ip
 800063e:	0c18      	lsrs	r0, r3, #16
 8000640:	0412      	lsls	r2, r2, #16
 8000642:	041b      	lsls	r3, r3, #16
 8000644:	0c12      	lsrs	r2, r2, #16
 8000646:	1840      	adds	r0, r0, r1
 8000648:	189b      	adds	r3, r3, r2
 800064a:	4286      	cmp	r6, r0
 800064c:	d200      	bcs.n	8000650 <__aeabi_ddiv+0x24c>
 800064e:	e100      	b.n	8000852 <__aeabi_ddiv+0x44e>
 8000650:	d100      	bne.n	8000654 <__aeabi_ddiv+0x250>
 8000652:	e0fb      	b.n	800084c <__aeabi_ddiv+0x448>
 8000654:	2301      	movs	r3, #1
 8000656:	431d      	orrs	r5, r3
 8000658:	4b49      	ldr	r3, [pc, #292]	; (8000780 <__aeabi_ddiv+0x37c>)
 800065a:	445b      	add	r3, fp
 800065c:	2b00      	cmp	r3, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_ddiv+0x25e>
 8000660:	e0aa      	b.n	80007b8 <__aeabi_ddiv+0x3b4>
 8000662:	076a      	lsls	r2, r5, #29
 8000664:	d000      	beq.n	8000668 <__aeabi_ddiv+0x264>
 8000666:	e13d      	b.n	80008e4 <__aeabi_ddiv+0x4e0>
 8000668:	08e9      	lsrs	r1, r5, #3
 800066a:	4642      	mov	r2, r8
 800066c:	01d2      	lsls	r2, r2, #7
 800066e:	d506      	bpl.n	800067e <__aeabi_ddiv+0x27a>
 8000670:	4642      	mov	r2, r8
 8000672:	4b44      	ldr	r3, [pc, #272]	; (8000784 <__aeabi_ddiv+0x380>)
 8000674:	401a      	ands	r2, r3
 8000676:	2380      	movs	r3, #128	; 0x80
 8000678:	4690      	mov	r8, r2
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	445b      	add	r3, fp
 800067e:	4a42      	ldr	r2, [pc, #264]	; (8000788 <__aeabi_ddiv+0x384>)
 8000680:	4293      	cmp	r3, r2
 8000682:	dd00      	ble.n	8000686 <__aeabi_ddiv+0x282>
 8000684:	e723      	b.n	80004ce <__aeabi_ddiv+0xca>
 8000686:	4642      	mov	r2, r8
 8000688:	055b      	lsls	r3, r3, #21
 800068a:	0755      	lsls	r5, r2, #29
 800068c:	0252      	lsls	r2, r2, #9
 800068e:	430d      	orrs	r5, r1
 8000690:	0b12      	lsrs	r2, r2, #12
 8000692:	0d5b      	lsrs	r3, r3, #21
 8000694:	e70d      	b.n	80004b2 <__aeabi_ddiv+0xae>
 8000696:	4651      	mov	r1, sl
 8000698:	4321      	orrs	r1, r4
 800069a:	d100      	bne.n	800069e <__aeabi_ddiv+0x29a>
 800069c:	e07c      	b.n	8000798 <__aeabi_ddiv+0x394>
 800069e:	2c00      	cmp	r4, #0
 80006a0:	d100      	bne.n	80006a4 <__aeabi_ddiv+0x2a0>
 80006a2:	e0fb      	b.n	800089c <__aeabi_ddiv+0x498>
 80006a4:	0020      	movs	r0, r4
 80006a6:	f000 fa01 	bl	8000aac <__clzsi2>
 80006aa:	0002      	movs	r2, r0
 80006ac:	3a0b      	subs	r2, #11
 80006ae:	231d      	movs	r3, #29
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	4652      	mov	r2, sl
 80006b4:	0001      	movs	r1, r0
 80006b6:	40da      	lsrs	r2, r3
 80006b8:	4653      	mov	r3, sl
 80006ba:	3908      	subs	r1, #8
 80006bc:	408b      	lsls	r3, r1
 80006be:	408c      	lsls	r4, r1
 80006c0:	0019      	movs	r1, r3
 80006c2:	4314      	orrs	r4, r2
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <__aeabi_ddiv+0x388>)
 80006c6:	4458      	add	r0, fp
 80006c8:	469b      	mov	fp, r3
 80006ca:	4483      	add	fp, r0
 80006cc:	2000      	movs	r0, #0
 80006ce:	e6d9      	b.n	8000484 <__aeabi_ddiv+0x80>
 80006d0:	0003      	movs	r3, r0
 80006d2:	4323      	orrs	r3, r4
 80006d4:	4698      	mov	r8, r3
 80006d6:	d044      	beq.n	8000762 <__aeabi_ddiv+0x35e>
 80006d8:	2c00      	cmp	r4, #0
 80006da:	d100      	bne.n	80006de <__aeabi_ddiv+0x2da>
 80006dc:	e0cf      	b.n	800087e <__aeabi_ddiv+0x47a>
 80006de:	0020      	movs	r0, r4
 80006e0:	f000 f9e4 	bl	8000aac <__clzsi2>
 80006e4:	0001      	movs	r1, r0
 80006e6:	0002      	movs	r2, r0
 80006e8:	390b      	subs	r1, #11
 80006ea:	231d      	movs	r3, #29
 80006ec:	1a5b      	subs	r3, r3, r1
 80006ee:	4649      	mov	r1, r9
 80006f0:	0010      	movs	r0, r2
 80006f2:	40d9      	lsrs	r1, r3
 80006f4:	3808      	subs	r0, #8
 80006f6:	4084      	lsls	r4, r0
 80006f8:	000b      	movs	r3, r1
 80006fa:	464d      	mov	r5, r9
 80006fc:	4323      	orrs	r3, r4
 80006fe:	4698      	mov	r8, r3
 8000700:	4085      	lsls	r5, r0
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <__aeabi_ddiv+0x38c>)
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	469b      	mov	fp, r3
 8000708:	2300      	movs	r3, #0
 800070a:	4699      	mov	r9, r3
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	e69e      	b.n	800044e <__aeabi_ddiv+0x4a>
 8000710:	0002      	movs	r2, r0
 8000712:	4322      	orrs	r2, r4
 8000714:	4690      	mov	r8, r2
 8000716:	d11d      	bne.n	8000754 <__aeabi_ddiv+0x350>
 8000718:	2208      	movs	r2, #8
 800071a:	469b      	mov	fp, r3
 800071c:	2302      	movs	r3, #2
 800071e:	2500      	movs	r5, #0
 8000720:	4691      	mov	r9, r2
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	e693      	b.n	800044e <__aeabi_ddiv+0x4a>
 8000726:	4651      	mov	r1, sl
 8000728:	4321      	orrs	r1, r4
 800072a:	d109      	bne.n	8000740 <__aeabi_ddiv+0x33c>
 800072c:	2302      	movs	r3, #2
 800072e:	464a      	mov	r2, r9
 8000730:	431a      	orrs	r2, r3
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <__aeabi_ddiv+0x390>)
 8000734:	4691      	mov	r9, r2
 8000736:	469c      	mov	ip, r3
 8000738:	2400      	movs	r4, #0
 800073a:	2002      	movs	r0, #2
 800073c:	44e3      	add	fp, ip
 800073e:	e6a1      	b.n	8000484 <__aeabi_ddiv+0x80>
 8000740:	2303      	movs	r3, #3
 8000742:	464a      	mov	r2, r9
 8000744:	431a      	orrs	r2, r3
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <__aeabi_ddiv+0x390>)
 8000748:	4691      	mov	r9, r2
 800074a:	469c      	mov	ip, r3
 800074c:	4651      	mov	r1, sl
 800074e:	2003      	movs	r0, #3
 8000750:	44e3      	add	fp, ip
 8000752:	e697      	b.n	8000484 <__aeabi_ddiv+0x80>
 8000754:	220c      	movs	r2, #12
 8000756:	469b      	mov	fp, r3
 8000758:	2303      	movs	r3, #3
 800075a:	46a0      	mov	r8, r4
 800075c:	4691      	mov	r9, r2
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	e675      	b.n	800044e <__aeabi_ddiv+0x4a>
 8000762:	2304      	movs	r3, #4
 8000764:	4699      	mov	r9, r3
 8000766:	2300      	movs	r3, #0
 8000768:	469b      	mov	fp, r3
 800076a:	3301      	adds	r3, #1
 800076c:	2500      	movs	r5, #0
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	e66d      	b.n	800044e <__aeabi_ddiv+0x4a>
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	000007ff 	.word	0x000007ff
 8000778:	fffffc01 	.word	0xfffffc01
 800077c:	080046e4 	.word	0x080046e4
 8000780:	000003ff 	.word	0x000003ff
 8000784:	feffffff 	.word	0xfeffffff
 8000788:	000007fe 	.word	0x000007fe
 800078c:	000003f3 	.word	0x000003f3
 8000790:	fffffc0d 	.word	0xfffffc0d
 8000794:	fffff801 	.word	0xfffff801
 8000798:	464a      	mov	r2, r9
 800079a:	2301      	movs	r3, #1
 800079c:	431a      	orrs	r2, r3
 800079e:	4691      	mov	r9, r2
 80007a0:	2400      	movs	r4, #0
 80007a2:	2001      	movs	r0, #1
 80007a4:	e66e      	b.n	8000484 <__aeabi_ddiv+0x80>
 80007a6:	2300      	movs	r3, #0
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	469a      	mov	sl, r3
 80007ac:	2500      	movs	r5, #0
 80007ae:	4b88      	ldr	r3, [pc, #544]	; (80009d0 <__aeabi_ddiv+0x5cc>)
 80007b0:	0312      	lsls	r2, r2, #12
 80007b2:	e67e      	b.n	80004b2 <__aeabi_ddiv+0xae>
 80007b4:	2501      	movs	r5, #1
 80007b6:	426d      	negs	r5, r5
 80007b8:	2201      	movs	r2, #1
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	2a38      	cmp	r2, #56	; 0x38
 80007be:	dd00      	ble.n	80007c2 <__aeabi_ddiv+0x3be>
 80007c0:	e674      	b.n	80004ac <__aeabi_ddiv+0xa8>
 80007c2:	2a1f      	cmp	r2, #31
 80007c4:	dc00      	bgt.n	80007c8 <__aeabi_ddiv+0x3c4>
 80007c6:	e0bd      	b.n	8000944 <__aeabi_ddiv+0x540>
 80007c8:	211f      	movs	r1, #31
 80007ca:	4249      	negs	r1, r1
 80007cc:	1acb      	subs	r3, r1, r3
 80007ce:	4641      	mov	r1, r8
 80007d0:	40d9      	lsrs	r1, r3
 80007d2:	000b      	movs	r3, r1
 80007d4:	2a20      	cmp	r2, #32
 80007d6:	d004      	beq.n	80007e2 <__aeabi_ddiv+0x3de>
 80007d8:	4641      	mov	r1, r8
 80007da:	4a7e      	ldr	r2, [pc, #504]	; (80009d4 <__aeabi_ddiv+0x5d0>)
 80007dc:	445a      	add	r2, fp
 80007de:	4091      	lsls	r1, r2
 80007e0:	430d      	orrs	r5, r1
 80007e2:	0029      	movs	r1, r5
 80007e4:	1e4a      	subs	r2, r1, #1
 80007e6:	4191      	sbcs	r1, r2
 80007e8:	4319      	orrs	r1, r3
 80007ea:	2307      	movs	r3, #7
 80007ec:	001d      	movs	r5, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	400d      	ands	r5, r1
 80007f2:	420b      	tst	r3, r1
 80007f4:	d100      	bne.n	80007f8 <__aeabi_ddiv+0x3f4>
 80007f6:	e0d0      	b.n	800099a <__aeabi_ddiv+0x596>
 80007f8:	220f      	movs	r2, #15
 80007fa:	2300      	movs	r3, #0
 80007fc:	400a      	ands	r2, r1
 80007fe:	2a04      	cmp	r2, #4
 8000800:	d100      	bne.n	8000804 <__aeabi_ddiv+0x400>
 8000802:	e0c7      	b.n	8000994 <__aeabi_ddiv+0x590>
 8000804:	1d0a      	adds	r2, r1, #4
 8000806:	428a      	cmp	r2, r1
 8000808:	4189      	sbcs	r1, r1
 800080a:	4249      	negs	r1, r1
 800080c:	185b      	adds	r3, r3, r1
 800080e:	0011      	movs	r1, r2
 8000810:	021a      	lsls	r2, r3, #8
 8000812:	d400      	bmi.n	8000816 <__aeabi_ddiv+0x412>
 8000814:	e0be      	b.n	8000994 <__aeabi_ddiv+0x590>
 8000816:	2301      	movs	r3, #1
 8000818:	2200      	movs	r2, #0
 800081a:	2500      	movs	r5, #0
 800081c:	e649      	b.n	80004b2 <__aeabi_ddiv+0xae>
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	4643      	mov	r3, r8
 8000822:	0312      	lsls	r2, r2, #12
 8000824:	4213      	tst	r3, r2
 8000826:	d008      	beq.n	800083a <__aeabi_ddiv+0x436>
 8000828:	4214      	tst	r4, r2
 800082a:	d106      	bne.n	800083a <__aeabi_ddiv+0x436>
 800082c:	4322      	orrs	r2, r4
 800082e:	0312      	lsls	r2, r2, #12
 8000830:	46ba      	mov	sl, r7
 8000832:	000d      	movs	r5, r1
 8000834:	4b66      	ldr	r3, [pc, #408]	; (80009d0 <__aeabi_ddiv+0x5cc>)
 8000836:	0b12      	lsrs	r2, r2, #12
 8000838:	e63b      	b.n	80004b2 <__aeabi_ddiv+0xae>
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	4643      	mov	r3, r8
 800083e:	0312      	lsls	r2, r2, #12
 8000840:	431a      	orrs	r2, r3
 8000842:	0312      	lsls	r2, r2, #12
 8000844:	46b2      	mov	sl, r6
 8000846:	4b62      	ldr	r3, [pc, #392]	; (80009d0 <__aeabi_ddiv+0x5cc>)
 8000848:	0b12      	lsrs	r2, r2, #12
 800084a:	e632      	b.n	80004b2 <__aeabi_ddiv+0xae>
 800084c:	2b00      	cmp	r3, #0
 800084e:	d100      	bne.n	8000852 <__aeabi_ddiv+0x44e>
 8000850:	e702      	b.n	8000658 <__aeabi_ddiv+0x254>
 8000852:	19a6      	adds	r6, r4, r6
 8000854:	1e6a      	subs	r2, r5, #1
 8000856:	42a6      	cmp	r6, r4
 8000858:	d200      	bcs.n	800085c <__aeabi_ddiv+0x458>
 800085a:	e089      	b.n	8000970 <__aeabi_ddiv+0x56c>
 800085c:	4286      	cmp	r6, r0
 800085e:	d200      	bcs.n	8000862 <__aeabi_ddiv+0x45e>
 8000860:	e09f      	b.n	80009a2 <__aeabi_ddiv+0x59e>
 8000862:	d100      	bne.n	8000866 <__aeabi_ddiv+0x462>
 8000864:	e0af      	b.n	80009c6 <__aeabi_ddiv+0x5c2>
 8000866:	0015      	movs	r5, r2
 8000868:	e6f4      	b.n	8000654 <__aeabi_ddiv+0x250>
 800086a:	42a9      	cmp	r1, r5
 800086c:	d900      	bls.n	8000870 <__aeabi_ddiv+0x46c>
 800086e:	e63c      	b.n	80004ea <__aeabi_ddiv+0xe6>
 8000870:	4643      	mov	r3, r8
 8000872:	07de      	lsls	r6, r3, #31
 8000874:	0858      	lsrs	r0, r3, #1
 8000876:	086b      	lsrs	r3, r5, #1
 8000878:	431e      	orrs	r6, r3
 800087a:	07ed      	lsls	r5, r5, #31
 800087c:	e63c      	b.n	80004f8 <__aeabi_ddiv+0xf4>
 800087e:	f000 f915 	bl	8000aac <__clzsi2>
 8000882:	0001      	movs	r1, r0
 8000884:	0002      	movs	r2, r0
 8000886:	3115      	adds	r1, #21
 8000888:	3220      	adds	r2, #32
 800088a:	291c      	cmp	r1, #28
 800088c:	dc00      	bgt.n	8000890 <__aeabi_ddiv+0x48c>
 800088e:	e72c      	b.n	80006ea <__aeabi_ddiv+0x2e6>
 8000890:	464b      	mov	r3, r9
 8000892:	3808      	subs	r0, #8
 8000894:	4083      	lsls	r3, r0
 8000896:	2500      	movs	r5, #0
 8000898:	4698      	mov	r8, r3
 800089a:	e732      	b.n	8000702 <__aeabi_ddiv+0x2fe>
 800089c:	f000 f906 	bl	8000aac <__clzsi2>
 80008a0:	0003      	movs	r3, r0
 80008a2:	001a      	movs	r2, r3
 80008a4:	3215      	adds	r2, #21
 80008a6:	3020      	adds	r0, #32
 80008a8:	2a1c      	cmp	r2, #28
 80008aa:	dc00      	bgt.n	80008ae <__aeabi_ddiv+0x4aa>
 80008ac:	e6ff      	b.n	80006ae <__aeabi_ddiv+0x2aa>
 80008ae:	4654      	mov	r4, sl
 80008b0:	3b08      	subs	r3, #8
 80008b2:	2100      	movs	r1, #0
 80008b4:	409c      	lsls	r4, r3
 80008b6:	e705      	b.n	80006c4 <__aeabi_ddiv+0x2c0>
 80008b8:	1936      	adds	r6, r6, r4
 80008ba:	3b01      	subs	r3, #1
 80008bc:	42b4      	cmp	r4, r6
 80008be:	d900      	bls.n	80008c2 <__aeabi_ddiv+0x4be>
 80008c0:	e6a6      	b.n	8000610 <__aeabi_ddiv+0x20c>
 80008c2:	42b2      	cmp	r2, r6
 80008c4:	d800      	bhi.n	80008c8 <__aeabi_ddiv+0x4c4>
 80008c6:	e6a3      	b.n	8000610 <__aeabi_ddiv+0x20c>
 80008c8:	1e83      	subs	r3, r0, #2
 80008ca:	1936      	adds	r6, r6, r4
 80008cc:	e6a0      	b.n	8000610 <__aeabi_ddiv+0x20c>
 80008ce:	1909      	adds	r1, r1, r4
 80008d0:	3d01      	subs	r5, #1
 80008d2:	428c      	cmp	r4, r1
 80008d4:	d900      	bls.n	80008d8 <__aeabi_ddiv+0x4d4>
 80008d6:	e68d      	b.n	80005f4 <__aeabi_ddiv+0x1f0>
 80008d8:	428a      	cmp	r2, r1
 80008da:	d800      	bhi.n	80008de <__aeabi_ddiv+0x4da>
 80008dc:	e68a      	b.n	80005f4 <__aeabi_ddiv+0x1f0>
 80008de:	1e85      	subs	r5, r0, #2
 80008e0:	1909      	adds	r1, r1, r4
 80008e2:	e687      	b.n	80005f4 <__aeabi_ddiv+0x1f0>
 80008e4:	220f      	movs	r2, #15
 80008e6:	402a      	ands	r2, r5
 80008e8:	2a04      	cmp	r2, #4
 80008ea:	d100      	bne.n	80008ee <__aeabi_ddiv+0x4ea>
 80008ec:	e6bc      	b.n	8000668 <__aeabi_ddiv+0x264>
 80008ee:	1d29      	adds	r1, r5, #4
 80008f0:	42a9      	cmp	r1, r5
 80008f2:	41ad      	sbcs	r5, r5
 80008f4:	426d      	negs	r5, r5
 80008f6:	08c9      	lsrs	r1, r1, #3
 80008f8:	44a8      	add	r8, r5
 80008fa:	e6b6      	b.n	800066a <__aeabi_ddiv+0x266>
 80008fc:	42af      	cmp	r7, r5
 80008fe:	d900      	bls.n	8000902 <__aeabi_ddiv+0x4fe>
 8000900:	e662      	b.n	80005c8 <__aeabi_ddiv+0x1c4>
 8000902:	4281      	cmp	r1, r0
 8000904:	d804      	bhi.n	8000910 <__aeabi_ddiv+0x50c>
 8000906:	d000      	beq.n	800090a <__aeabi_ddiv+0x506>
 8000908:	e65e      	b.n	80005c8 <__aeabi_ddiv+0x1c4>
 800090a:	42ae      	cmp	r6, r5
 800090c:	d800      	bhi.n	8000910 <__aeabi_ddiv+0x50c>
 800090e:	e65b      	b.n	80005c8 <__aeabi_ddiv+0x1c4>
 8000910:	2302      	movs	r3, #2
 8000912:	425b      	negs	r3, r3
 8000914:	469c      	mov	ip, r3
 8000916:	9b00      	ldr	r3, [sp, #0]
 8000918:	44e0      	add	r8, ip
 800091a:	469c      	mov	ip, r3
 800091c:	4465      	add	r5, ip
 800091e:	429d      	cmp	r5, r3
 8000920:	419b      	sbcs	r3, r3
 8000922:	425b      	negs	r3, r3
 8000924:	191b      	adds	r3, r3, r4
 8000926:	18c0      	adds	r0, r0, r3
 8000928:	e64f      	b.n	80005ca <__aeabi_ddiv+0x1c6>
 800092a:	42b2      	cmp	r2, r6
 800092c:	d800      	bhi.n	8000930 <__aeabi_ddiv+0x52c>
 800092e:	e612      	b.n	8000556 <__aeabi_ddiv+0x152>
 8000930:	1e83      	subs	r3, r0, #2
 8000932:	1936      	adds	r6, r6, r4
 8000934:	e60f      	b.n	8000556 <__aeabi_ddiv+0x152>
 8000936:	428a      	cmp	r2, r1
 8000938:	d800      	bhi.n	800093c <__aeabi_ddiv+0x538>
 800093a:	e5fa      	b.n	8000532 <__aeabi_ddiv+0x12e>
 800093c:	1e83      	subs	r3, r0, #2
 800093e:	4698      	mov	r8, r3
 8000940:	1909      	adds	r1, r1, r4
 8000942:	e5f6      	b.n	8000532 <__aeabi_ddiv+0x12e>
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <__aeabi_ddiv+0x5d4>)
 8000946:	0028      	movs	r0, r5
 8000948:	445b      	add	r3, fp
 800094a:	4641      	mov	r1, r8
 800094c:	409d      	lsls	r5, r3
 800094e:	4099      	lsls	r1, r3
 8000950:	40d0      	lsrs	r0, r2
 8000952:	1e6b      	subs	r3, r5, #1
 8000954:	419d      	sbcs	r5, r3
 8000956:	4643      	mov	r3, r8
 8000958:	4301      	orrs	r1, r0
 800095a:	4329      	orrs	r1, r5
 800095c:	40d3      	lsrs	r3, r2
 800095e:	074a      	lsls	r2, r1, #29
 8000960:	d100      	bne.n	8000964 <__aeabi_ddiv+0x560>
 8000962:	e755      	b.n	8000810 <__aeabi_ddiv+0x40c>
 8000964:	220f      	movs	r2, #15
 8000966:	400a      	ands	r2, r1
 8000968:	2a04      	cmp	r2, #4
 800096a:	d000      	beq.n	800096e <__aeabi_ddiv+0x56a>
 800096c:	e74a      	b.n	8000804 <__aeabi_ddiv+0x400>
 800096e:	e74f      	b.n	8000810 <__aeabi_ddiv+0x40c>
 8000970:	0015      	movs	r5, r2
 8000972:	4286      	cmp	r6, r0
 8000974:	d000      	beq.n	8000978 <__aeabi_ddiv+0x574>
 8000976:	e66d      	b.n	8000654 <__aeabi_ddiv+0x250>
 8000978:	9a00      	ldr	r2, [sp, #0]
 800097a:	429a      	cmp	r2, r3
 800097c:	d000      	beq.n	8000980 <__aeabi_ddiv+0x57c>
 800097e:	e669      	b.n	8000654 <__aeabi_ddiv+0x250>
 8000980:	e66a      	b.n	8000658 <__aeabi_ddiv+0x254>
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <__aeabi_ddiv+0x5d8>)
 8000984:	445b      	add	r3, fp
 8000986:	2b00      	cmp	r3, #0
 8000988:	dc00      	bgt.n	800098c <__aeabi_ddiv+0x588>
 800098a:	e713      	b.n	80007b4 <__aeabi_ddiv+0x3b0>
 800098c:	2501      	movs	r5, #1
 800098e:	2100      	movs	r1, #0
 8000990:	44a8      	add	r8, r5
 8000992:	e66a      	b.n	800066a <__aeabi_ddiv+0x266>
 8000994:	075d      	lsls	r5, r3, #29
 8000996:	025b      	lsls	r3, r3, #9
 8000998:	0b1a      	lsrs	r2, r3, #12
 800099a:	08c9      	lsrs	r1, r1, #3
 800099c:	2300      	movs	r3, #0
 800099e:	430d      	orrs	r5, r1
 80009a0:	e587      	b.n	80004b2 <__aeabi_ddiv+0xae>
 80009a2:	9900      	ldr	r1, [sp, #0]
 80009a4:	3d02      	subs	r5, #2
 80009a6:	004a      	lsls	r2, r1, #1
 80009a8:	428a      	cmp	r2, r1
 80009aa:	41bf      	sbcs	r7, r7
 80009ac:	427f      	negs	r7, r7
 80009ae:	193f      	adds	r7, r7, r4
 80009b0:	19f6      	adds	r6, r6, r7
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	e7dd      	b.n	8000972 <__aeabi_ddiv+0x56e>
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	4643      	mov	r3, r8
 80009ba:	0312      	lsls	r2, r2, #12
 80009bc:	431a      	orrs	r2, r3
 80009be:	0312      	lsls	r2, r2, #12
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <__aeabi_ddiv+0x5cc>)
 80009c2:	0b12      	lsrs	r2, r2, #12
 80009c4:	e575      	b.n	80004b2 <__aeabi_ddiv+0xae>
 80009c6:	9900      	ldr	r1, [sp, #0]
 80009c8:	4299      	cmp	r1, r3
 80009ca:	d3ea      	bcc.n	80009a2 <__aeabi_ddiv+0x59e>
 80009cc:	0015      	movs	r5, r2
 80009ce:	e7d3      	b.n	8000978 <__aeabi_ddiv+0x574>
 80009d0:	000007ff 	.word	0x000007ff
 80009d4:	0000043e 	.word	0x0000043e
 80009d8:	0000041e 	.word	0x0000041e
 80009dc:	000003ff 	.word	0x000003ff

080009e0 <__aeabi_d2iz>:
 80009e0:	000a      	movs	r2, r1
 80009e2:	b530      	push	{r4, r5, lr}
 80009e4:	4c13      	ldr	r4, [pc, #76]	; (8000a34 <__aeabi_d2iz+0x54>)
 80009e6:	0053      	lsls	r3, r2, #1
 80009e8:	0309      	lsls	r1, r1, #12
 80009ea:	0005      	movs	r5, r0
 80009ec:	0b09      	lsrs	r1, r1, #12
 80009ee:	2000      	movs	r0, #0
 80009f0:	0d5b      	lsrs	r3, r3, #21
 80009f2:	0fd2      	lsrs	r2, r2, #31
 80009f4:	42a3      	cmp	r3, r4
 80009f6:	dd04      	ble.n	8000a02 <__aeabi_d2iz+0x22>
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <__aeabi_d2iz+0x58>)
 80009fa:	4283      	cmp	r3, r0
 80009fc:	dd02      	ble.n	8000a04 <__aeabi_d2iz+0x24>
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <__aeabi_d2iz+0x5c>)
 8000a00:	18d0      	adds	r0, r2, r3
 8000a02:	bd30      	pop	{r4, r5, pc}
 8000a04:	2080      	movs	r0, #128	; 0x80
 8000a06:	0340      	lsls	r0, r0, #13
 8000a08:	4301      	orrs	r1, r0
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <__aeabi_d2iz+0x60>)
 8000a0c:	1ac0      	subs	r0, r0, r3
 8000a0e:	281f      	cmp	r0, #31
 8000a10:	dd08      	ble.n	8000a24 <__aeabi_d2iz+0x44>
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <__aeabi_d2iz+0x64>)
 8000a14:	1ac3      	subs	r3, r0, r3
 8000a16:	40d9      	lsrs	r1, r3
 8000a18:	000b      	movs	r3, r1
 8000a1a:	4258      	negs	r0, r3
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	d1f0      	bne.n	8000a02 <__aeabi_d2iz+0x22>
 8000a20:	0018      	movs	r0, r3
 8000a22:	e7ee      	b.n	8000a02 <__aeabi_d2iz+0x22>
 8000a24:	4c08      	ldr	r4, [pc, #32]	; (8000a48 <__aeabi_d2iz+0x68>)
 8000a26:	40c5      	lsrs	r5, r0
 8000a28:	46a4      	mov	ip, r4
 8000a2a:	4463      	add	r3, ip
 8000a2c:	4099      	lsls	r1, r3
 8000a2e:	000b      	movs	r3, r1
 8000a30:	432b      	orrs	r3, r5
 8000a32:	e7f2      	b.n	8000a1a <__aeabi_d2iz+0x3a>
 8000a34:	000003fe 	.word	0x000003fe
 8000a38:	0000041d 	.word	0x0000041d
 8000a3c:	7fffffff 	.word	0x7fffffff
 8000a40:	00000433 	.word	0x00000433
 8000a44:	00000413 	.word	0x00000413
 8000a48:	fffffbed 	.word	0xfffffbed

08000a4c <__aeabi_i2d>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d016      	beq.n	8000a80 <__aeabi_i2d+0x34>
 8000a52:	17c3      	asrs	r3, r0, #31
 8000a54:	18c5      	adds	r5, r0, r3
 8000a56:	405d      	eors	r5, r3
 8000a58:	0fc4      	lsrs	r4, r0, #31
 8000a5a:	0028      	movs	r0, r5
 8000a5c:	f000 f826 	bl	8000aac <__clzsi2>
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <__aeabi_i2d+0x5c>)
 8000a62:	1a1b      	subs	r3, r3, r0
 8000a64:	280a      	cmp	r0, #10
 8000a66:	dc16      	bgt.n	8000a96 <__aeabi_i2d+0x4a>
 8000a68:	0002      	movs	r2, r0
 8000a6a:	002e      	movs	r6, r5
 8000a6c:	3215      	adds	r2, #21
 8000a6e:	4096      	lsls	r6, r2
 8000a70:	220b      	movs	r2, #11
 8000a72:	1a12      	subs	r2, r2, r0
 8000a74:	40d5      	lsrs	r5, r2
 8000a76:	055b      	lsls	r3, r3, #21
 8000a78:	032d      	lsls	r5, r5, #12
 8000a7a:	0b2d      	lsrs	r5, r5, #12
 8000a7c:	0d5b      	lsrs	r3, r3, #21
 8000a7e:	e003      	b.n	8000a88 <__aeabi_i2d+0x3c>
 8000a80:	2400      	movs	r4, #0
 8000a82:	2300      	movs	r3, #0
 8000a84:	2500      	movs	r5, #0
 8000a86:	2600      	movs	r6, #0
 8000a88:	051b      	lsls	r3, r3, #20
 8000a8a:	432b      	orrs	r3, r5
 8000a8c:	07e4      	lsls	r4, r4, #31
 8000a8e:	4323      	orrs	r3, r4
 8000a90:	0030      	movs	r0, r6
 8000a92:	0019      	movs	r1, r3
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
 8000a96:	380b      	subs	r0, #11
 8000a98:	4085      	lsls	r5, r0
 8000a9a:	055b      	lsls	r3, r3, #21
 8000a9c:	032d      	lsls	r5, r5, #12
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	0b2d      	lsrs	r5, r5, #12
 8000aa2:	0d5b      	lsrs	r3, r3, #21
 8000aa4:	e7f0      	b.n	8000a88 <__aeabi_i2d+0x3c>
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	0000041e 	.word	0x0000041e

08000aac <__clzsi2>:
 8000aac:	211c      	movs	r1, #28
 8000aae:	2301      	movs	r3, #1
 8000ab0:	041b      	lsls	r3, r3, #16
 8000ab2:	4298      	cmp	r0, r3
 8000ab4:	d301      	bcc.n	8000aba <__clzsi2+0xe>
 8000ab6:	0c00      	lsrs	r0, r0, #16
 8000ab8:	3910      	subs	r1, #16
 8000aba:	0a1b      	lsrs	r3, r3, #8
 8000abc:	4298      	cmp	r0, r3
 8000abe:	d301      	bcc.n	8000ac4 <__clzsi2+0x18>
 8000ac0:	0a00      	lsrs	r0, r0, #8
 8000ac2:	3908      	subs	r1, #8
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	4298      	cmp	r0, r3
 8000ac8:	d301      	bcc.n	8000ace <__clzsi2+0x22>
 8000aca:	0900      	lsrs	r0, r0, #4
 8000acc:	3904      	subs	r1, #4
 8000ace:	a202      	add	r2, pc, #8	; (adr r2, 8000ad8 <__clzsi2+0x2c>)
 8000ad0:	5c10      	ldrb	r0, [r2, r0]
 8000ad2:	1840      	adds	r0, r0, r1
 8000ad4:	4770      	bx	lr
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	02020304 	.word	0x02020304
 8000adc:	01010101 	.word	0x01010101
	...

08000ae8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b08f      	sub	sp, #60	; 0x3c
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000af0:	200c      	movs	r0, #12
 8000af2:	183b      	adds	r3, r7, r0
 8000af4:	22b2      	movs	r2, #178	; 0xb2
 8000af6:	32ff      	adds	r2, #255	; 0xff
 8000af8:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 8000afa:	183b      	adds	r3, r7, r0
 8000afc:	2224      	movs	r2, #36	; 0x24
 8000afe:	2107      	movs	r1, #7
 8000b00:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000b02:	183b      	adds	r3, r7, r0
 8000b04:	2225      	movs	r2, #37	; 0x25
 8000b06:	2107      	movs	r1, #7
 8000b08:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 8000b0a:	183b      	adds	r3, r7, r0
 8000b0c:	2226      	movs	r2, #38	; 0x26
 8000b0e:	2101      	movs	r1, #1
 8000b10:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 8000b12:	183b      	adds	r3, r7, r0
 8000b14:	222a      	movs	r2, #42	; 0x2a
 8000b16:	21ff      	movs	r1, #255	; 0xff
 8000b18:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 8000b1a:	183b      	adds	r3, r7, r0
 8000b1c:	222b      	movs	r2, #43	; 0x2b
 8000b1e:	2164      	movs	r1, #100	; 0x64
 8000b20:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 8000b22:	0001      	movs	r1, r0
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2208      	movs	r2, #8
 8000b28:	851a      	strh	r2, [r3, #40]	; 0x28

	return new_LoRa;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	187a      	adds	r2, r7, r1
 8000b2e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b30:	c313      	stmia	r3!, {r0, r1, r4}
 8000b32:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b34:	c313      	stmia	r3!, {r0, r1, r4}
 8000b36:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b38:	c313      	stmia	r3!, {r0, r1, r4}
 8000b3a:	ca03      	ldmia	r2!, {r0, r1}
 8000b3c:	c303      	stmia	r3!, {r0, r1}
}
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b00f      	add	sp, #60	; 0x3c
 8000b44:	bd90      	pop	{r4, r7, pc}

08000b46 <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6898      	ldr	r0, [r3, #8]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	899b      	ldrh	r3, [r3, #12]
 8000b56:	2200      	movs	r2, #0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	f001 fc7b 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f001 fa3c 	bl	8001fdc <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6898      	ldr	r0, [r3, #8]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	899b      	ldrh	r3, [r3, #12]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	0019      	movs	r1, r3
 8000b70:	f001 fc70 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b74:	2064      	movs	r0, #100	; 0x64
 8000b76:	f001 fa31 	bl	8001fdc <HAL_Delay>
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000b82:	b5b0      	push	{r4, r5, r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000b8c:	250e      	movs	r5, #14
 8000b8e:	197c      	adds	r4, r7, r5
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2101      	movs	r1, #1
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fa59 	bl	800104c <LoRa_read>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	7023      	strb	r3, [r4, #0]
	data = read;
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	183b      	adds	r3, r7, r0
 8000ba2:	0029      	movs	r1, r5
 8000ba4:	187a      	adds	r2, r7, r1
 8000ba6:	7812      	ldrb	r2, [r2, #0]
 8000ba8:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d109      	bne.n	8000bc4 <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 8000bb0:	183b      	adds	r3, r7, r0
 8000bb2:	187a      	adds	r2, r7, r1
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	2107      	movs	r1, #7
 8000bb8:	438a      	bics	r2, r1
 8000bba:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
 8000bc2:	e04e      	b.n	8000c62 <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d110      	bne.n	8000bec <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 8000bca:	230e      	movs	r3, #14
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	4393      	bics	r3, r2
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b25a      	sxtb	r2, r3
 8000bde:	230f      	movs	r3, #15
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	61da      	str	r2, [r3, #28]
 8000bea:	e03a      	b.n	8000c62 <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d110      	bne.n	8000c14 <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 8000bf2:	230e      	movs	r3, #14
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	4393      	bics	r3, r2
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	2203      	movs	r2, #3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b25a      	sxtb	r2, r3
 8000c06:	230f      	movs	r3, #15
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	61da      	str	r2, [r3, #28]
 8000c12:	e026      	b.n	8000c62 <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2b05      	cmp	r3, #5
 8000c18:	d110      	bne.n	8000c3c <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 8000c1a:	230e      	movs	r3, #14
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	2207      	movs	r2, #7
 8000c24:	4393      	bics	r3, r2
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	2205      	movs	r2, #5
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b25a      	sxtb	r2, r3
 8000c2e:	230f      	movs	r3, #15
 8000c30:	18fb      	adds	r3, r7, r3
 8000c32:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2205      	movs	r2, #5
 8000c38:	61da      	str	r2, [r3, #28]
 8000c3a:	e012      	b.n	8000c62 <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d10f      	bne.n	8000c62 <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 8000c42:	230e      	movs	r3, #14
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	4393      	bics	r3, r2
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	2206      	movs	r2, #6
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b25a      	sxtb	r2, r3
 8000c56:	230f      	movs	r3, #15
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2206      	movs	r2, #6
 8000c60:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000c62:	230f      	movs	r3, #15
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 fa0b 	bl	8001088 <LoRa_write>
	//HAL_Delay(10);
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bdb0      	pop	{r4, r5, r7, pc}

08000c7a <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000c7a:	b590      	push	{r4, r7, lr}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	1dbb      	adds	r3, r7, #6
 8000c88:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6818      	ldr	r0, [r3, #0]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	889b      	ldrh	r3, [r3, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	0019      	movs	r1, r3
 8000c96:	f001 fbdd 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6998      	ldr	r0, [r3, #24]
 8000c9e:	23fa      	movs	r3, #250	; 0xfa
 8000ca0:	00dc      	lsls	r4, r3, #3
 8000ca2:	1dbb      	adds	r3, r7, #6
 8000ca4:	881a      	ldrh	r2, [r3, #0]
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	0023      	movs	r3, r4
 8000caa:	f001 fca9 	bl	8002600 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f002 f937 	bl	8002f28 <HAL_SPI_GetState>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d1f7      	bne.n	8000cb0 <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6998      	ldr	r0, [r3, #24]
 8000cc4:	23fa      	movs	r3, #250	; 0xfa
 8000cc6:	00dc      	lsls	r4, r3, #3
 8000cc8:	2320      	movs	r3, #32
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	0023      	movs	r3, r4
 8000cd2:	f001 fdf5 	bl	80028c0 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f002 f923 	bl	8002f28 <HAL_SPI_GetState>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d1f7      	bne.n	8000cd8 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	889b      	ldrh	r3, [r3, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	f001 fbae 	bl	8002454 <HAL_GPIO_WritePin>
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b005      	add	sp, #20
 8000cfe:	bd90      	pop	{r4, r7, pc}

08000d00 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	1dbb      	adds	r3, r7, #6
 8000d0e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	889b      	ldrh	r3, [r3, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	0019      	movs	r1, r3
 8000d1c:	f001 fb9a 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6998      	ldr	r0, [r3, #24]
 8000d24:	23fa      	movs	r3, #250	; 0xfa
 8000d26:	00dc      	lsls	r4, r3, #3
 8000d28:	1dbb      	adds	r3, r7, #6
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	0023      	movs	r3, r4
 8000d30:	f001 fc66 	bl	8002600 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f002 f8f4 	bl	8002f28 <HAL_SPI_GetState>
 8000d40:	0003      	movs	r3, r0
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d1f7      	bne.n	8000d36 <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	6998      	ldr	r0, [r3, #24]
 8000d4a:	23fa      	movs	r3, #250	; 0xfa
 8000d4c:	00dc      	lsls	r4, r3, #3
 8000d4e:	2320      	movs	r3, #32
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	881a      	ldrh	r2, [r3, #0]
 8000d54:	6839      	ldr	r1, [r7, #0]
 8000d56:	0023      	movs	r3, r4
 8000d58:	f001 fc52 	bl	8002600 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	0018      	movs	r0, r3
 8000d64:	f002 f8e0 	bl	8002f28 <HAL_SPI_GetState>
 8000d68:	0003      	movs	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d1f7      	bne.n	8000d5e <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	889b      	ldrh	r3, [r3, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	0019      	movs	r1, r3
 8000d7a:	f001 fb6b 	bl	8002454 <HAL_GPIO_WritePin>
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b005      	add	sp, #20
 8000d84:	bd90      	pop	{r4, r7, pc}

08000d86 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000d86:	b5b0      	push	{r4, r5, r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	000a      	movs	r2, r1
 8000d90:	1cfb      	adds	r3, r7, #3
 8000d92:	701a      	strb	r2, [r3, #0]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000d94:	250e      	movs	r5, #14
 8000d96:	197c      	adds	r4, r7, r5
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2126      	movs	r1, #38	; 0x26
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 f955 	bl	800104c <LoRa_read>
 8000da2:	0003      	movs	r3, r0
 8000da4:	7023      	strb	r3, [r4, #0]
	
	if(value)
 8000da6:	1cfb      	adds	r3, r7, #3
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <LoRa_setLowDaraRateOptimization+0x38>
		data = read | 0x08;
 8000dae:	230f      	movs	r3, #15
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	197a      	adds	r2, r7, r5
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	2108      	movs	r1, #8
 8000db8:	430a      	orrs	r2, r1
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e007      	b.n	8000dce <LoRa_setLowDaraRateOptimization+0x48>
	else
		data = read & 0xF7;
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	220e      	movs	r2, #14
 8000dc4:	18ba      	adds	r2, r7, r2
 8000dc6:	7812      	ldrb	r2, [r2, #0]
 8000dc8:	2108      	movs	r1, #8
 8000dca:	438a      	bics	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000dce:	230f      	movs	r3, #15
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2126      	movs	r1, #38	; 0x26
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f000 f955 	bl	8001088 <LoRa_write>
	HAL_Delay(10);
 8000dde:	200a      	movs	r0, #10
 8000de0:	f001 f8fc 	bl	8001fdc <HAL_Delay>
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b004      	add	sp, #16
 8000dea:	bdb0      	pop	{r4, r5, r7, pc}

08000dec <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b097      	sub	sp, #92	; 0x5c
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000df4:	2408      	movs	r4, #8
 8000df6:	193a      	adds	r2, r7, r4
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <LoRa_setAutoLDO+0x70>)
 8000dfa:	0010      	movs	r0, r2
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	2350      	movs	r3, #80	; 0x50
 8000e00:	001a      	movs	r2, r3
 8000e02:	f002 ffb1 	bl	8003d68 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2224      	movs	r2, #36	; 0x24
 8000e0a:	5c9b      	ldrb	r3, [r3, r2]
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	2301      	movs	r3, #1
 8000e10:	4093      	lsls	r3, r2
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff fe1a 	bl	8000a4c <__aeabi_i2d>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2225      	movs	r2, #37	; 0x25
 8000e1c:	5c9b      	ldrb	r3, [r3, r2]
 8000e1e:	193a      	adds	r2, r7, r4
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	18d3      	adds	r3, r2, r3
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f7ff faec 	bl	8000404 <__aeabi_ddiv>
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	000b      	movs	r3, r1
 8000e30:	0010      	movs	r0, r2
 8000e32:	0019      	movs	r1, r3
 8000e34:	f7ff fdd4 	bl	80009e0 <__aeabi_d2iz>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2b10      	cmp	r3, #16
 8000e3e:	dc01      	bgt.n	8000e44 <LoRa_setAutoLDO+0x58>
 8000e40:	2300      	movs	r3, #0
 8000e42:	1c1a      	adds	r2, r3, #0
 8000e44:	b2d3      	uxtb	r3, r2
 8000e46:	001a      	movs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff ff9a 	bl	8000d86 <LoRa_setLowDaraRateOptimization>
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b017      	add	sp, #92	; 0x5c
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	08004628 	.word	0x08004628

08000e60 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	04db      	lsls	r3, r3, #19
 8000e6e:	115b      	asrs	r3, r3, #5
 8000e70:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	0c1a      	lsrs	r2, r3, #16
 8000e76:	240b      	movs	r4, #11
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2106      	movs	r1, #6
 8000e84:	0018      	movs	r0, r3
 8000e86:	f000 f8ff 	bl	8001088 <LoRa_write>
	HAL_Delay(5);
 8000e8a:	2005      	movs	r0, #5
 8000e8c:	f001 f8a6 	bl	8001fdc <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	0a1a      	lsrs	r2, r3, #8
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2107      	movs	r1, #7
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 f8f1 	bl	8001088 <LoRa_write>
	HAL_Delay(5);
 8000ea6:	2005      	movs	r0, #5
 8000ea8:	f001 f898 	bl	8001fdc <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2108      	movs	r1, #8
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 f8e4 	bl	8001088 <LoRa_write>
	HAL_Delay(5);
 8000ec0:	2005      	movs	r0, #5
 8000ec2:	f001 f88b 	bl	8001fdc <HAL_Delay>
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b005      	add	sp, #20
 8000ecc:	bd90      	pop	{r4, r7, pc}

08000ece <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000ece:	b5b0      	push	{r4, r5, r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2b0c      	cmp	r3, #12
 8000edc:	dd01      	ble.n	8000ee2 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000ede:	230c      	movs	r3, #12
 8000ee0:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b06      	cmp	r3, #6
 8000ee6:	dc01      	bgt.n	8000eec <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000ee8:	2307      	movs	r3, #7
 8000eea:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000eec:	250f      	movs	r5, #15
 8000eee:	197c      	adds	r4, r7, r5
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	211e      	movs	r1, #30
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 f8a9 	bl	800104c <LoRa_read>
 8000efa:	0003      	movs	r3, r0
 8000efc:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f001 f86c 	bl	8001fdc <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	b2d9      	uxtb	r1, r3
 8000f0c:	197b      	adds	r3, r7, r5
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	220f      	movs	r2, #15
 8000f12:	4013      	ands	r3, r2
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	200e      	movs	r0, #14
 8000f18:	183b      	adds	r3, r7, r0
 8000f1a:	188a      	adds	r2, r1, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000f1e:	183b      	adds	r3, r7, r0
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	211e      	movs	r1, #30
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 f8ae 	bl	8001088 <LoRa_write>
	HAL_Delay(10);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f001 f855 	bl	8001fdc <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff ff59 	bl	8000dec <LoRa_setAutoLDO>
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bdb0      	pop	{r4, r5, r7, pc}

08000f42 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	1cfb      	adds	r3, r7, #3
 8000f4e:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000f50:	1cfb      	adds	r3, r7, #3
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2109      	movs	r1, #9
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 f895 	bl	8001088 <LoRa_write>
	HAL_Delay(10);
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f001 f83c 	bl	8001fdc <HAL_Delay>
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	000a      	movs	r2, r1
 8000f76:	1cfb      	adds	r3, r7, #3
 8000f78:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]

	if(current<45)
 8000f82:	1cfb      	adds	r3, r7, #3
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b2c      	cmp	r3, #44	; 0x2c
 8000f88:	d802      	bhi.n	8000f90 <LoRa_setOCP+0x24>
		current = 45;
 8000f8a:	1cfb      	adds	r3, r7, #3
 8000f8c:	222d      	movs	r2, #45	; 0x2d
 8000f8e:	701a      	strb	r2, [r3, #0]
	if(current>240)
 8000f90:	1cfb      	adds	r3, r7, #3
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2bf0      	cmp	r3, #240	; 0xf0
 8000f96:	d902      	bls.n	8000f9e <LoRa_setOCP+0x32>
		current = 240;
 8000f98:	1cfb      	adds	r3, r7, #3
 8000f9a:	22f0      	movs	r2, #240	; 0xf0
 8000f9c:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 8000f9e:	1cfb      	adds	r3, r7, #3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b78      	cmp	r3, #120	; 0x78
 8000fa4:	d80c      	bhi.n	8000fc0 <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 8000fa6:	1cfb      	adds	r3, r7, #3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	3b2d      	subs	r3, #45	; 0x2d
 8000fac:	2105      	movs	r1, #5
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff f93c 	bl	800022c <__divsi3>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	230f      	movs	r3, #15
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e00f      	b.n	8000fe0 <LoRa_setOCP+0x74>
	else if(current <= 240)
 8000fc0:	1cfb      	adds	r3, r7, #3
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2bf0      	cmp	r3, #240	; 0xf0
 8000fc6:	d80b      	bhi.n	8000fe0 <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 8000fc8:	1cfb      	adds	r3, r7, #3
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	331e      	adds	r3, #30
 8000fce:	210a      	movs	r1, #10
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff f92b 	bl	800022c <__divsi3>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	001a      	movs	r2, r3
 8000fda:	230f      	movs	r3, #15
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	187a      	adds	r2, r7, r1
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	3220      	adds	r2, #32
 8000fea:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	210b      	movs	r1, #11
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 f847 	bl	8001088 <LoRa_write>
	HAL_Delay(10);
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f000 ffee 	bl	8001fdc <HAL_Delay>
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b004      	add	sp, #16
 8001006:	bd80      	pop	{r7, pc}

08001008 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001010:	250f      	movs	r5, #15
 8001012:	197c      	adds	r4, r7, r5
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	211e      	movs	r1, #30
 8001018:	0018      	movs	r0, r3
 800101a:	f000 f817 	bl	800104c <LoRa_read>
 800101e:	0003      	movs	r3, r0
 8001020:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 8001022:	200e      	movs	r0, #14
 8001024:	183b      	adds	r3, r7, r0
 8001026:	197a      	adds	r2, r7, r5
 8001028:	7812      	ldrb	r2, [r2, #0]
 800102a:	2107      	movs	r1, #7
 800102c:	430a      	orrs	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001030:	183b      	adds	r3, r7, r0
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	211e      	movs	r1, #30
 8001038:	0018      	movs	r0, r3
 800103a:	f000 f825 	bl	8001088 <LoRa_write>
	HAL_Delay(10);
 800103e:	200a      	movs	r0, #10
 8001040:	f000 ffcc 	bl	8001fdc <HAL_Delay>
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bdb0      	pop	{r4, r5, r7, pc}

0800104c <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b087      	sub	sp, #28
 8001050:	af02      	add	r7, sp, #8
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	000a      	movs	r2, r1
 8001056:	1cfb      	adds	r3, r7, #3
 8001058:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800105a:	1cfb      	adds	r3, r7, #3
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	227f      	movs	r2, #127	; 0x7f
 8001060:	4013      	ands	r3, r2
 8001062:	b2da      	uxtb	r2, r3
 8001064:	210e      	movs	r1, #14
 8001066:	187b      	adds	r3, r7, r1
 8001068:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800106a:	240f      	movs	r4, #15
 800106c:	193b      	adds	r3, r7, r4
 800106e:	1879      	adds	r1, r7, r1
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	2201      	movs	r2, #1
 8001078:	f7ff fdff 	bl	8000c7a <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800107c:	193b      	adds	r3, r7, r4
 800107e:	781b      	ldrb	r3, [r3, #0]
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b005      	add	sp, #20
 8001086:	bd90      	pop	{r4, r7, pc}

08001088 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	0008      	movs	r0, r1
 8001092:	0011      	movs	r1, r2
 8001094:	1cfb      	adds	r3, r7, #3
 8001096:	1c02      	adds	r2, r0, #0
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	1cbb      	adds	r3, r7, #2
 800109c:	1c0a      	adds	r2, r1, #0
 800109e:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80010a0:	1cfb      	adds	r3, r7, #3
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	4252      	negs	r2, r2
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	210e      	movs	r1, #14
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	701a      	strb	r2, [r3, #0]
	data = value;
 80010b2:	200f      	movs	r0, #15
 80010b4:	183b      	adds	r3, r7, r0
 80010b6:	1cba      	adds	r2, r7, #2
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80010bc:	183b      	adds	r3, r7, r0
 80010be:	1879      	adds	r1, r7, r1
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	9200      	str	r2, [sp, #0]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f7ff fe1a 	bl	8000d00 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b004      	add	sp, #16
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	0008      	movs	r0, r1
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	0019      	movs	r1, r3
 80010e2:	240b      	movs	r4, #11
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	1c02      	adds	r2, r0, #0
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	230a      	movs	r3, #10
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	1c0a      	adds	r2, r1, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	addr = address | 0x80;
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	4252      	negs	r2, r2
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	2417      	movs	r4, #23
 8001100:	193b      	adds	r3, r7, r4
 8001102:	701a      	strb	r2, [r3, #0]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	0019      	movs	r1, r3
 8001110:	f001 f9a0 	bl	8002454 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6998      	ldr	r0, [r3, #24]
 8001118:	23fa      	movs	r3, #250	; 0xfa
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	1939      	adds	r1, r7, r4
 800111e:	2201      	movs	r2, #1
 8001120:	f001 fa6e 	bl	8002600 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	0018      	movs	r0, r3
 800112c:	f001 fefc 	bl	8002f28 <HAL_SPI_GetState>
 8001130:	0003      	movs	r3, r0
 8001132:	2b01      	cmp	r3, #1
 8001134:	d1f7      	bne.n	8001126 <LoRa_BurstWrite+0x52>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6998      	ldr	r0, [r3, #24]
 800113a:	230a      	movs	r3, #10
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b29a      	uxth	r2, r3
 8001142:	23fa      	movs	r3, #250	; 0xfa
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f001 fa5a 	bl	8002600 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	0018      	movs	r0, r3
 8001154:	f001 fee8 	bl	8002f28 <HAL_SPI_GetState>
 8001158:	0003      	movs	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d1f7      	bne.n	800114e <LoRa_BurstWrite+0x7a>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	889b      	ldrh	r3, [r3, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	0019      	movs	r1, r3
 800116a:	f001 f973 	bl	8002454 <HAL_GPIO_WritePin>
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b007      	add	sp, #28
 8001174:	bd90      	pop	{r4, r7, pc}

08001176 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]

	return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b002      	add	sp, #8
 8001186:	bd80      	pop	{r7, pc}

08001188 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	0019      	movs	r1, r3
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	1c0a      	adds	r2, r1, #0
 800119c:	801a      	strh	r2, [r3, #0]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2101      	movs	r1, #1
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff fcea 	bl	8000b82 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80011ae:	2513      	movs	r5, #19
 80011b0:	197c      	adds	r4, r7, r5
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	210e      	movs	r1, #14
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7ff ff48 	bl	800104c <LoRa_read>
 80011bc:	0003      	movs	r3, r0
 80011be:	7023      	strb	r3, [r4, #0]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80011c0:	197b      	adds	r3, r7, r5
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	210d      	movs	r1, #13
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2122      	movs	r1, #34	; 0x22
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff ff56 	bl	8001088 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	2100      	movs	r1, #0
 80011e6:	f7ff ff75 	bl	80010d4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2103      	movs	r1, #3
 80011ee:	0018      	movs	r0, r3
 80011f0:	f7ff fcc7 	bl	8000b82 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80011f4:	2513      	movs	r5, #19
 80011f6:	197c      	adds	r4, r7, r5
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2112      	movs	r1, #18
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff ff25 	bl	800104c <LoRa_read>
 8001202:	0003      	movs	r3, r0
 8001204:	7023      	strb	r3, [r4, #0]
		if((read & 0x08)!=0){
 8001206:	197b      	adds	r3, r7, r5
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2208      	movs	r2, #8
 800120c:	4013      	ands	r3, r2
 800120e:	d00d      	beq.n	800122c <LoRa_transmit+0xa4>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	22ff      	movs	r2, #255	; 0xff
 8001214:	2112      	movs	r1, #18
 8001216:	0018      	movs	r0, r3
 8001218:	f7ff ff36 	bl	8001088 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	0011      	movs	r1, r2
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff fcad 	bl	8000b82 <LoRa_gotoMode>
			return 1;
 8001228:	2301      	movs	r3, #1
 800122a:	e014      	b.n	8001256 <LoRa_transmit+0xce>
		}
		else{
			if(--timeout==0){
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	1d3a      	adds	r2, r7, #4
 8001230:	8812      	ldrh	r2, [r2, #0]
 8001232:	3a01      	subs	r2, #1
 8001234:	801a      	strh	r2, [r3, #0]
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d107      	bne.n	800124e <LoRa_transmit+0xc6>
				LoRa_gotoMode(_LoRa, mode);
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	0011      	movs	r1, r2
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff fc9c 	bl	8000b82 <LoRa_gotoMode>
				return 0;
 800124a:	2300      	movs	r3, #0
 800124c:	e003      	b.n	8001256 <LoRa_transmit+0xce>
			}
		}
		HAL_Delay(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f000 fec4 	bl	8001fdc <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001254:	e7ce      	b.n	80011f4 <LoRa_transmit+0x6c>
	}
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b006      	add	sp, #24
 800125c:	bdb0      	pop	{r4, r5, r7, pc}

0800125e <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800125e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ff84 	bl	8001176 <LoRa_isvalid>
 800126e:	1e03      	subs	r3, r0, #0
 8001270:	d100      	bne.n	8001274 <LoRa_init+0x16>
 8001272:	e0b7      	b.n	80013e4 <LoRa_init+0x186>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2100      	movs	r1, #0
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff fc82 	bl	8000b82 <LoRa_gotoMode>
			HAL_Delay(10);
 800127e:	200a      	movs	r0, #10
 8001280:	f000 feac 	bl	8001fdc <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001284:	260f      	movs	r6, #15
 8001286:	19bc      	adds	r4, r7, r6
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2101      	movs	r1, #1
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff fedd 	bl	800104c <LoRa_read>
 8001292:	0003      	movs	r3, r0
 8001294:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 8001296:	200a      	movs	r0, #10
 8001298:	f000 fea0 	bl	8001fdc <HAL_Delay>
			data = read | 0x80;
 800129c:	250e      	movs	r5, #14
 800129e:	197b      	adds	r3, r7, r5
 80012a0:	0034      	movs	r4, r6
 80012a2:	193a      	adds	r2, r7, r4
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	4249      	negs	r1, r1
 80012aa:	430a      	orrs	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 80012ae:	197b      	adds	r3, r7, r5
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2101      	movs	r1, #1
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff fee6 	bl	8001088 <LoRa_write>
			HAL_Delay(100);
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f000 fe8d 	bl	8001fdc <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1a      	ldr	r2, [r3, #32]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0011      	movs	r1, r2
 80012ca:	0018      	movs	r0, r3
 80012cc:	f7ff fdc8 	bl	8000e60 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	222a      	movs	r2, #42	; 0x2a
 80012d4:	5c9a      	ldrb	r2, [r3, r2]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0011      	movs	r1, r2
 80012da:	0018      	movs	r0, r3
 80012dc:	f7ff fe31 	bl	8000f42 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	222b      	movs	r2, #43	; 0x2b
 80012e4:	5c9a      	ldrb	r2, [r3, r2]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	0011      	movs	r1, r2
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7ff fe3e 	bl	8000f6c <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2223      	movs	r2, #35	; 0x23
 80012f4:	210c      	movs	r1, #12
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff fec6 	bl	8001088 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	0018      	movs	r0, r3
 8001300:	f7ff fe82 	bl	8001008 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2224      	movs	r2, #36	; 0x24
 8001308:	5c9b      	ldrb	r3, [r3, r2]
 800130a:	001a      	movs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff fddc 	bl	8000ece <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	22ff      	movs	r2, #255	; 0xff
 800131a:	211f      	movs	r1, #31
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff feb3 	bl	8001088 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001322:	197b      	adds	r3, r7, r5
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2225      	movs	r2, #37	; 0x25
 800132c:	5c9b      	ldrb	r3, [r3, r2]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	b2d9      	uxtb	r1, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2226      	movs	r2, #38	; 0x26
 8001336:	5c9b      	ldrb	r3, [r3, r2]
 8001338:	18db      	adds	r3, r3, r3
 800133a:	b2da      	uxtb	r2, r3
 800133c:	197b      	adds	r3, r7, r5
 800133e:	188a      	adds	r2, r1, r2
 8001340:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001342:	197b      	adds	r3, r7, r5
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	211d      	movs	r1, #29
 800134a:	0018      	movs	r0, r3
 800134c:	f7ff fe9c 	bl	8001088 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	0018      	movs	r0, r3
 8001354:	f7ff fd4a 	bl	8000dec <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b29b      	uxth	r3, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2120      	movs	r1, #32
 8001366:	0018      	movs	r0, r3
 8001368:	f7ff fe8e 	bl	8001088 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001370:	b2da      	uxtb	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2121      	movs	r1, #33	; 0x21
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff fe86 	bl	8001088 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800137c:	0026      	movs	r6, r4
 800137e:	193c      	adds	r4, r7, r4
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2140      	movs	r1, #64	; 0x40
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff fe61 	bl	800104c <LoRa_read>
 800138a:	0003      	movs	r3, r0
 800138c:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 800138e:	197b      	adds	r3, r7, r5
 8001390:	0034      	movs	r4, r6
 8001392:	193a      	adds	r2, r7, r4
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	213f      	movs	r1, #63	; 0x3f
 8001398:	430a      	orrs	r2, r1
 800139a:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800139c:	197b      	adds	r3, r7, r5
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2140      	movs	r1, #64	; 0x40
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff fe6f 	bl	8001088 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2101      	movs	r1, #1
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff fbe7 	bl	8000b82 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80013ba:	200a      	movs	r0, #10
 80013bc:	f000 fe0e 	bl	8001fdc <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80013c0:	0025      	movs	r5, r4
 80013c2:	193c      	adds	r4, r7, r4
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2142      	movs	r1, #66	; 0x42
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff fe3f 	bl	800104c <LoRa_read>
 80013ce:	0003      	movs	r3, r0
 80013d0:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 80013d2:	197b      	adds	r3, r7, r5
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b12      	cmp	r3, #18
 80013d8:	d101      	bne.n	80013de <LoRa_init+0x180>
				return LORA_OK;
 80013da:	23c8      	movs	r3, #200	; 0xc8
 80013dc:	e004      	b.n	80013e8 <LoRa_init+0x18a>
			else
				return LORA_NOT_FOUND;
 80013de:	23ca      	movs	r3, #202	; 0xca
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	e001      	b.n	80013e8 <LoRa_init+0x18a>
	}
	else {
		return LORA_UNAVAILABLE;
 80013e4:	23f8      	movs	r3, #248	; 0xf8
 80013e6:	33ff      	adds	r3, #255	; 0xff
	}
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b005      	add	sp, #20
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013f0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <LL_RCC_HSI_Enable+0x18>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <LL_RCC_HSI_Enable+0x18>)
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	0049      	lsls	r1, r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000

0800140c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <LL_RCC_HSI_IsReady+0x24>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	401a      	ands	r2, r3
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	429a      	cmp	r2, r3
 8001420:	d101      	bne.n	8001426 <LL_RCC_HSI_IsReady+0x1a>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <LL_RCC_HSI_IsReady+0x1c>
 8001426:	2300      	movs	r3, #0
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	40021000 	.word	0x40021000

08001434 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <LL_RCC_SetSysClkSource+0x24>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2207      	movs	r2, #7
 8001442:	4393      	bics	r3, r2
 8001444:	0019      	movs	r1, r3
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <LL_RCC_SetSysClkSource+0x24>)
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	430a      	orrs	r2, r1
 800144c:	609a      	str	r2, [r3, #8]
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	40021000 	.word	0x40021000

0800145c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <LL_RCC_GetSysClkSource+0x14>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2238      	movs	r2, #56	; 0x38
 8001466:	4013      	ands	r3, r2
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	40021000 	.word	0x40021000

08001474 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <LL_RCC_SetAHBPrescaler+0x24>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <LL_RCC_SetAHBPrescaler+0x28>)
 8001482:	4013      	ands	r3, r2
 8001484:	0019      	movs	r1, r3
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <LL_RCC_SetAHBPrescaler+0x24>)
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b002      	add	sp, #8
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	40021000 	.word	0x40021000
 800149c:	fffff0ff 	.word	0xfffff0ff

080014a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <LL_RCC_SetAPB1Prescaler+0x28>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	0019      	movs	r1, r3
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	609a      	str	r2, [r3, #8]
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	40021000 	.word	0x40021000
 80014c8:	ffff8fff 	.word	0xffff8fff

080014cc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80014d6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	430a      	orrs	r2, r1
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80014e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4013      	ands	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b004      	add	sp, #16
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40021000 	.word	0x40021000

080014f8 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <LL_IOP_GRP1_EnableClock+0x28>)
 8001502:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <LL_IOP_GRP1_EnableClock+0x28>)
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	430a      	orrs	r2, r1
 800150a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <LL_IOP_GRP1_EnableClock+0x28>)
 800150e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4013      	ands	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000

08001524 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 800152e:	4a0f      	ldr	r2, [pc, #60]	; (800156c <LL_EXTI_SetEXTISource+0x48>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2103      	movs	r1, #3
 8001534:	400b      	ands	r3, r1
 8001536:	3318      	adds	r3, #24
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	589b      	ldr	r3, [r3, r2]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	0c12      	lsrs	r2, r2, #16
 8001540:	2107      	movs	r1, #7
 8001542:	4091      	lsls	r1, r2
 8001544:	000a      	movs	r2, r1
 8001546:	43d2      	mvns	r2, r2
 8001548:	401a      	ands	r2, r3
 800154a:	0011      	movs	r1, r2
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	0c1b      	lsrs	r3, r3, #16
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	409a      	lsls	r2, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <LL_EXTI_SetEXTISource+0x48>)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2403      	movs	r4, #3
 800155a:	4023      	ands	r3, r4
 800155c:	430a      	orrs	r2, r1
 800155e:	3318      	adds	r3, #24
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	501a      	str	r2, [r3, r0]
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b003      	add	sp, #12
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	40021800 	.word	0x40021800

08001570 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2201      	movs	r2, #1
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	b002      	add	sp, #8
 800158a:	bd80      	pop	{r7, pc}

0800158c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <LL_USART_ConfigAsyncMode+0x2c>)
 800159a:	401a      	ands	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	222a      	movs	r2, #42	; 0x2a
 80015a6:	4393      	bics	r3, r2
 80015a8:	001a      	movs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	ffffb7ff 	.word	0xffffb7ff

080015bc <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b80      	cmp	r3, #128	; 0x80
 80015ce:	d101      	bne.n	80015d4 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}

080015de <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	039b      	lsls	r3, r3, #14
 80015ee:	401a      	ands	r2, r3
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	039b      	lsls	r3, r3, #14
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d101      	bne.n	80015fc <LL_USART_IsActiveFlag_TEACK+0x1e>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <LL_USART_IsActiveFlag_TEACK+0x20>
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}

08001606 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69da      	ldr	r2, [r3, #28]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	03db      	lsls	r3, r3, #15
 8001616:	401a      	ands	r2, r3
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	03db      	lsls	r3, r3, #15
 800161c:	429a      	cmp	r2, r3
 800161e:	d101      	bne.n	8001624 <LL_USART_IsActiveFlag_REACK+0x1e>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <LL_USART_IsActiveFlag_REACK+0x20>
 8001624:	2300      	movs	r3, #0
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}

0800162e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	000a      	movs	r2, r1
 8001638:	1cfb      	adds	r3, r7, #3
 800163a:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 800163c:	1cfb      	adds	r3, r7, #3
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}

0800164c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	435b      	muls	r3, r3
 8001660:	001a      	movs	r2, r3
 8001662:	0013      	movs	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	189b      	adds	r3, r3, r2
 8001668:	43db      	mvns	r3, r3
 800166a:	400b      	ands	r3, r1
 800166c:	001a      	movs	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	435b      	muls	r3, r3
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	434b      	muls	r3, r1
 8001676:	431a      	orrs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	601a      	str	r2, [r3, #0]
}
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b004      	add	sp, #16
 8001682:	bd80      	pop	{r7, pc}

08001684 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	68d9      	ldr	r1, [r3, #12]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	435b      	muls	r3, r3
 8001698:	001a      	movs	r2, r3
 800169a:	0013      	movs	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	189b      	adds	r3, r3, r2
 80016a0:	43db      	mvns	r3, r3
 80016a2:	400b      	ands	r3, r1
 80016a4:	001a      	movs	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	435b      	muls	r3, r3
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	434b      	muls	r3, r1
 80016ae:	431a      	orrs	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	60da      	str	r2, [r3, #12]
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b004      	add	sp, #16
 80016ba:	bd80      	pop	{r7, pc}

080016bc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	619a      	str	r2, [r3, #24]
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}

080016ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	b0e7      	sub	sp, #412	; 0x19c
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f2:	f000 fbed 	bl	8001ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f6:	f000 f94b 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fa:	f000 fa37 	bl	8001b6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016fe:	f000 f9ad 	bl	8001a5c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001702:	f000 f96d 	bl	80019e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t welcome_msg[] = "\e[2J\e[HAMP KART Remote UART Interface\r\n=======================\r\n";
 8001706:	23a2      	movs	r3, #162	; 0xa2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	18fa      	adds	r2, r7, r3
 800170c:	4b94      	ldr	r3, [pc, #592]	; (8001960 <main+0x274>)
 800170e:	0010      	movs	r0, r2
 8001710:	0019      	movs	r1, r3
 8001712:	2341      	movs	r3, #65	; 0x41
 8001714:	001a      	movs	r2, r3
 8001716:	f002 fb27 	bl	8003d68 <memcpy>
  //  HAL_UART_Transmit_IT(&huart2, welcome_msg, sizeof(welcome_msg));
    for (int i = 0; i < sizeof(welcome_msg); i++)
 800171a:	2300      	movs	r3, #0
 800171c:	22ca      	movs	r2, #202	; 0xca
 800171e:	0052      	lsls	r2, r2, #1
 8001720:	18ba      	adds	r2, r7, r2
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	e01b      	b.n	800175e <main+0x72>
    {
  	  LL_USART_TransmitData8(USART2, welcome_msg[i]);
 8001726:	23a2      	movs	r3, #162	; 0xa2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	18fa      	adds	r2, r7, r3
 800172c:	23ca      	movs	r3, #202	; 0xca
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	18d3      	adds	r3, r2, r3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4a8a      	ldr	r2, [pc, #552]	; (8001964 <main+0x278>)
 800173a:	0019      	movs	r1, r3
 800173c:	0010      	movs	r0, r2
 800173e:	f7ff ff76 	bl	800162e <LL_USART_TransmitData8>
  	  while (!LL_USART_IsActiveFlag_TXE(USART2));
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	4b87      	ldr	r3, [pc, #540]	; (8001964 <main+0x278>)
 8001746:	0018      	movs	r0, r3
 8001748:	f7ff ff38 	bl	80015bc <LL_USART_IsActiveFlag_TXE_TXFNF>
 800174c:	1e03      	subs	r3, r0, #0
 800174e:	d0f9      	beq.n	8001744 <main+0x58>
    for (int i = 0; i < sizeof(welcome_msg); i++)
 8001750:	22ca      	movs	r2, #202	; 0xca
 8001752:	0052      	lsls	r2, r2, #1
 8001754:	18bb      	adds	r3, r7, r2
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	18ba      	adds	r2, r7, r2
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	23ca      	movs	r3, #202	; 0xca
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b40      	cmp	r3, #64	; 0x40
 8001768:	d9dd      	bls.n	8001726 <main+0x3a>
    }

    LoRa myLoRa;
    myLoRa = newLoRa();
 800176a:	258c      	movs	r5, #140	; 0x8c
 800176c:	006d      	lsls	r5, r5, #1
 800176e:	197c      	adds	r4, r7, r5
 8001770:	003b      	movs	r3, r7
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff f9b8 	bl	8000ae8 <newLoRa>
 8001778:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <main+0x27c>)
 800177a:	26cc      	movs	r6, #204	; 0xcc
 800177c:	0076      	lsls	r6, r6, #1
 800177e:	199b      	adds	r3, r3, r6
 8001780:	19da      	adds	r2, r3, r7
 8001782:	0023      	movs	r3, r4
 8001784:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001786:	c313      	stmia	r3!, {r0, r1, r4}
 8001788:	ca13      	ldmia	r2!, {r0, r1, r4}
 800178a:	c313      	stmia	r3!, {r0, r1, r4}
 800178c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800178e:	c313      	stmia	r3!, {r0, r1, r4}
 8001790:	ca03      	ldmia	r2!, {r0, r1}
 8001792:	c303      	stmia	r3!, {r0, r1}

    myLoRa.CS_port = SPI1_CS_GPIO_Port;
 8001794:	197b      	adds	r3, r7, r5
 8001796:	22a0      	movs	r2, #160	; 0xa0
 8001798:	05d2      	lsls	r2, r2, #23
 800179a:	601a      	str	r2, [r3, #0]
    myLoRa.CS_pin = SPI1_CS_Pin;
 800179c:	197b      	adds	r3, r7, r5
 800179e:	2201      	movs	r2, #1
 80017a0:	809a      	strh	r2, [r3, #4]
    myLoRa.reset_port = RFM_RST_GPIO_Port;
 80017a2:	197b      	adds	r3, r7, r5
 80017a4:	22a0      	movs	r2, #160	; 0xa0
 80017a6:	05d2      	lsls	r2, r2, #23
 80017a8:	609a      	str	r2, [r3, #8]
    myLoRa.reset_pin = RFM_RST_Pin;
 80017aa:	197b      	adds	r3, r7, r5
 80017ac:	2210      	movs	r2, #16
 80017ae:	819a      	strh	r2, [r3, #12]
    myLoRa.DIO0_port = RFM_G0_GPIO_Port;
 80017b0:	197b      	adds	r3, r7, r5
 80017b2:	22a0      	movs	r2, #160	; 0xa0
 80017b4:	05d2      	lsls	r2, r2, #23
 80017b6:	611a      	str	r2, [r3, #16]
    myLoRa.DIO0_pin = RFM_G0_Pin;
 80017b8:	197b      	adds	r3, r7, r5
 80017ba:	2220      	movs	r2, #32
 80017bc:	829a      	strh	r2, [r3, #20]
    myLoRa.hSPIx = &hspi1;
 80017be:	197b      	adds	r3, r7, r5
 80017c0:	4a6a      	ldr	r2, [pc, #424]	; (800196c <main+0x280>)
 80017c2:	619a      	str	r2, [r3, #24]

    myLoRa.frequency = 915;
 80017c4:	197b      	adds	r3, r7, r5
 80017c6:	4a6a      	ldr	r2, [pc, #424]	; (8001970 <main+0x284>)
 80017c8:	621a      	str	r2, [r3, #32]

    LoRa_reset(&myLoRa);
 80017ca:	197b      	adds	r3, r7, r5
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff f9ba 	bl	8000b46 <LoRa_reset>
    uint16_t lora_status = LoRa_init(&myLoRa);
 80017d2:	23c3      	movs	r3, #195	; 0xc3
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	18fc      	adds	r4, r7, r3
 80017d8:	197b      	adds	r3, r7, r5
 80017da:	0018      	movs	r0, r3
 80017dc:	f7ff fd3f 	bl	800125e <LoRa_init>
 80017e0:	0003      	movs	r3, r0
 80017e2:	8023      	strh	r3, [r4, #0]
    if (lora_status == LORA_OK)
 80017e4:	23c3      	movs	r3, #195	; 0xc3
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	2bc8      	cmp	r3, #200	; 0xc8
 80017ee:	d132      	bne.n	8001856 <main+0x16a>
    {
    	  uint8_t msg[] = "LoRa OK\r\n";
 80017f0:	4b60      	ldr	r3, [pc, #384]	; (8001974 <main+0x288>)
 80017f2:	199b      	adds	r3, r3, r6
 80017f4:	19db      	adds	r3, r3, r7
 80017f6:	4a60      	ldr	r2, [pc, #384]	; (8001978 <main+0x28c>)
 80017f8:	ca03      	ldmia	r2!, {r0, r1}
 80017fa:	c303      	stmia	r3!, {r0, r1}
 80017fc:	8812      	ldrh	r2, [r2, #0]
 80017fe:	801a      	strh	r2, [r3, #0]
    	  //  HAL_UART_Transmit_IT(&huart2, welcome_msg, sizeof(welcome_msg));
    	  for (int i = 0; i < sizeof(msg); i++)
 8001800:	2300      	movs	r3, #0
 8001802:	22c8      	movs	r2, #200	; 0xc8
 8001804:	0052      	lsls	r2, r2, #1
 8001806:	18ba      	adds	r2, r7, r2
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <main+0x15c>
    	  {
    		  LL_USART_TransmitData8(USART2, msg[i]);
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <main+0x288>)
 800180e:	22cc      	movs	r2, #204	; 0xcc
 8001810:	0052      	lsls	r2, r2, #1
 8001812:	189b      	adds	r3, r3, r2
 8001814:	19da      	adds	r2, r3, r7
 8001816:	23c8      	movs	r3, #200	; 0xc8
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	18d3      	adds	r3, r2, r3
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4a50      	ldr	r2, [pc, #320]	; (8001964 <main+0x278>)
 8001824:	0019      	movs	r1, r3
 8001826:	0010      	movs	r0, r2
 8001828:	f7ff ff01 	bl	800162e <LL_USART_TransmitData8>
    		  while (!LL_USART_IsActiveFlag_TXE(USART2));
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <main+0x278>)
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff fec3 	bl	80015bc <LL_USART_IsActiveFlag_TXE_TXFNF>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d0f9      	beq.n	800182e <main+0x142>
    	  for (int i = 0; i < sizeof(msg); i++)
 800183a:	22c8      	movs	r2, #200	; 0xc8
 800183c:	0052      	lsls	r2, r2, #1
 800183e:	18bb      	adds	r3, r7, r2
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	18ba      	adds	r2, r7, r2
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	23c8      	movs	r3, #200	; 0xc8
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b09      	cmp	r3, #9
 8001852:	d9db      	bls.n	800180c <main+0x120>
 8001854:	e033      	b.n	80018be <main+0x1d2>
    	  }
    }
    else
    {
    	  uint8_t msg[] = "LoRa FAILED\r\n";
 8001856:	4b49      	ldr	r3, [pc, #292]	; (800197c <main+0x290>)
 8001858:	22cc      	movs	r2, #204	; 0xcc
 800185a:	0052      	lsls	r2, r2, #1
 800185c:	189b      	adds	r3, r3, r2
 800185e:	19db      	adds	r3, r3, r7
 8001860:	4a47      	ldr	r2, [pc, #284]	; (8001980 <main+0x294>)
 8001862:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001864:	c313      	stmia	r3!, {r0, r1, r4}
 8001866:	8812      	ldrh	r2, [r2, #0]
 8001868:	801a      	strh	r2, [r3, #0]
    	  //  HAL_UART_Transmit_IT(&huart2, welcome_msg, sizeof(welcome_msg));
    	  for (int i = 0; i < sizeof(msg); i++)
 800186a:	2300      	movs	r3, #0
 800186c:	22c6      	movs	r2, #198	; 0xc6
 800186e:	0052      	lsls	r2, r2, #1
 8001870:	18ba      	adds	r2, r7, r2
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e01d      	b.n	80018b2 <main+0x1c6>
    	  {
    		  LL_USART_TransmitData8(USART2, msg[i]);
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <main+0x290>)
 8001878:	22cc      	movs	r2, #204	; 0xcc
 800187a:	0052      	lsls	r2, r2, #1
 800187c:	189b      	adds	r3, r3, r2
 800187e:	19da      	adds	r2, r3, r7
 8001880:	23c6      	movs	r3, #198	; 0xc6
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	18d3      	adds	r3, r2, r3
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4a35      	ldr	r2, [pc, #212]	; (8001964 <main+0x278>)
 800188e:	0019      	movs	r1, r3
 8001890:	0010      	movs	r0, r2
 8001892:	f7ff fecc 	bl	800162e <LL_USART_TransmitData8>
    		  while (!LL_USART_IsActiveFlag_TXE(USART2));
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <main+0x278>)
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff fe8e 	bl	80015bc <LL_USART_IsActiveFlag_TXE_TXFNF>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d0f9      	beq.n	8001898 <main+0x1ac>
    	  for (int i = 0; i < sizeof(msg); i++)
 80018a4:	22c6      	movs	r2, #198	; 0xc6
 80018a6:	0052      	lsls	r2, r2, #1
 80018a8:	18bb      	adds	r3, r7, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	18ba      	adds	r2, r7, r2
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	23c6      	movs	r3, #198	; 0xc6
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b0d      	cmp	r3, #13
 80018bc:	d9db      	bls.n	8001876 <main+0x18a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    char send_data[200];
    memset(send_data, NULL, 200);
 80018be:	2450      	movs	r4, #80	; 0x50
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	22c8      	movs	r2, #200	; 0xc8
 80018c4:	2100      	movs	r1, #0
 80018c6:	0018      	movs	r0, r3
 80018c8:	f002 fa1a 	bl	8003d00 <memset>
    snprintf(send_data, sizeof(send_data), "1234abcd\r\n");
 80018cc:	4a2d      	ldr	r2, [pc, #180]	; (8001984 <main+0x298>)
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	21c8      	movs	r1, #200	; 0xc8
 80018d2:	0018      	movs	r0, r3
 80018d4:	f002 f9e0 	bl	8003c98 <sniprintf>
  while (1)
  {
	  //  HAL_UART_Transmit_IT(&huart2, welcome_msg, sizeof(welcome_msg));
	  for (int i = 0; i < sizeof(send_data); i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	22c4      	movs	r2, #196	; 0xc4
 80018dc:	0052      	lsls	r2, r2, #1
 80018de:	18ba      	adds	r2, r7, r2
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e01d      	b.n	8001920 <main+0x234>
	  {
		  LL_USART_TransmitData8(USART2, send_data[i]);
 80018e4:	4b28      	ldr	r3, [pc, #160]	; (8001988 <main+0x29c>)
 80018e6:	22cc      	movs	r2, #204	; 0xcc
 80018e8:	0052      	lsls	r2, r2, #1
 80018ea:	189b      	adds	r3, r3, r2
 80018ec:	19da      	adds	r2, r3, r7
 80018ee:	23c4      	movs	r3, #196	; 0xc4
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	18d3      	adds	r3, r2, r3
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <main+0x278>)
 80018fc:	0019      	movs	r1, r3
 80018fe:	0010      	movs	r0, r2
 8001900:	f7ff fe95 	bl	800162e <LL_USART_TransmitData8>
		  while (!LL_USART_IsActiveFlag_TXE(USART2));
 8001904:	46c0      	nop			; (mov r8, r8)
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <main+0x278>)
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff fe57 	bl	80015bc <LL_USART_IsActiveFlag_TXE_TXFNF>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d0f9      	beq.n	8001906 <main+0x21a>
	  for (int i = 0; i < sizeof(send_data); i++)
 8001912:	22c4      	movs	r2, #196	; 0xc4
 8001914:	0052      	lsls	r2, r2, #1
 8001916:	18bb      	adds	r3, r7, r2
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	18ba      	adds	r2, r7, r2
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	23c4      	movs	r3, #196	; 0xc4
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2bc7      	cmp	r3, #199	; 0xc7
 800192a:	d9db      	bls.n	80018e4 <main+0x1f8>
	  }
	  LL_GPIO_SetOutputPin(LD3_GPIO_Port, LD3_Pin);
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <main+0x2a0>)
 800192e:	2140      	movs	r1, #64	; 0x40
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff fec3 	bl	80016bc <LL_GPIO_SetOutputPin>
	  LoRa_transmit(&myLoRa, send_data, 8, 100);
 8001936:	2350      	movs	r3, #80	; 0x50
 8001938:	18f9      	adds	r1, r7, r3
 800193a:	238c      	movs	r3, #140	; 0x8c
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	18f8      	adds	r0, r7, r3
 8001940:	2364      	movs	r3, #100	; 0x64
 8001942:	2208      	movs	r2, #8
 8001944:	f7ff fc20 	bl	8001188 <LoRa_transmit>
	  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <main+0x2a0>)
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	0018      	movs	r0, r3
 800194e:	f7ff fec1 	bl	80016d4 <LL_GPIO_ResetOutputPin>
	  HAL_Delay(1000);
 8001952:	23fa      	movs	r3, #250	; 0xfa
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	0018      	movs	r0, r3
 8001958:	f000 fb40 	bl	8001fdc <HAL_Delay>
	  for (int i = 0; i < sizeof(send_data); i++)
 800195c:	e7bc      	b.n	80018d8 <main+0x1ec>
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	08004684 	.word	0x08004684
 8001964:	40004400 	.word	0x40004400
 8001968:	fffffe68 	.word	0xfffffe68
 800196c:	20000078 	.word	0x20000078
 8001970:	00000393 	.word	0x00000393
 8001974:	fffffeac 	.word	0xfffffeac
 8001978:	080046c8 	.word	0x080046c8
 800197c:	fffffe9c 	.word	0xfffffe9c
 8001980:	080046d4 	.word	0x080046d4
 8001984:	08004678 	.word	0x08004678
 8001988:	fffffeb8 	.word	0xfffffeb8
 800198c:	50000800 	.word	0x50000800

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8001994:	f7ff fd2c 	bl	80013f0 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	f7ff fd37 	bl	800140c <LL_RCC_HSI_IsReady>
 800199e:	0003      	movs	r3, r0
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d1fa      	bne.n	800199a <SystemClock_Config+0xa>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fd65 	bl	8001474 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the HSI */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff fd42 	bl	8001434 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	f7ff fd53 	bl	800145c <LL_RCC_GetSysClkSource>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d1fb      	bne.n	80019b2 <SystemClock_Config+0x22>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff fd70 	bl	80014a0 <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(16000000);
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SystemClock_Config+0x4c>)
 80019c2:	0018      	movs	r0, r3
 80019c4:	f002 f95a 	bl	8003c7c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80019c8:	2000      	movs	r0, #0
 80019ca:	f000 faa1 	bl	8001f10 <HAL_InitTick>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019d2:	f000 f98b 	bl	8001cec <Error_Handler>
  }
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	00f42400 	.word	0x00f42400

080019e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <MX_SPI1_Init+0x78>)
 80019e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019ec:	2282      	movs	r2, #130	; 0x82
 80019ee:	0052      	lsls	r2, r2, #1
 80019f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <MX_SPI1_Init+0x74>)
 80019fa:	22e0      	movs	r2, #224	; 0xe0
 80019fc:	00d2      	lsls	r2, r2, #3
 80019fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a16:	2208      	movs	r2, #8
 8001a18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a2e:	2207      	movs	r2, #7
 8001a30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <MX_SPI1_Init+0x74>)
 8001a40:	0018      	movs	r0, r3
 8001a42:	f000 fd25 	bl	8002490 <HAL_SPI_Init>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d001      	beq.n	8001a4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a4a:	f000 f94f 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000078 	.word	0x20000078
 8001a58:	40013000 	.word	0x40013000

08001a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b08f      	sub	sp, #60	; 0x3c
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a62:	2418      	movs	r4, #24
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	0018      	movs	r0, r3
 8001a68:	2320      	movs	r3, #32
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	f002 f947 	bl	8003d00 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	003b      	movs	r3, r7
 8001a74:	0018      	movs	r0, r3
 8001a76:	2318      	movs	r3, #24
 8001a78:	001a      	movs	r2, r3
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	f002 f940 	bl	8003d00 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	029b      	lsls	r3, r3, #10
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff fd21 	bl	80014cc <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff fd34 	bl	80014f8 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = T_VCP_TX_Pin;
 8001a90:	003b      	movs	r3, r7
 8001a92:	2204      	movs	r2, #4
 8001a94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a96:	003b      	movs	r3, r7
 8001a98:	2202      	movs	r2, #2
 8001a9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a9c:	003b      	movs	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aa2:	003b      	movs	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001aa8:	003b      	movs	r3, r7
 8001aaa:	2201      	movs	r2, #1
 8001aac:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001aae:	003b      	movs	r3, r7
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(T_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	003a      	movs	r2, r7
 8001ab6:	23a0      	movs	r3, #160	; 0xa0
 8001ab8:	05db      	lsls	r3, r3, #23
 8001aba:	0011      	movs	r1, r2
 8001abc:	0018      	movs	r0, r3
 8001abe:	f001 fddd 	bl	800367c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = T_VCP_RX_Pin;
 8001ac2:	003b      	movs	r3, r7
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ac8:	003b      	movs	r3, r7
 8001aca:	2202      	movs	r2, #2
 8001acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ace:	003b      	movs	r3, r7
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ad4:	003b      	movs	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ada:	003b      	movs	r3, r7
 8001adc:	2201      	movs	r2, #1
 8001ade:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001ae0:	003b      	movs	r3, r7
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(T_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	003a      	movs	r2, r7
 8001ae8:	23a0      	movs	r3, #160	; 0xa0
 8001aea:	05db      	lsls	r3, r3, #23
 8001aec:	0011      	movs	r1, r2
 8001aee:	0018      	movs	r0, r3
 8001af0:	f001 fdc4 	bl	800367c <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	22e1      	movs	r2, #225	; 0xe1
 8001afe:	0252      	lsls	r2, r2, #9
 8001b00:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b02:	0021      	movs	r1, r4
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	220c      	movs	r2, #12
 8001b1a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2200      	movs	r2, #0
 8001b26:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <MX_USART2_UART_Init+0x10c>)
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	0010      	movs	r0, r2
 8001b30:	f002 f832 	bl	8003b98 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_USART2_UART_Init+0x10c>)
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff fd28 	bl	800158c <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <MX_USART2_UART_Init+0x10c>)
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7ff fd16 	bl	8001570 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MX_USART2_UART_Init+0x10c>)
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f7ff fd48 	bl	80015de <LL_USART_IsActiveFlag_TEACK>
 8001b4e:	1e03      	subs	r3, r0, #0
 8001b50:	d0f9      	beq.n	8001b46 <MX_USART2_UART_Init+0xea>
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <MX_USART2_UART_Init+0x10c>)
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff fd56 	bl	8001606 <LL_USART_IsActiveFlag_REACK>
 8001b5a:	1e03      	subs	r3, r0, #0
 8001b5c:	d0f3      	beq.n	8001b46 <MX_USART2_UART_Init+0xea>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b00f      	add	sp, #60	; 0x3c
 8001b66:	bd90      	pop	{r4, r7, pc}
 8001b68:	40004400 	.word	0x40004400

08001b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001b72:	2418      	movs	r4, #24
 8001b74:	193b      	adds	r3, r7, r4
 8001b76:	0018      	movs	r0, r3
 8001b78:	2308      	movs	r3, #8
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	f002 f8bf 	bl	8003d00 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b82:	003b      	movs	r3, r7
 8001b84:	0018      	movs	r0, r3
 8001b86:	2318      	movs	r3, #24
 8001b88:	001a      	movs	r2, r3
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	f002 f8b8 	bl	8003d00 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8001b90:	2004      	movs	r0, #4
 8001b92:	f7ff fcb1 	bl	80014f8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 8001b96:	2020      	movs	r0, #32
 8001b98:	f7ff fcae 	bl	80014f8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff fcab 	bl	80014f8 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8001ba2:	23a0      	movs	r3, #160	; 0xa0
 8001ba4:	05db      	lsls	r3, r3, #23
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff fd87 	bl	80016bc <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(RFM_RST_GPIO_Port, RFM_RST_Pin);
 8001bae:	23a0      	movs	r3, #160	; 0xa0
 8001bb0:	05db      	lsls	r3, r3, #23
 8001bb2:	2110      	movs	r1, #16
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff fd81 	bl	80016bc <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 8001bba:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <MX_GPIO_Init+0x174>)
 8001bbc:	2140      	movs	r1, #64	; 0x40
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7ff fd88 	bl	80016d4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTF, LL_EXTI_CONFIG_LINE2);
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	035b      	lsls	r3, r3, #13
 8001bc8:	0019      	movs	r1, r3
 8001bca:	2005      	movs	r0, #5
 8001bcc:	f7ff fcaa 	bl	8001524 <LL_EXTI_SetEXTISource>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTA, LL_EXTI_CONFIG_LINE5);
 8001bd0:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <MX_GPIO_Init+0x178>)
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff fca5 	bl	8001524 <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001bda:	0021      	movs	r1, r4
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2204      	movs	r2, #4
 8001be0:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2201      	movs	r2, #1
 8001be6:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	2200      	movs	r2, #0
 8001bec:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001bf4:	000c      	movs	r4, r1
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f001 fc05 	bl	8003408 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8001bfe:	0021      	movs	r1, r4
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	2220      	movs	r2, #32
 8001c04:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2201      	movs	r2, #1
 8001c0a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2200      	movs	r2, #0
 8001c10:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001c12:	187b      	adds	r3, r7, r1
 8001c14:	2201      	movs	r2, #1
 8001c16:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f001 fbf4 	bl	8003408 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(T_NRST_GPIO_Port, T_NRST_Pin, LL_GPIO_PULL_NO);
 8001c20:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <MX_GPIO_Init+0x17c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	2104      	movs	r1, #4
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7ff fd2c 	bl	8001684 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(RFM_G0_GPIO_Port, RFM_G0_Pin, LL_GPIO_PULL_NO);
 8001c2c:	23a0      	movs	r3, #160	; 0xa0
 8001c2e:	05db      	lsls	r3, r3, #23
 8001c30:	2200      	movs	r2, #0
 8001c32:	2120      	movs	r1, #32
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff fd25 	bl	8001684 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(T_NRST_GPIO_Port, T_NRST_Pin, LL_GPIO_MODE_INPUT);
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <MX_GPIO_Init+0x17c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2104      	movs	r1, #4
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff fd03 	bl	800164c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(RFM_G0_GPIO_Port, RFM_G0_Pin, LL_GPIO_MODE_INPUT);
 8001c46:	23a0      	movs	r3, #160	; 0xa0
 8001c48:	05db      	lsls	r3, r3, #23
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7ff fcfc 	bl	800164c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001c54:	003b      	movs	r3, r7
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c5a:	003b      	movs	r3, r7
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	003b      	movs	r3, r7
 8001c62:	2203      	movs	r2, #3
 8001c64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c66:	003b      	movs	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c6c:	003b      	movs	r3, r7
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001c72:	003a      	movs	r2, r7
 8001c74:	23a0      	movs	r3, #160	; 0xa0
 8001c76:	05db      	lsls	r3, r3, #23
 8001c78:	0011      	movs	r1, r2
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f001 fcfe 	bl	800367c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RFM_RST_Pin;
 8001c80:	003b      	movs	r3, r7
 8001c82:	2210      	movs	r2, #16
 8001c84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c86:	003b      	movs	r3, r7
 8001c88:	2201      	movs	r2, #1
 8001c8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	003b      	movs	r3, r7
 8001c8e:	2203      	movs	r2, #3
 8001c90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c92:	003b      	movs	r3, r7
 8001c94:	2200      	movs	r2, #0
 8001c96:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c98:	003b      	movs	r3, r7
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(RFM_RST_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	003a      	movs	r2, r7
 8001ca0:	23a0      	movs	r3, #160	; 0xa0
 8001ca2:	05db      	lsls	r3, r3, #23
 8001ca4:	0011      	movs	r1, r2
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f001 fce8 	bl	800367c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8001cac:	003b      	movs	r3, r7
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cb2:	003b      	movs	r3, r7
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cb8:	003b      	movs	r3, r7
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cbe:	003b      	movs	r3, r7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc4:	003b      	movs	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001cca:	003b      	movs	r3, r7
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <MX_GPIO_Init+0x174>)
 8001cce:	0019      	movs	r1, r3
 8001cd0:	0010      	movs	r0, r2
 8001cd2:	f001 fcd3 	bl	800367c <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b009      	add	sp, #36	; 0x24
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	50000800 	.word	0x50000800
 8001ce4:	00080001 	.word	0x00080001
 8001ce8:	50001400 	.word	0x50001400

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_MspInit+0x44>)
 8001d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_MspInit+0x44>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_MspInit+0x44>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_MspInit+0x44>)
 8001d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_MspInit+0x44>)
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0549      	lsls	r1, r1, #21
 8001d20:	430a      	orrs	r2, r1
 8001d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_MspInit+0x44>)
 8001d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	055b      	lsls	r3, r3, #21
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b08b      	sub	sp, #44	; 0x2c
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	2414      	movs	r4, #20
 8001d4a:	193b      	adds	r3, r7, r4
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	2314      	movs	r3, #20
 8001d50:	001a      	movs	r2, r3
 8001d52:	2100      	movs	r1, #0
 8001d54:	f001 ffd4 	bl	8003d00 <memset>
  if(hspi->Instance==SPI1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <HAL_SPI_MspInit+0x8c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d130      	bne.n	8001dc4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_SPI_MspInit+0x90>)
 8001d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_SPI_MspInit+0x90>)
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	0149      	lsls	r1, r1, #5
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_SPI_MspInit+0x90>)
 8001d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	015b      	lsls	r3, r3, #5
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_SPI_MspInit+0x90>)
 8001d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_SPI_MspInit+0x90>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	430a      	orrs	r2, r1
 8001d88:	635a      	str	r2, [r3, #52]	; 0x34
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_SPI_MspInit+0x90>)
 8001d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4013      	ands	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001d96:	0021      	movs	r1, r4
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	22c2      	movs	r2, #194	; 0xc2
 8001d9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	2202      	movs	r2, #2
 8001da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	187a      	adds	r2, r7, r1
 8001db8:	23a0      	movs	r3, #160	; 0xa0
 8001dba:	05db      	lsls	r3, r3, #23
 8001dbc:	0011      	movs	r1, r2
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 f9e4 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b00b      	add	sp, #44	; 0x2c
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	40013000 	.word	0x40013000
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <NMI_Handler+0x4>

08001dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <HardFault_Handler+0x4>

08001de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df8:	f000 f8d4 	bl	8001fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <_sbrk+0x5c>)
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <_sbrk+0x60>)
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <_sbrk+0x64>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <_sbrk+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	18d3      	adds	r3, r2, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d207      	bcs.n	8001e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e34:	f001 ff6c 	bl	8003d10 <__errno>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	425b      	negs	r3, r3
 8001e42:	e009      	b.n	8001e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	18d2      	adds	r2, r2, r3
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <_sbrk+0x64>)
 8001e54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	0018      	movs	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b006      	add	sp, #24
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20002000 	.word	0x20002000
 8001e64:	00000400 	.word	0x00000400
 8001e68:	200000dc 	.word	0x200000dc
 8001e6c:	20000230 	.word	0x20000230

08001e70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e7c:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e80:	f7ff fff6 	bl	8001e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e86:	490d      	ldr	r1, [pc, #52]	; (8001ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e88:	4a0d      	ldr	r2, [pc, #52]	; (8001ec0 <LoopForever+0xe>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e8c:	e002      	b.n	8001e94 <LoopCopyDataInit>

08001e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e92:	3304      	adds	r3, #4

08001e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e98:	d3f9      	bcc.n	8001e8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ec8 <LoopForever+0x16>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea0:	e001      	b.n	8001ea6 <LoopFillZerobss>

08001ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea4:	3204      	adds	r2, #4

08001ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea8:	d3fb      	bcc.n	8001ea2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eaa:	f001 ff37 	bl	8003d1c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001eae:	f7ff fc1d 	bl	80016ec <main>

08001eb2 <LoopForever>:

LoopForever:
  b LoopForever
 8001eb2:	e7fe      	b.n	8001eb2 <LoopForever>
  ldr   r0, =_estack
 8001eb4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ec0:	080047f0 	.word	0x080047f0
  ldr r2, =_sbss
 8001ec4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ec8:	2000022c 	.word	0x2000022c

08001ecc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC1_IRQHandler>
	...

08001ed0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_Init+0x3c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_Init+0x3c>)
 8001ee2:	2180      	movs	r1, #128	; 0x80
 8001ee4:	0049      	lsls	r1, r1, #1
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f810 	bl	8001f10 <HAL_InitTick>
 8001ef0:	1e03      	subs	r3, r0, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	e001      	b.n	8001f00 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001efc:	f7ff fefc 	bl	8001cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	781b      	ldrb	r3, [r3, #0]
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40022000 	.word	0x40022000

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f18:	230f      	movs	r3, #15
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_InitTick+0x88>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d02b      	beq.n	8001f80 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_InitTick+0x8c>)
 8001f2a:	681c      	ldr	r4, [r3, #0]
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <HAL_InitTick+0x88>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	0019      	movs	r1, r3
 8001f32:	23fa      	movs	r3, #250	; 0xfa
 8001f34:	0098      	lsls	r0, r3, #2
 8001f36:	f7fe f8ef 	bl	8000118 <__udivsi3>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	0020      	movs	r0, r4
 8001f40:	f7fe f8ea 	bl	8000118 <__udivsi3>
 8001f44:	0003      	movs	r3, r0
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 f913 	bl	8002172 <HAL_SYSTICK_Config>
 8001f4c:	1e03      	subs	r3, r0, #0
 8001f4e:	d112      	bne.n	8001f76 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d80a      	bhi.n	8001f6c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	2301      	movs	r3, #1
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 f8f2 	bl	8002148 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_InitTick+0x90>)
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e00d      	b.n	8001f88 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f6c:	230f      	movs	r3, #15
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	e008      	b.n	8001f88 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f76:	230f      	movs	r3, #15
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	e003      	b.n	8001f88 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f80:	230f      	movs	r3, #15
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001f88:	230f      	movs	r3, #15
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b005      	add	sp, #20
 8001f94:	bd90      	pop	{r4, r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_IncTick+0x1c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	001a      	movs	r2, r3
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_IncTick+0x20>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	18d2      	adds	r2, r2, r3
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_IncTick+0x20>)
 8001fb6:	601a      	str	r2, [r3, #0]
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	200000e0 	.word	0x200000e0

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b02      	ldr	r3, [pc, #8]	; (8001fd8 <HAL_GetTick+0x10>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	200000e0 	.word	0x200000e0

08001fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff fff0 	bl	8001fc8 <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	d005      	beq.n	8002002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_Delay+0x44>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	189b      	adds	r3, r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	f7ff ffe0 	bl	8001fc8 <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d8f7      	bhi.n	8002004 <HAL_Delay+0x28>
  {
  }
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b004      	add	sp, #16
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	20000008 	.word	0x20000008

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	0002      	movs	r2, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b7f      	cmp	r3, #127	; 0x7f
 8002038:	d828      	bhi.n	800208c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800203a:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <__NVIC_SetPriority+0xd4>)
 800203c:	1dfb      	adds	r3, r7, #7
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b25b      	sxtb	r3, r3
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	33c0      	adds	r3, #192	; 0xc0
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	589b      	ldr	r3, [r3, r2]
 800204a:	1dfa      	adds	r2, r7, #7
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	0011      	movs	r1, r2
 8002050:	2203      	movs	r2, #3
 8002052:	400a      	ands	r2, r1
 8002054:	00d2      	lsls	r2, r2, #3
 8002056:	21ff      	movs	r1, #255	; 0xff
 8002058:	4091      	lsls	r1, r2
 800205a:	000a      	movs	r2, r1
 800205c:	43d2      	mvns	r2, r2
 800205e:	401a      	ands	r2, r3
 8002060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	22ff      	movs	r2, #255	; 0xff
 8002068:	401a      	ands	r2, r3
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	0018      	movs	r0, r3
 8002070:	2303      	movs	r3, #3
 8002072:	4003      	ands	r3, r0
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002078:	481f      	ldr	r0, [pc, #124]	; (80020f8 <__NVIC_SetPriority+0xd4>)
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b25b      	sxtb	r3, r3
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	430a      	orrs	r2, r1
 8002084:	33c0      	adds	r3, #192	; 0xc0
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800208a:	e031      	b.n	80020f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800208c:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <__NVIC_SetPriority+0xd8>)
 800208e:	1dfb      	adds	r3, r7, #7
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	0019      	movs	r1, r3
 8002094:	230f      	movs	r3, #15
 8002096:	400b      	ands	r3, r1
 8002098:	3b08      	subs	r3, #8
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3306      	adds	r3, #6
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	18d3      	adds	r3, r2, r3
 80020a2:	3304      	adds	r3, #4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	1dfa      	adds	r2, r7, #7
 80020a8:	7812      	ldrb	r2, [r2, #0]
 80020aa:	0011      	movs	r1, r2
 80020ac:	2203      	movs	r2, #3
 80020ae:	400a      	ands	r2, r1
 80020b0:	00d2      	lsls	r2, r2, #3
 80020b2:	21ff      	movs	r1, #255	; 0xff
 80020b4:	4091      	lsls	r1, r2
 80020b6:	000a      	movs	r2, r1
 80020b8:	43d2      	mvns	r2, r2
 80020ba:	401a      	ands	r2, r3
 80020bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	019b      	lsls	r3, r3, #6
 80020c2:	22ff      	movs	r2, #255	; 0xff
 80020c4:	401a      	ands	r2, r3
 80020c6:	1dfb      	adds	r3, r7, #7
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	0018      	movs	r0, r3
 80020cc:	2303      	movs	r3, #3
 80020ce:	4003      	ands	r3, r0
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d4:	4809      	ldr	r0, [pc, #36]	; (80020fc <__NVIC_SetPriority+0xd8>)
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	001c      	movs	r4, r3
 80020dc:	230f      	movs	r3, #15
 80020de:	4023      	ands	r3, r4
 80020e0:	3b08      	subs	r3, #8
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	430a      	orrs	r2, r1
 80020e6:	3306      	adds	r3, #6
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	18c3      	adds	r3, r0, r3
 80020ec:	3304      	adds	r3, #4
 80020ee:	601a      	str	r2, [r3, #0]
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b003      	add	sp, #12
 80020f6:	bd90      	pop	{r4, r7, pc}
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	1e5a      	subs	r2, r3, #1
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	045b      	lsls	r3, r3, #17
 8002110:	429a      	cmp	r2, r3
 8002112:	d301      	bcc.n	8002118 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002114:	2301      	movs	r3, #1
 8002116:	e010      	b.n	800213a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <SysTick_Config+0x44>)
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	3a01      	subs	r2, #1
 800211e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002120:	2301      	movs	r3, #1
 8002122:	425b      	negs	r3, r3
 8002124:	2103      	movs	r1, #3
 8002126:	0018      	movs	r0, r3
 8002128:	f7ff ff7c 	bl	8002024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SysTick_Config+0x44>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SysTick_Config+0x44>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	210f      	movs	r1, #15
 8002154:	187b      	adds	r3, r7, r1
 8002156:	1c02      	adds	r2, r0, #0
 8002158:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	187b      	adds	r3, r7, r1
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b25b      	sxtb	r3, r3
 8002162:	0011      	movs	r1, r2
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff ff5d 	bl	8002024 <__NVIC_SetPriority>
}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff ffbf 	bl	8002100 <SysTick_Config>
 8002182:	0003      	movs	r3, r0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219a:	e147      	b.n	800242c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4091      	lsls	r1, r2
 80021a6:	000a      	movs	r2, r1
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d100      	bne.n	80021b4 <HAL_GPIO_Init+0x28>
 80021b2:	e138      	b.n	8002426 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d005      	beq.n	80021cc <HAL_GPIO_Init+0x40>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2203      	movs	r2, #3
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d130      	bne.n	800222e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	409a      	lsls	r2, r3
 80021da:	0013      	movs	r3, r2
 80021dc:	43da      	mvns	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	409a      	lsls	r2, r3
 80021ee:	0013      	movs	r3, r2
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002202:	2201      	movs	r2, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
 8002208:	0013      	movs	r3, r2
 800220a:	43da      	mvns	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	2201      	movs	r2, #1
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	409a      	lsls	r2, r3
 8002220:	0013      	movs	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	4013      	ands	r3, r2
 8002236:	2b03      	cmp	r3, #3
 8002238:	d017      	beq.n	800226a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	409a      	lsls	r2, r3
 8002248:	0013      	movs	r3, r2
 800224a:	43da      	mvns	r2, r3
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2203      	movs	r2, #3
 8002270:	4013      	ands	r3, r2
 8002272:	2b02      	cmp	r3, #2
 8002274:	d123      	bne.n	80022be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	58d3      	ldr	r3, [r2, r3]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2207      	movs	r2, #7
 8002288:	4013      	ands	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2107      	movs	r1, #7
 80022a2:	400b      	ands	r3, r1
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	6939      	ldr	r1, [r7, #16]
 80022bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	43da      	mvns	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2203      	movs	r2, #3
 80022dc:	401a      	ands	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	409a      	lsls	r2, r3
 80022e4:	0013      	movs	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	23c0      	movs	r3, #192	; 0xc0
 80022f8:	029b      	lsls	r3, r3, #10
 80022fa:	4013      	ands	r3, r2
 80022fc:	d100      	bne.n	8002300 <HAL_GPIO_Init+0x174>
 80022fe:	e092      	b.n	8002426 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002300:	4a50      	ldr	r2, [pc, #320]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3318      	adds	r3, #24
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	589b      	ldr	r3, [r3, r2]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2203      	movs	r2, #3
 8002312:	4013      	ands	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	220f      	movs	r2, #15
 8002318:	409a      	lsls	r2, r3
 800231a:	0013      	movs	r3, r2
 800231c:	43da      	mvns	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	23a0      	movs	r3, #160	; 0xa0
 8002328:	05db      	lsls	r3, r3, #23
 800232a:	429a      	cmp	r2, r3
 800232c:	d013      	beq.n	8002356 <HAL_GPIO_Init+0x1ca>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a45      	ldr	r2, [pc, #276]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00d      	beq.n	8002352 <HAL_GPIO_Init+0x1c6>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a44      	ldr	r2, [pc, #272]	; (800244c <HAL_GPIO_Init+0x2c0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <HAL_GPIO_Init+0x1c2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a43      	ldr	r2, [pc, #268]	; (8002450 <HAL_GPIO_Init+0x2c4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_GPIO_Init+0x1be>
 8002346:	2303      	movs	r3, #3
 8002348:	e006      	b.n	8002358 <HAL_GPIO_Init+0x1cc>
 800234a:	2305      	movs	r3, #5
 800234c:	e004      	b.n	8002358 <HAL_GPIO_Init+0x1cc>
 800234e:	2302      	movs	r3, #2
 8002350:	e002      	b.n	8002358 <HAL_GPIO_Init+0x1cc>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_GPIO_Init+0x1cc>
 8002356:	2300      	movs	r3, #0
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	2103      	movs	r1, #3
 800235c:	400a      	ands	r2, r1
 800235e:	00d2      	lsls	r2, r2, #3
 8002360:	4093      	lsls	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002368:	4936      	ldr	r1, [pc, #216]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3318      	adds	r3, #24
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002376:	4b33      	ldr	r3, [pc, #204]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	43da      	mvns	r2, r3
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	035b      	lsls	r3, r3, #13
 800238e:	4013      	ands	r3, r2
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80023a0:	4b28      	ldr	r3, [pc, #160]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	43da      	mvns	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	039b      	lsls	r3, r3, #14
 80023b8:	4013      	ands	r3, r2
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023ca:	4a1e      	ldr	r2, [pc, #120]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 80023cc:	2384      	movs	r3, #132	; 0x84
 80023ce:	58d3      	ldr	r3, [r2, r3]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43da      	mvns	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	4013      	ands	r3, r2
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023f0:	4914      	ldr	r1, [pc, #80]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 80023f2:	2284      	movs	r2, #132	; 0x84
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	58d3      	ldr	r3, [r2, r3]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	43da      	mvns	r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	025b      	lsls	r3, r3, #9
 8002412:	4013      	ands	r3, r2
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800241e:	4909      	ldr	r1, [pc, #36]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 8002420:	2280      	movs	r2, #128	; 0x80
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	40da      	lsrs	r2, r3
 8002434:	1e13      	subs	r3, r2, #0
 8002436:	d000      	beq.n	800243a <HAL_GPIO_Init+0x2ae>
 8002438:	e6b0      	b.n	800219c <HAL_GPIO_Init+0x10>
  }
}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b006      	add	sp, #24
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021800 	.word	0x40021800
 8002448:	50000400 	.word	0x50000400
 800244c:	50000800 	.word	0x50000800
 8002450:	50000c00 	.word	0x50000c00

08002454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	0008      	movs	r0, r1
 800245e:	0011      	movs	r1, r2
 8002460:	1cbb      	adds	r3, r7, #2
 8002462:	1c02      	adds	r2, r0, #0
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	1c7b      	adds	r3, r7, #1
 8002468:	1c0a      	adds	r2, r1, #0
 800246a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800246c:	1c7b      	adds	r3, r7, #1
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002474:	1cbb      	adds	r3, r7, #2
 8002476:	881a      	ldrh	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800247e:	1cbb      	adds	r3, r7, #2
 8002480:	881a      	ldrh	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b002      	add	sp, #8
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0a8      	b.n	80025f4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	2382      	movs	r3, #130	; 0x82
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d009      	beq.n	80024ca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	61da      	str	r2, [r3, #28]
 80024bc:	e005      	b.n	80024ca <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	225d      	movs	r2, #93	; 0x5d
 80024d4:	5c9b      	ldrb	r3, [r3, r2]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	225c      	movs	r2, #92	; 0x5c
 80024e0:	2100      	movs	r1, #0
 80024e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7ff fc2a 	bl	8001d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	225d      	movs	r2, #93	; 0x5d
 80024f0:	2102      	movs	r1, #2
 80024f2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2140      	movs	r1, #64	; 0x40
 8002500:	438a      	bics	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	23e0      	movs	r3, #224	; 0xe0
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	429a      	cmp	r2, r3
 800250e:	d902      	bls.n	8002516 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e002      	b.n	800251c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	015b      	lsls	r3, r3, #5
 800251a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	23f0      	movs	r3, #240	; 0xf0
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	429a      	cmp	r2, r3
 8002526:	d008      	beq.n	800253a <HAL_SPI_Init+0xaa>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	23e0      	movs	r3, #224	; 0xe0
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	429a      	cmp	r2, r3
 8002532:	d002      	beq.n	800253a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	2382      	movs	r3, #130	; 0x82
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	401a      	ands	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6899      	ldr	r1, [r3, #8]
 8002548:	2384      	movs	r3, #132	; 0x84
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	400b      	ands	r3, r1
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2102      	movs	r1, #2
 8002556:	400b      	ands	r3, r1
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2101      	movs	r1, #1
 8002560:	400b      	ands	r3, r1
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6999      	ldr	r1, [r3, #24]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	400b      	ands	r3, r1
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2138      	movs	r1, #56	; 0x38
 8002576:	400b      	ands	r3, r1
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	400b      	ands	r3, r1
 8002582:	431a      	orrs	r2, r3
 8002584:	0011      	movs	r1, r2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	019b      	lsls	r3, r3, #6
 800258e:	401a      	ands	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	2204      	movs	r2, #4
 80025a0:	401a      	ands	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2110      	movs	r1, #16
 80025a8:	400b      	ands	r3, r1
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b0:	2108      	movs	r1, #8
 80025b2:	400b      	ands	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68d9      	ldr	r1, [r3, #12]
 80025ba:	23f0      	movs	r3, #240	; 0xf0
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	400b      	ands	r3, r1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	0011      	movs	r1, r2
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	015b      	lsls	r3, r3, #5
 80025ca:	401a      	ands	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4907      	ldr	r1, [pc, #28]	; (80025fc <HAL_SPI_Init+0x16c>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	225d      	movs	r2, #93	; 0x5d
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b004      	add	sp, #16
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	fffff7ff 	.word	0xfffff7ff

08002600 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	1dbb      	adds	r3, r7, #6
 800260e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002610:	231f      	movs	r3, #31
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	225c      	movs	r2, #92	; 0x5c
 800261c:	5c9b      	ldrb	r3, [r3, r2]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_SPI_Transmit+0x26>
 8002622:	2302      	movs	r3, #2
 8002624:	e147      	b.n	80028b6 <HAL_SPI_Transmit+0x2b6>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	225c      	movs	r2, #92	; 0x5c
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800262e:	f7ff fccb 	bl	8001fc8 <HAL_GetTick>
 8002632:	0003      	movs	r3, r0
 8002634:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002636:	2316      	movs	r3, #22
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	1dba      	adds	r2, r7, #6
 800263c:	8812      	ldrh	r2, [r2, #0]
 800263e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	225d      	movs	r2, #93	; 0x5d
 8002644:	5c9b      	ldrb	r3, [r3, r2]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d004      	beq.n	8002656 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800264c:	231f      	movs	r3, #31
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2202      	movs	r2, #2
 8002652:	701a      	strb	r2, [r3, #0]
    goto error;
 8002654:	e128      	b.n	80028a8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_SPI_Transmit+0x64>
 800265c:	1dbb      	adds	r3, r7, #6
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002664:	231f      	movs	r3, #31
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
    goto error;
 800266c:	e11c      	b.n	80028a8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	225d      	movs	r2, #93	; 0x5d
 8002672:	2103      	movs	r1, #3
 8002674:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1dba      	adds	r2, r7, #6
 8002686:	8812      	ldrh	r2, [r2, #0]
 8002688:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1dba      	adds	r2, r7, #6
 800268e:	8812      	ldrh	r2, [r2, #0]
 8002690:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2244      	movs	r2, #68	; 0x44
 800269c:	2100      	movs	r1, #0
 800269e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2246      	movs	r2, #70	; 0x46
 80026a4:	2100      	movs	r1, #0
 80026a6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	429a      	cmp	r2, r3
 80026be:	d110      	bne.n	80026e2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2140      	movs	r1, #64	; 0x40
 80026cc:	438a      	bics	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	01c9      	lsls	r1, r1, #7
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b40      	cmp	r3, #64	; 0x40
 80026ee:	d007      	beq.n	8002700 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2140      	movs	r1, #64	; 0x40
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	23e0      	movs	r3, #224	; 0xe0
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	429a      	cmp	r2, r3
 800270a:	d952      	bls.n	80027b2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_SPI_Transmit+0x11e>
 8002714:	2316      	movs	r3, #22
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d143      	bne.n	80027a6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	881a      	ldrh	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	1c9a      	adds	r2, r3, #2
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002742:	e030      	b.n	80027a6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2202      	movs	r2, #2
 800274c:	4013      	ands	r3, r2
 800274e:	2b02      	cmp	r3, #2
 8002750:	d112      	bne.n	8002778 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	1c9a      	adds	r2, r3, #2
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002776:	e016      	b.n	80027a6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002778:	f7ff fc26 	bl	8001fc8 <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d802      	bhi.n	800278e <HAL_SPI_Transmit+0x18e>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_SPI_Transmit+0x194>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d108      	bne.n	80027a6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002794:	231f      	movs	r3, #31
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2203      	movs	r2, #3
 800279a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	225d      	movs	r2, #93	; 0x5d
 80027a0:	2101      	movs	r1, #1
 80027a2:	5499      	strb	r1, [r3, r2]
          goto error;
 80027a4:	e080      	b.n	80028a8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1c9      	bne.n	8002744 <HAL_SPI_Transmit+0x144>
 80027b0:	e053      	b.n	800285a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d004      	beq.n	80027c4 <HAL_SPI_Transmit+0x1c4>
 80027ba:	2316      	movs	r3, #22
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d145      	bne.n	8002850 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	330c      	adds	r3, #12
 80027ce:	7812      	ldrb	r2, [r2, #0]
 80027d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80027ea:	e031      	b.n	8002850 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2202      	movs	r2, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d113      	bne.n	8002822 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002820:	e016      	b.n	8002850 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002822:	f7ff fbd1 	bl	8001fc8 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d802      	bhi.n	8002838 <HAL_SPI_Transmit+0x238>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	d102      	bne.n	800283e <HAL_SPI_Transmit+0x23e>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800283e:	231f      	movs	r3, #31
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	2203      	movs	r2, #3
 8002844:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	225d      	movs	r2, #93	; 0x5d
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]
          goto error;
 800284e:	e02b      	b.n	80028a8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1c8      	bne.n	80027ec <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	0018      	movs	r0, r3
 8002862:	f000 fcfb 	bl	800325c <SPI_EndRxTxTransaction>
 8002866:	1e03      	subs	r3, r0, #0
 8002868:	d002      	beq.n	8002870 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002896:	231f      	movs	r3, #31
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e003      	b.n	80028a8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	225d      	movs	r2, #93	; 0x5d
 80028a4:	2101      	movs	r1, #1
 80028a6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	225c      	movs	r2, #92	; 0x5c
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80028b0:	231f      	movs	r3, #31
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	781b      	ldrb	r3, [r3, #0]
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b008      	add	sp, #32
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b089      	sub	sp, #36	; 0x24
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	1dbb      	adds	r3, r7, #6
 80028ce:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028d0:	2117      	movs	r1, #23
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	225d      	movs	r2, #93	; 0x5d
 80028dc:	5c9b      	ldrb	r3, [r3, r2]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d003      	beq.n	80028ec <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	2202      	movs	r2, #2
 80028e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80028ea:	e12b      	b.n	8002b44 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	2382      	movs	r3, #130	; 0x82
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d113      	bne.n	8002920 <HAL_SPI_Receive+0x60>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10f      	bne.n	8002920 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	225d      	movs	r2, #93	; 0x5d
 8002904:	2104      	movs	r1, #4
 8002906:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002908:	1dbb      	adds	r3, r7, #6
 800290a:	881c      	ldrh	r4, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	0023      	movs	r3, r4
 8002918:	f000 f924 	bl	8002b64 <HAL_SPI_TransmitReceive>
 800291c:	0003      	movs	r3, r0
 800291e:	e118      	b.n	8002b52 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	225c      	movs	r2, #92	; 0x5c
 8002924:	5c9b      	ldrb	r3, [r3, r2]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_SPI_Receive+0x6e>
 800292a:	2302      	movs	r3, #2
 800292c:	e111      	b.n	8002b52 <HAL_SPI_Receive+0x292>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	225c      	movs	r2, #92	; 0x5c
 8002932:	2101      	movs	r1, #1
 8002934:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002936:	f7ff fb47 	bl	8001fc8 <HAL_GetTick>
 800293a:	0003      	movs	r3, r0
 800293c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_SPI_Receive+0x8c>
 8002944:	1dbb      	adds	r3, r7, #6
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 800294c:	2317      	movs	r3, #23
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
    goto error;
 8002954:	e0f6      	b.n	8002b44 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	225d      	movs	r2, #93	; 0x5d
 800295a:	2104      	movs	r1, #4
 800295c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1dba      	adds	r2, r7, #6
 800296e:	2144      	movs	r1, #68	; 0x44
 8002970:	8812      	ldrh	r2, [r2, #0]
 8002972:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1dba      	adds	r2, r7, #6
 8002978:	2146      	movs	r1, #70	; 0x46
 800297a:	8812      	ldrh	r2, [r2, #0]
 800297c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	23e0      	movs	r3, #224	; 0xe0
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d908      	bls.n	80029ba <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	496a      	ldr	r1, [pc, #424]	; (8002b5c <HAL_SPI_Receive+0x29c>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	e008      	b.n	80029cc <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	0149      	lsls	r1, r1, #5
 80029c8:	430a      	orrs	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d10f      	bne.n	80029f8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2140      	movs	r1, #64	; 0x40
 80029e4:	438a      	bics	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	495b      	ldr	r1, [pc, #364]	; (8002b60 <HAL_SPI_Receive+0x2a0>)
 80029f4:	400a      	ands	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2240      	movs	r2, #64	; 0x40
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b40      	cmp	r3, #64	; 0x40
 8002a04:	d007      	beq.n	8002a16 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2140      	movs	r1, #64	; 0x40
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	23e0      	movs	r3, #224	; 0xe0
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d900      	bls.n	8002a24 <HAL_SPI_Receive+0x164>
 8002a22:	e071      	b.n	8002b08 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a24:	e035      	b.n	8002a92 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d117      	bne.n	8002a64 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2246      	movs	r2, #70	; 0x46
 8002a54:	5a9b      	ldrh	r3, [r3, r2]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b299      	uxth	r1, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2246      	movs	r2, #70	; 0x46
 8002a60:	5299      	strh	r1, [r3, r2]
 8002a62:	e016      	b.n	8002a92 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a64:	f7ff fab0 	bl	8001fc8 <HAL_GetTick>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d802      	bhi.n	8002a7a <HAL_SPI_Receive+0x1ba>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	d102      	bne.n	8002a80 <HAL_SPI_Receive+0x1c0>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d108      	bne.n	8002a92 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002a80:	2317      	movs	r3, #23
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2203      	movs	r2, #3
 8002a86:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	225d      	movs	r2, #93	; 0x5d
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a90:	e058      	b.n	8002b44 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2246      	movs	r2, #70	; 0x46
 8002a96:	5a9b      	ldrh	r3, [r3, r2]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1c3      	bne.n	8002a26 <HAL_SPI_Receive+0x166>
 8002a9e:	e039      	b.n	8002b14 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d115      	bne.n	8002ada <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	1c9a      	adds	r2, r3, #2
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2246      	movs	r2, #70	; 0x46
 8002aca:	5a9b      	ldrh	r3, [r3, r2]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b299      	uxth	r1, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2246      	movs	r2, #70	; 0x46
 8002ad6:	5299      	strh	r1, [r3, r2]
 8002ad8:	e016      	b.n	8002b08 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ada:	f7ff fa75 	bl	8001fc8 <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d802      	bhi.n	8002af0 <HAL_SPI_Receive+0x230>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	3301      	adds	r3, #1
 8002aee:	d102      	bne.n	8002af6 <HAL_SPI_Receive+0x236>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002af6:	2317      	movs	r3, #23
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	2203      	movs	r2, #3
 8002afc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	225d      	movs	r2, #93	; 0x5d
 8002b02:	2101      	movs	r1, #1
 8002b04:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b06:	e01d      	b.n	8002b44 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2246      	movs	r2, #70	; 0x46
 8002b0c:	5a9b      	ldrh	r3, [r3, r2]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1c5      	bne.n	8002aa0 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	6839      	ldr	r1, [r7, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 fb40 	bl	80031a0 <SPI_EndRxTransaction>
 8002b20:	1e03      	subs	r3, r0, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002b32:	2317      	movs	r3, #23
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e003      	b.n	8002b44 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	225d      	movs	r2, #93	; 0x5d
 8002b40:	2101      	movs	r1, #1
 8002b42:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	225c      	movs	r2, #92	; 0x5c
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b4c:	2317      	movs	r3, #23
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b007      	add	sp, #28
 8002b58:	bd90      	pop	{r4, r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	ffffefff 	.word	0xffffefff
 8002b60:	ffffbfff 	.word	0xffffbfff

08002b64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	001a      	movs	r2, r3
 8002b72:	1cbb      	adds	r3, r7, #2
 8002b74:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b76:	2301      	movs	r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b7a:	2323      	movs	r3, #35	; 0x23
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	225c      	movs	r2, #92	; 0x5c
 8002b86:	5c9b      	ldrb	r3, [r3, r2]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x2c>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e1c4      	b.n	8002f1a <HAL_SPI_TransmitReceive+0x3b6>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	225c      	movs	r2, #92	; 0x5c
 8002b94:	2101      	movs	r1, #1
 8002b96:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b98:	f7ff fa16 	bl	8001fc8 <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ba0:	201b      	movs	r0, #27
 8002ba2:	183b      	adds	r3, r7, r0
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	215d      	movs	r1, #93	; 0x5d
 8002ba8:	5c52      	ldrb	r2, [r2, r1]
 8002baa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002bb2:	2312      	movs	r3, #18
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	1cba      	adds	r2, r7, #2
 8002bb8:	8812      	ldrh	r2, [r2, #0]
 8002bba:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bbc:	183b      	adds	r3, r7, r0
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d011      	beq.n	8002be8 <HAL_SPI_TransmitReceive+0x84>
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	2382      	movs	r3, #130	; 0x82
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d107      	bne.n	8002bde <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d103      	bne.n	8002bde <HAL_SPI_TransmitReceive+0x7a>
 8002bd6:	183b      	adds	r3, r7, r0
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d004      	beq.n	8002be8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002bde:	2323      	movs	r3, #35	; 0x23
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2202      	movs	r2, #2
 8002be4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002be6:	e191      	b.n	8002f0c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0x98>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0x98>
 8002bf4:	1cbb      	adds	r3, r7, #2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002bfc:	2323      	movs	r3, #35	; 0x23
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c04:	e182      	b.n	8002f0c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	225d      	movs	r2, #93	; 0x5d
 8002c0a:	5c9b      	ldrb	r3, [r3, r2]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d003      	beq.n	8002c1a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	225d      	movs	r2, #93	; 0x5d
 8002c16:	2105      	movs	r1, #5
 8002c18:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1cba      	adds	r2, r7, #2
 8002c2a:	2146      	movs	r1, #70	; 0x46
 8002c2c:	8812      	ldrh	r2, [r2, #0]
 8002c2e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1cba      	adds	r2, r7, #2
 8002c34:	2144      	movs	r1, #68	; 0x44
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1cba      	adds	r2, r7, #2
 8002c44:	8812      	ldrh	r2, [r2, #0]
 8002c46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1cba      	adds	r2, r7, #2
 8002c4c:	8812      	ldrh	r2, [r2, #0]
 8002c4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	23e0      	movs	r3, #224	; 0xe0
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d908      	bls.n	8002c7a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	49ac      	ldr	r1, [pc, #688]	; (8002f24 <HAL_SPI_TransmitReceive+0x3c0>)
 8002c74:	400a      	ands	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	e008      	b.n	8002c8c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	0149      	lsls	r1, r1, #5
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2240      	movs	r2, #64	; 0x40
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d007      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	23e0      	movs	r3, #224	; 0xe0
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d800      	bhi.n	8002cb8 <HAL_SPI_TransmitReceive+0x154>
 8002cb6:	e083      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_SPI_TransmitReceive+0x168>
 8002cc0:	2312      	movs	r3, #18
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d000      	beq.n	8002ccc <HAL_SPI_TransmitReceive+0x168>
 8002cca:	e06d      	b.n	8002da8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	1c9a      	adds	r2, r3, #2
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf0:	e05a      	b.n	8002da8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d11b      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x1d4>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x1d4>
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d113      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	881a      	ldrh	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	1c9a      	adds	r2, r3, #2
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d11c      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x21c>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2246      	movs	r2, #70	; 0x46
 8002d4a:	5a9b      	ldrh	r3, [r3, r2]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	b292      	uxth	r2, r2
 8002d5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	1c9a      	adds	r2, r3, #2
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2246      	movs	r2, #70	; 0x46
 8002d6e:	5a9b      	ldrh	r3, [r3, r2]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b299      	uxth	r1, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2246      	movs	r2, #70	; 0x46
 8002d7a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d80:	f7ff f922 	bl	8001fc8 <HAL_GetTick>
 8002d84:	0002      	movs	r2, r0
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d80b      	bhi.n	8002da8 <HAL_SPI_TransmitReceive+0x244>
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	3301      	adds	r3, #1
 8002d94:	d008      	beq.n	8002da8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002d96:	2323      	movs	r3, #35	; 0x23
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	225d      	movs	r2, #93	; 0x5d
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]
        goto error;
 8002da6:	e0b1      	b.n	8002f0c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d19f      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x18e>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2246      	movs	r2, #70	; 0x46
 8002db6:	5a9b      	ldrh	r3, [r3, r2]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d199      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x18e>
 8002dbe:	e089      	b.n	8002ed4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_SPI_TransmitReceive+0x270>
 8002dc8:	2312      	movs	r3, #18
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d000      	beq.n	8002dd4 <HAL_SPI_TransmitReceive+0x270>
 8002dd2:	e074      	b.n	8002ebe <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dfa:	e060      	b.n	8002ebe <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2202      	movs	r2, #2
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d11c      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x2e0>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d017      	beq.n	8002e44 <HAL_SPI_TransmitReceive+0x2e0>
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d114      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	330c      	adds	r3, #12
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d11e      	bne.n	8002e90 <HAL_SPI_TransmitReceive+0x32c>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2246      	movs	r2, #70	; 0x46
 8002e56:	5a9b      	ldrh	r3, [r3, r2]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d018      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	001a      	movs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2246      	movs	r2, #70	; 0x46
 8002e7e:	5a9b      	ldrh	r3, [r3, r2]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b299      	uxth	r1, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2246      	movs	r2, #70	; 0x46
 8002e8a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e90:	f7ff f89a 	bl	8001fc8 <HAL_GetTick>
 8002e94:	0002      	movs	r2, r0
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d802      	bhi.n	8002ea6 <HAL_SPI_TransmitReceive+0x342>
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x348>
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d108      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002eac:	2323      	movs	r3, #35	; 0x23
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	225d      	movs	r2, #93	; 0x5d
 8002eb8:	2101      	movs	r1, #1
 8002eba:	5499      	strb	r1, [r3, r2]
        goto error;
 8002ebc:	e026      	b.n	8002f0c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d199      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x298>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2246      	movs	r2, #70	; 0x46
 8002ecc:	5a9b      	ldrh	r3, [r3, r2]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d193      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f9be 	bl	800325c <SPI_EndRxTxTransaction>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d006      	beq.n	8002ef2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002ee4:	2323      	movs	r3, #35	; 0x23
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002efa:	2323      	movs	r3, #35	; 0x23
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	e003      	b.n	8002f0c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	225d      	movs	r2, #93	; 0x5d
 8002f08:	2101      	movs	r1, #1
 8002f0a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	225c      	movs	r2, #92	; 0x5c
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f14:	2323      	movs	r3, #35	; 0x23
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	781b      	ldrb	r3, [r3, #0]
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b00a      	add	sp, #40	; 0x28
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	ffffefff 	.word	0xffffefff

08002f28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	225d      	movs	r2, #93	; 0x5d
 8002f34:	5c9b      	ldrb	r3, [r3, r2]
 8002f36:	b2db      	uxtb	r3, r3
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f50:	f7ff f83a 	bl	8001fc8 <HAL_GetTick>
 8002f54:	0002      	movs	r2, r0
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	18d3      	adds	r3, r2, r3
 8002f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f60:	f7ff f832 	bl	8001fc8 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f68:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	015b      	lsls	r3, r3, #5
 8002f6e:	0d1b      	lsrs	r3, r3, #20
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	4353      	muls	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f76:	e058      	b.n	800302a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	d055      	beq.n	800302a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f7e:	f7ff f823 	bl	8001fc8 <HAL_GetTick>
 8002f82:	0002      	movs	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d902      	bls.n	8002f94 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d142      	bne.n	800301a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	21e0      	movs	r1, #224	; 0xe0
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	2382      	movs	r3, #130	; 0x82
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d113      	bne.n	8002fd8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d005      	beq.n	8002fc8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d107      	bne.n	8002fd8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2140      	movs	r1, #64	; 0x40
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	019b      	lsls	r3, r3, #6
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d110      	bne.n	8003006 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	491a      	ldr	r1, [pc, #104]	; (8003058 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2180      	movs	r1, #128	; 0x80
 8003000:	0189      	lsls	r1, r1, #6
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	225d      	movs	r2, #93	; 0x5d
 800300a:	2101      	movs	r1, #1
 800300c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	225c      	movs	r2, #92	; 0x5c
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e017      	b.n	800304a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3b01      	subs	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	425a      	negs	r2, r3
 800303a:	4153      	adcs	r3, r2
 800303c:	b2db      	uxtb	r3, r3
 800303e:	001a      	movs	r2, r3
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d197      	bne.n	8002f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b008      	add	sp, #32
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	20000000 	.word	0x20000000
 8003058:	ffffdfff 	.word	0xffffdfff

0800305c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800306a:	2317      	movs	r3, #23
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003072:	f7fe ffa9 	bl	8001fc8 <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	18d3      	adds	r3, r2, r3
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003082:	f7fe ffa1 	bl	8001fc8 <HAL_GetTick>
 8003086:	0003      	movs	r3, r0
 8003088:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	0013      	movs	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	189b      	adds	r3, r3, r2
 800309c:	00da      	lsls	r2, r3, #3
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	0d1b      	lsrs	r3, r3, #20
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	4353      	muls	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030a8:	e068      	b.n	800317c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	23c0      	movs	r3, #192	; 0xc0
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d10a      	bne.n	80030ca <SPI_WaitFifoStateUntilTimeout+0x6e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	2117      	movs	r1, #23
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80030c6:	187b      	adds	r3, r7, r1
 80030c8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	d055      	beq.n	800317c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030d0:	f7fe ff7a 	bl	8001fc8 <HAL_GetTick>
 80030d4:	0002      	movs	r2, r0
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	429a      	cmp	r2, r3
 80030de:	d902      	bls.n	80030e6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d142      	bne.n	800316c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	21e0      	movs	r1, #224	; 0xe0
 80030f2:	438a      	bics	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	2382      	movs	r3, #130	; 0x82
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	429a      	cmp	r2, r3
 8003100:	d113      	bne.n	800312a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	429a      	cmp	r2, r3
 800310c:	d005      	beq.n	800311a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	429a      	cmp	r2, r3
 8003118:	d107      	bne.n	800312a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	438a      	bics	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	019b      	lsls	r3, r3, #6
 8003132:	429a      	cmp	r2, r3
 8003134:	d110      	bne.n	8003158 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4916      	ldr	r1, [pc, #88]	; (800319c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003142:	400a      	ands	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	0189      	lsls	r1, r1, #6
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	225d      	movs	r2, #93	; 0x5d
 800315c:	2101      	movs	r1, #1
 800315e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	225c      	movs	r2, #92	; 0x5c
 8003164:	2100      	movs	r1, #0
 8003166:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e010      	b.n	800318e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	3b01      	subs	r3, #1
 800317a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	d18e      	bne.n	80030aa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b00a      	add	sp, #40	; 0x28
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	20000000 	.word	0x20000000
 800319c:	ffffdfff 	.word	0xffffdfff

080031a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	2382      	movs	r3, #130	; 0x82
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d113      	bne.n	80031e0 <SPI_EndRxTransaction+0x40>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d005      	beq.n	80031d0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d107      	bne.n	80031e0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	438a      	bics	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	0013      	movs	r3, r2
 80031ea:	2200      	movs	r2, #0
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	f7ff fea7 	bl	8002f40 <SPI_WaitFlagStateUntilTimeout>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d007      	beq.n	8003206 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fa:	2220      	movs	r2, #32
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e026      	b.n	8003254 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	2382      	movs	r3, #130	; 0x82
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	429a      	cmp	r2, r3
 8003210:	d11f      	bne.n	8003252 <SPI_EndRxTransaction+0xb2>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	429a      	cmp	r2, r3
 800321c:	d005      	beq.n	800322a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	429a      	cmp	r2, r3
 8003228:	d113      	bne.n	8003252 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	23c0      	movs	r3, #192	; 0xc0
 800322e:	00d9      	lsls	r1, r3, #3
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	0013      	movs	r3, r2
 8003238:	2200      	movs	r2, #0
 800323a:	f7ff ff0f 	bl	800305c <SPI_WaitFifoStateUntilTimeout>
 800323e:	1e03      	subs	r3, r0, #0
 8003240:	d007      	beq.n	8003252 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003246:	2220      	movs	r2, #32
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e000      	b.n	8003254 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	0018      	movs	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	b004      	add	sp, #16
 800325a:	bd80      	pop	{r7, pc}

0800325c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	23c0      	movs	r3, #192	; 0xc0
 800326c:	0159      	lsls	r1, r3, #5
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	0013      	movs	r3, r2
 8003276:	2200      	movs	r2, #0
 8003278:	f7ff fef0 	bl	800305c <SPI_WaitFifoStateUntilTimeout>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d007      	beq.n	8003290 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003284:	2220      	movs	r2, #32
 8003286:	431a      	orrs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e027      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	0013      	movs	r3, r2
 800329a:	2200      	movs	r2, #0
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	f7ff fe4f 	bl	8002f40 <SPI_WaitFlagStateUntilTimeout>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d007      	beq.n	80032b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	2220      	movs	r2, #32
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e014      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	23c0      	movs	r3, #192	; 0xc0
 80032ba:	00d9      	lsls	r1, r3, #3
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	0013      	movs	r3, r2
 80032c4:	2200      	movs	r2, #0
 80032c6:	f7ff fec9 	bl	800305c <SPI_WaitFifoStateUntilTimeout>
 80032ca:	1e03      	subs	r3, r0, #0
 80032cc:	d007      	beq.n	80032de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	2220      	movs	r2, #32
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e000      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b004      	add	sp, #16
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <LL_EXTI_EnableIT_0_31>:
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80032f0:	4a05      	ldr	r2, [pc, #20]	; (8003308 <LL_EXTI_EnableIT_0_31+0x20>)
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	58d2      	ldr	r2, [r2, r3]
 80032f6:	4904      	ldr	r1, [pc, #16]	; (8003308 <LL_EXTI_EnableIT_0_31+0x20>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	508b      	str	r3, [r1, r2]
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021800 	.word	0x40021800

0800330c <LL_EXTI_DisableIT_0_31>:
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003314:	4a06      	ldr	r2, [pc, #24]	; (8003330 <LL_EXTI_DisableIT_0_31+0x24>)
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	58d3      	ldr	r3, [r2, r3]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	43d2      	mvns	r2, r2
 800331e:	4904      	ldr	r1, [pc, #16]	; (8003330 <LL_EXTI_DisableIT_0_31+0x24>)
 8003320:	4013      	ands	r3, r2
 8003322:	2280      	movs	r2, #128	; 0x80
 8003324:	508b      	str	r3, [r1, r2]
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b002      	add	sp, #8
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	40021800 	.word	0x40021800

08003334 <LL_EXTI_EnableEvent_0_31>:
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800333c:	4a05      	ldr	r2, [pc, #20]	; (8003354 <LL_EXTI_EnableEvent_0_31+0x20>)
 800333e:	2384      	movs	r3, #132	; 0x84
 8003340:	58d2      	ldr	r2, [r2, r3]
 8003342:	4904      	ldr	r1, [pc, #16]	; (8003354 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4313      	orrs	r3, r2
 8003348:	2284      	movs	r2, #132	; 0x84
 800334a:	508b      	str	r3, [r1, r2]
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021800 	.word	0x40021800

08003358 <LL_EXTI_DisableEvent_0_31>:
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003360:	4a06      	ldr	r2, [pc, #24]	; (800337c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003362:	2384      	movs	r3, #132	; 0x84
 8003364:	58d3      	ldr	r3, [r2, r3]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	43d2      	mvns	r2, r2
 800336a:	4904      	ldr	r1, [pc, #16]	; (800337c <LL_EXTI_DisableEvent_0_31+0x24>)
 800336c:	4013      	ands	r3, r2
 800336e:	2284      	movs	r2, #132	; 0x84
 8003370:	508b      	str	r3, [r1, r2]
}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	b002      	add	sp, #8
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	40021800 	.word	0x40021800

08003380 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b002      	add	sp, #8
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021800 	.word	0x40021800

080033a0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	43d9      	mvns	r1, r3
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80033b2:	400a      	ands	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b002      	add	sp, #8
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	40021800 	.word	0x40021800

080033c4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021800 	.word	0x40021800

080033e4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	40021800 	.word	0x40021800

08003408 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
#endif /* STM32G081xx || STM32G071xx || STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	791b      	ldrb	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d100      	bne.n	800341e <LL_EXTI_Init+0x16>
 800341c:	e066      	b.n	80034ec <LL_EXTI_Init+0xe4>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d100      	bne.n	8003428 <LL_EXTI_Init+0x20>
 8003426:	e06b      	b.n	8003500 <LL_EXTI_Init+0xf8>
    {
      switch (EXTI_InitStruct->Mode)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	795b      	ldrb	r3, [r3, #5]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d01b      	beq.n	8003468 <LL_EXTI_Init+0x60>
 8003430:	dc25      	bgt.n	800347e <LL_EXTI_Init+0x76>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <LL_EXTI_Init+0x34>
 8003436:	2b01      	cmp	r3, #1
 8003438:	d00b      	beq.n	8003452 <LL_EXTI_Init+0x4a>
 800343a:	e020      	b.n	800347e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff ff89 	bl	8003358 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0018      	movs	r0, r3
 800344c:	f7ff ff4c 	bl	80032e8 <LL_EXTI_EnableIT_0_31>
          break;
 8003450:	e018      	b.n	8003484 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff ff58 	bl	800330c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff ff67 	bl	8003334 <LL_EXTI_EnableEvent_0_31>
          break;
 8003466:	e00d      	b.n	8003484 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff ff3b 	bl	80032e8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	0018      	movs	r0, r3
 8003478:	f7ff ff5c 	bl	8003334 <LL_EXTI_EnableEvent_0_31>
          break;
 800347c:	e002      	b.n	8003484 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 800347e:	2301      	movs	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
          break;
 8003482:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	799b      	ldrb	r3, [r3, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d039      	beq.n	8003500 <LL_EXTI_Init+0xf8>
      {
        switch (EXTI_InitStruct->Trigger)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	799b      	ldrb	r3, [r3, #6]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d01b      	beq.n	80034cc <LL_EXTI_Init+0xc4>
 8003494:	dc25      	bgt.n	80034e2 <LL_EXTI_Init+0xda>
 8003496:	2b01      	cmp	r3, #1
 8003498:	d002      	beq.n	80034a0 <LL_EXTI_Init+0x98>
 800349a:	2b02      	cmp	r3, #2
 800349c:	d00b      	beq.n	80034b6 <LL_EXTI_Init+0xae>
 800349e:	e020      	b.n	80034e2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff ff9d 	bl	80033e4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7ff ff66 	bl	8003380 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80034b4:	e024      	b.n	8003500 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff ff70 	bl	80033a0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7ff ff7d 	bl	80033c4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80034ca:	e019      	b.n	8003500 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff ff55 	bl	8003380 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0018      	movs	r0, r3
 80034dc:	f7ff ff72 	bl	80033c4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80034e0:	e00e      	b.n	8003500 <LL_EXTI_Init+0xf8>
          default:
            status |= 0x02u;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2202      	movs	r2, #2
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
            break;
 80034ea:	e009      	b.n	8003500 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff ff0b 	bl	800330c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff ff2c 	bl	8003358 <LL_EXTI_DisableEvent_0_31>
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
#endif /* STM32G081xx || STM32G071xx || STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */
  }

  return status;
 8003500:	68fb      	ldr	r3, [r7, #12]
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b004      	add	sp, #16
 8003508:	bd80      	pop	{r7, pc}

0800350a <LL_GPIO_SetPinMode>:
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	435b      	muls	r3, r3
 800351e:	001a      	movs	r2, r3
 8003520:	0013      	movs	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	189b      	adds	r3, r3, r2
 8003526:	43db      	mvns	r3, r3
 8003528:	400b      	ands	r3, r1
 800352a:	001a      	movs	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	435b      	muls	r3, r3
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	434b      	muls	r3, r1
 8003534:	431a      	orrs	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	601a      	str	r2, [r3, #0]
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	b004      	add	sp, #16
 8003540:	bd80      	pop	{r7, pc}

08003542 <LL_GPIO_SetPinOutputType>:
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	43d2      	mvns	r2, r2
 8003556:	401a      	ands	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	434b      	muls	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	605a      	str	r2, [r3, #4]
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b004      	add	sp, #16
 800356a:	bd80      	pop	{r7, pc}

0800356c <LL_GPIO_SetPinSpeed>:
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6899      	ldr	r1, [r3, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	435b      	muls	r3, r3
 8003580:	001a      	movs	r2, r3
 8003582:	0013      	movs	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	189b      	adds	r3, r3, r2
 8003588:	43db      	mvns	r3, r3
 800358a:	400b      	ands	r3, r1
 800358c:	001a      	movs	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	435b      	muls	r3, r3
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	434b      	muls	r3, r1
 8003596:	431a      	orrs	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b004      	add	sp, #16
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <LL_GPIO_SetPinPull>:
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68d9      	ldr	r1, [r3, #12]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	435b      	muls	r3, r3
 80035b8:	001a      	movs	r2, r3
 80035ba:	0013      	movs	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	43db      	mvns	r3, r3
 80035c2:	400b      	ands	r3, r1
 80035c4:	001a      	movs	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	435b      	muls	r3, r3
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	434b      	muls	r3, r1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	60da      	str	r2, [r3, #12]
}
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b004      	add	sp, #16
 80035da:	bd80      	pop	{r7, pc}

080035dc <LL_GPIO_SetAFPin_0_7>:
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a19      	ldr	r1, [r3, #32]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	435b      	muls	r3, r3
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	4353      	muls	r3, r2
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	435a      	muls	r2, r3
 80035f8:	0013      	movs	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	43db      	mvns	r3, r3
 8003600:	400b      	ands	r3, r1
 8003602:	001a      	movs	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	435b      	muls	r3, r3
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	434b      	muls	r3, r1
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	434b      	muls	r3, r1
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	434b      	muls	r3, r1
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b004      	add	sp, #16
 8003620:	bd80      	pop	{r7, pc}

08003622 <LL_GPIO_SetAFPin_8_15>:
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	0a12      	lsrs	r2, r2, #8
 800363a:	4353      	muls	r3, r2
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	0a12      	lsrs	r2, r2, #8
 8003640:	4353      	muls	r3, r2
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	0a12      	lsrs	r2, r2, #8
 8003646:	435a      	muls	r2, r3
 8003648:	0013      	movs	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	43db      	mvns	r3, r3
 8003650:	400b      	ands	r3, r1
 8003652:	001a      	movs	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	0a09      	lsrs	r1, r1, #8
 800365c:	434b      	muls	r3, r1
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	0a09      	lsrs	r1, r1, #8
 8003662:	434b      	muls	r3, r1
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	0a09      	lsrs	r1, r1, #8
 8003668:	434b      	muls	r3, r1
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	434b      	muls	r3, r1
 800366e:	431a      	orrs	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b004      	add	sp, #16
 800367a:	bd80      	pop	{r7, pc}

0800367c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800368a:	e047      	b.n	800371c <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2101      	movs	r1, #1
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4091      	lsls	r1, r2
 8003696:	000a      	movs	r2, r1
 8003698:	4013      	ands	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d039      	beq.n	8003716 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d003      	beq.n	80036b2 <LL_GPIO_Init+0x36>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d10d      	bne.n	80036ce <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7ff ff56 	bl	800356c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7ff ff3a 	bl	8003542 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff ff64 	bl	80035a4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d111      	bne.n	8003708 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2bff      	cmp	r3, #255	; 0xff
 80036e8:	d807      	bhi.n	80036fa <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f7ff ff72 	bl	80035dc <LL_GPIO_SetAFPin_0_7>
 80036f8:	e006      	b.n	8003708 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	0018      	movs	r0, r3
 8003704:	f7ff ff8d 	bl	8003622 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	0018      	movs	r0, r3
 8003712:	f7ff fefa 	bl	800350a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	40da      	lsrs	r2, r3
 8003724:	1e13      	subs	r3, r2, #0
 8003726:	d1b1      	bne.n	800368c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8003728:	2300      	movs	r3, #0
}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b004      	add	sp, #16
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <LL_RCC_HSI_IsReady>:
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <LL_RCC_HSI_IsReady+0x24>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	401a      	ands	r2, r3
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	429a      	cmp	r2, r3
 8003748:	d101      	bne.n	800374e <LL_RCC_HSI_IsReady+0x1a>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <LL_RCC_HSI_IsReady+0x1c>
 800374e:	2300      	movs	r3, #0
}
 8003750:	0018      	movs	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	40021000 	.word	0x40021000

0800375c <LL_RCC_LSE_IsReady>:
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <LL_RCC_LSE_IsReady+0x1c>)
 8003762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003764:	2202      	movs	r2, #2
 8003766:	4013      	ands	r3, r2
 8003768:	2b02      	cmp	r3, #2
 800376a:	d101      	bne.n	8003770 <LL_RCC_LSE_IsReady+0x14>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <LL_RCC_LSE_IsReady+0x16>
 8003770:	2300      	movs	r3, #0
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000

0800377c <LL_RCC_GetSysClkSource>:
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <LL_RCC_GetSysClkSource+0x14>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2238      	movs	r2, #56	; 0x38
 8003786:	4013      	ands	r3, r2
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	40021000 	.word	0x40021000

08003794 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <LL_RCC_GetAHBPrescaler+0x14>)
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	23f0      	movs	r3, #240	; 0xf0
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	4013      	ands	r3, r2
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000

080037ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	23e0      	movs	r3, #224	; 0xe0
 80037b6:	01db      	lsls	r3, r3, #7
 80037b8:	4013      	ands	r3, r2
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000

080037c4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <LL_RCC_GetUSARTClockSource+0x20>)
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	401a      	ands	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	4313      	orrs	r3, r2
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	40021000 	.word	0x40021000

080037e8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <LL_RCC_PLL_GetN+0x14>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	227f      	movs	r2, #127	; 0x7f
 80037f4:	4013      	ands	r3, r2
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000

08003800 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <LL_RCC_PLL_GetR+0x14>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0f5b      	lsrs	r3, r3, #29
 800380a:	075b      	lsls	r3, r3, #29
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	40021000 	.word	0x40021000

08003818 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <LL_RCC_PLL_GetMainSource+0x14>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2203      	movs	r2, #3
 8003822:	4013      	ands	r3, r2
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	40021000 	.word	0x40021000

08003830 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <LL_RCC_PLL_GetDivider+0x14>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2270      	movs	r2, #112	; 0x70
 800383a:	4013      	ands	r3, r2
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	40021000 	.word	0x40021000

08003848 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003850:	f000 f866 	bl	8003920 <RCC_GetSystemClockFreq>
 8003854:	0002      	movs	r2, r0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	0018      	movs	r0, r3
 8003860:	f000 f88c 	bl	800397c <RCC_GetHCLKClockFreq>
 8003864:	0002      	movs	r2, r0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	0018      	movs	r0, r3
 8003870:	f000 f89c 	bl	80039ac <RCC_GetPCLK1ClockFreq>
 8003874:	0002      	movs	r2, r0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	609a      	str	r2, [r3, #8]
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d137      	bne.n	8003906 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f7ff ff93 	bl	80037c4 <LL_RCC_GetUSARTClockSource>
 800389e:	0003      	movs	r3, r0
 80038a0:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <LL_RCC_GetUSARTClockFreq+0x8c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d016      	beq.n	80038d4 <LL_RCC_GetUSARTClockFreq+0x50>
 80038a6:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <LL_RCC_GetUSARTClockFreq+0x8c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d81c      	bhi.n	80038e6 <LL_RCC_GetUSARTClockFreq+0x62>
 80038ac:	4a19      	ldr	r2, [pc, #100]	; (8003914 <LL_RCC_GetUSARTClockFreq+0x90>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d003      	beq.n	80038ba <LL_RCC_GetUSARTClockFreq+0x36>
 80038b2:	4a19      	ldr	r2, [pc, #100]	; (8003918 <LL_RCC_GetUSARTClockFreq+0x94>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d005      	beq.n	80038c4 <LL_RCC_GetUSARTClockFreq+0x40>
 80038b8:	e015      	b.n	80038e6 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80038ba:	f000 f831 	bl	8003920 <RCC_GetSystemClockFreq>
 80038be:	0003      	movs	r3, r0
 80038c0:	60fb      	str	r3, [r7, #12]
        break;
 80038c2:	e020      	b.n	8003906 <LL_RCC_GetUSARTClockFreq+0x82>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80038c4:	f7ff ff36 	bl	8003734 <LL_RCC_HSI_IsReady>
 80038c8:	0003      	movs	r3, r0
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d118      	bne.n	8003900 <LL_RCC_GetUSARTClockFreq+0x7c>
        {
          usart_frequency = HSI_VALUE;
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <LL_RCC_GetUSARTClockFreq+0x98>)
 80038d0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80038d2:	e015      	b.n	8003900 <LL_RCC_GetUSARTClockFreq+0x7c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80038d4:	f7ff ff42 	bl	800375c <LL_RCC_LSE_IsReady>
 80038d8:	0003      	movs	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d112      	bne.n	8003904 <LL_RCC_GetUSARTClockFreq+0x80>
        {
          usart_frequency = LSE_VALUE;
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80038e4:	e00e      	b.n	8003904 <LL_RCC_GetUSARTClockFreq+0x80>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80038e6:	f000 f81b 	bl	8003920 <RCC_GetSystemClockFreq>
 80038ea:	0003      	movs	r3, r0
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 f845 	bl	800397c <RCC_GetHCLKClockFreq>
 80038f2:	0003      	movs	r3, r0
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 f859 	bl	80039ac <RCC_GetPCLK1ClockFreq>
 80038fa:	0003      	movs	r3, r0
 80038fc:	60fb      	str	r3, [r7, #12]
        break;
 80038fe:	e002      	b.n	8003906 <LL_RCC_GetUSARTClockFreq+0x82>
        break;
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	e000      	b.n	8003906 <LL_RCC_GetUSARTClockFreq+0x82>
        break;
 8003904:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 8003906:	68fb      	ldr	r3, [r7, #12]
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b004      	add	sp, #16
 800390e:	bd80      	pop	{r7, pc}
 8003910:	00030003 	.word	0x00030003
 8003914:	00030001 	.word	0x00030001
 8003918:	00030002 	.word	0x00030002
 800391c:	00f42400 	.word	0x00f42400

08003920 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003926:	f7ff ff29 	bl	800377c <LL_RCC_GetSysClkSource>
 800392a:	0003      	movs	r3, r0
 800392c:	2b08      	cmp	r3, #8
 800392e:	d002      	beq.n	8003936 <RCC_GetSystemClockFreq+0x16>
 8003930:	2b10      	cmp	r3, #16
 8003932:	d003      	beq.n	800393c <RCC_GetSystemClockFreq+0x1c>
 8003934:	e007      	b.n	8003946 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <RCC_GetSystemClockFreq+0x50>)
 8003938:	607b      	str	r3, [r7, #4]
      break;
 800393a:	e014      	b.n	8003966 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800393c:	f000 f84c 	bl	80039d8 <RCC_PLL_GetFreqDomain_SYS>
 8003940:	0003      	movs	r3, r0
 8003942:	607b      	str	r3, [r7, #4]
      break;
 8003944:	e00f      	b.n	8003966 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <RCC_GetSystemClockFreq+0x54>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	0adb      	lsrs	r3, r3, #11
 800394c:	2207      	movs	r2, #7
 800394e:	4013      	ands	r3, r2
 8003950:	2201      	movs	r2, #1
 8003952:	409a      	lsls	r2, r3
 8003954:	0013      	movs	r3, r2
 8003956:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8003958:	6839      	ldr	r1, [r7, #0]
 800395a:	4807      	ldr	r0, [pc, #28]	; (8003978 <RCC_GetSystemClockFreq+0x58>)
 800395c:	f7fc fbdc 	bl	8000118 <__udivsi3>
 8003960:	0003      	movs	r3, r0
 8003962:	607b      	str	r3, [r7, #4]
      break;
 8003964:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8003966:	687b      	ldr	r3, [r7, #4]
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}
 8003970:	007a1200 	.word	0x007a1200
 8003974:	40021000 	.word	0x40021000
 8003978:	00f42400 	.word	0x00f42400

0800397c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003984:	f7ff ff06 	bl	8003794 <LL_RCC_GetAHBPrescaler>
 8003988:	0003      	movs	r3, r0
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	220f      	movs	r2, #15
 800398e:	401a      	ands	r2, r3
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <RCC_GetHCLKClockFreq+0x2c>)
 8003992:	0092      	lsls	r2, r2, #2
 8003994:	58d3      	ldr	r3, [r2, r3]
 8003996:	221f      	movs	r2, #31
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	40da      	lsrs	r2, r3
 800399e:	0013      	movs	r3, r2
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	08004724 	.word	0x08004724

080039ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80039b4:	f7ff fefa 	bl	80037ac <LL_RCC_GetAPB1Prescaler>
 80039b8:	0003      	movs	r3, r0
 80039ba:	0b1a      	lsrs	r2, r3, #12
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <RCC_GetPCLK1ClockFreq+0x28>)
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	58d3      	ldr	r3, [r2, r3]
 80039c2:	221f      	movs	r2, #31
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	40da      	lsrs	r2, r3
 80039ca:	0013      	movs	r3, r2
}
 80039cc:	0018      	movs	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b002      	add	sp, #8
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	08004764 	.word	0x08004764

080039d8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80039de:	f7ff ff1b 	bl	8003818 <LL_RCC_PLL_GetMainSource>
 80039e2:	0003      	movs	r3, r0
 80039e4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d003      	beq.n	80039f4 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d003      	beq.n	80039fa <RCC_PLL_GetFreqDomain_SYS+0x22>
 80039f2:	e005      	b.n	8003a00 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80039f6:	607b      	str	r3, [r7, #4]
      break;
 80039f8:	e005      	b.n	8003a06 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 80039fc:	607b      	str	r3, [r7, #4]
      break;
 80039fe:	e002      	b.n	8003a06 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8003a00:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8003a02:	607b      	str	r3, [r7, #4]
      break;
 8003a04:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003a06:	f7ff feef 	bl	80037e8 <LL_RCC_PLL_GetN>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4353      	muls	r3, r2
 8003a10:	001c      	movs	r4, r3
 8003a12:	f7ff ff0d 	bl	8003830 <LL_RCC_PLL_GetDivider>
 8003a16:	0003      	movs	r3, r0
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	0020      	movs	r0, r4
 8003a20:	f7fc fb7a 	bl	8000118 <__udivsi3>
 8003a24:	0003      	movs	r3, r0
 8003a26:	001c      	movs	r4, r3
 8003a28:	f7ff feea 	bl	8003800 <LL_RCC_PLL_GetR>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	0f5b      	lsrs	r3, r3, #29
 8003a30:	3301      	adds	r3, #1
 8003a32:	0019      	movs	r1, r3
 8003a34:	0020      	movs	r0, r4
 8003a36:	f7fc fb6f 	bl	8000118 <__udivsi3>
 8003a3a:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b003      	add	sp, #12
 8003a42:	bd90      	pop	{r4, r7, pc}
 8003a44:	00f42400 	.word	0x00f42400
 8003a48:	007a1200 	.word	0x007a1200

08003a4c <LL_USART_IsEnabled>:
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <LL_USART_IsEnabled+0x18>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <LL_USART_IsEnabled+0x1a>
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b002      	add	sp, #8
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <LL_USART_SetPrescaler>:
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	4393      	bics	r3, r2
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	b292      	uxth	r2, r2
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <LL_USART_SetStopBitsLength>:
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <LL_USART_SetStopBitsLength+0x24>)
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	605a      	str	r2, [r3, #4]
}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b002      	add	sp, #8
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	ffffcfff 	.word	0xffffcfff

08003abc <LL_USART_SetHWFlowCtrl>:
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4a05      	ldr	r2, [pc, #20]	; (8003ae0 <LL_USART_SetHWFlowCtrl+0x24>)
 8003acc:	401a      	ands	r2, r3
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	609a      	str	r2, [r3, #8]
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	fffffcff 	.word	0xfffffcff

08003ae4 <LL_USART_SetBaudRate>:
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b0b      	cmp	r3, #11
 8003af6:	d846      	bhi.n	8003b86 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d043      	beq.n	8003b86 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d126      	bne.n	8003b56 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	001a      	movs	r2, r3
 8003b0e:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <LL_USART_SetBaudRate+0xac>)
 8003b10:	0092      	lsls	r2, r2, #2
 8003b12:	58d3      	ldr	r3, [r2, r3]
 8003b14:	0019      	movs	r1, r3
 8003b16:	68b8      	ldr	r0, [r7, #8]
 8003b18:	f7fc fafe 	bl	8000118 <__udivsi3>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	005a      	lsls	r2, r3, #1
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	18d3      	adds	r3, r2, r3
 8003b26:	6a39      	ldr	r1, [r7, #32]
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7fc faf5 	bl	8000118 <__udivsi3>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <LL_USART_SetBaudRate+0xb0>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	001a      	movs	r2, r3
 8003b44:	2307      	movs	r3, #7
 8003b46:	4013      	ands	r3, r2
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	60da      	str	r2, [r3, #12]
}
 8003b54:	e017      	b.n	8003b86 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	001a      	movs	r2, r3
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <LL_USART_SetBaudRate+0xac>)
 8003b5e:	0092      	lsls	r2, r2, #2
 8003b60:	58d3      	ldr	r3, [r2, r3]
 8003b62:	0019      	movs	r1, r3
 8003b64:	68b8      	ldr	r0, [r7, #8]
 8003b66:	f7fc fad7 	bl	8000118 <__udivsi3>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	18d3      	adds	r3, r2, r3
 8003b74:	6a39      	ldr	r1, [r7, #32]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7fc face 	bl	8000118 <__udivsi3>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	001a      	movs	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	60da      	str	r2, [r3, #12]
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b006      	add	sp, #24
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	08004784 	.word	0x08004784
 8003b94:	0000fff0 	.word	0x0000fff0

08003b98 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b08b      	sub	sp, #44	; 0x2c
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003ba2:	231f      	movs	r3, #31
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7ff ff4b 	bl	8003a4c <LL_USART_IsEnabled>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d153      	bne.n	8003c62 <LL_USART_Init+0xca>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2c      	ldr	r2, [pc, #176]	; (8003c70 <LL_USART_Init+0xd8>)
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6899      	ldr	r1, [r3, #8]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	4319      	orrs	r1, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	4319      	orrs	r1, r3
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0011      	movs	r1, r2
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7ff ff54 	bl	8003a94 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	699a      	ldr	r2, [r3, #24]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff ff61 	bl	8003abc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <LL_USART_Init+0xdc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d105      	bne.n	8003c0e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003c02:	2003      	movs	r0, #3
 8003c04:	f7ff fe3e 	bl	8003884 <LL_RCC_GetUSARTClockFreq>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e00b      	b.n	8003c26 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a19      	ldr	r2, [pc, #100]	; (8003c78 <LL_USART_Init+0xe0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d107      	bne.n	8003c26 <LL_USART_Init+0x8e>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003c16:	240c      	movs	r4, #12
 8003c18:	193b      	adds	r3, r7, r4
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f7ff fe14 	bl	8003848 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003c20:	193b      	adds	r3, r7, r4
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00f      	beq.n	8003c54 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003c34:	231f      	movs	r3, #31
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	69dc      	ldr	r4, [r3, #28]
                           USART_InitStruct->BaudRate);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8003c48:	69b9      	ldr	r1, [r7, #24]
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	0023      	movs	r3, r4
 8003c50:	f7ff ff48 	bl	8003ae4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7ff ff06 	bl	8003a6e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003c62:	231f      	movs	r3, #31
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	781b      	ldrb	r3, [r3, #0]
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b009      	add	sp, #36	; 0x24
 8003c6e:	bd90      	pop	{r4, r7, pc}
 8003c70:	efff69f3 	.word	0xefff69f3
 8003c74:	40013800 	.word	0x40013800
 8003c78:	40004400 	.word	0x40004400

08003c7c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <LL_SetSystemCoreClock+0x18>)
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b002      	add	sp, #8
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	20000000 	.word	0x20000000

08003c98 <sniprintf>:
 8003c98:	b40c      	push	{r2, r3}
 8003c9a:	b530      	push	{r4, r5, lr}
 8003c9c:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <sniprintf+0x64>)
 8003c9e:	000c      	movs	r4, r1
 8003ca0:	681d      	ldr	r5, [r3, #0]
 8003ca2:	b09d      	sub	sp, #116	; 0x74
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	da08      	bge.n	8003cba <sniprintf+0x22>
 8003ca8:	238b      	movs	r3, #139	; 0x8b
 8003caa:	2001      	movs	r0, #1
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	4240      	negs	r0, r0
 8003cb0:	b01d      	add	sp, #116	; 0x74
 8003cb2:	bc30      	pop	{r4, r5}
 8003cb4:	bc08      	pop	{r3}
 8003cb6:	b002      	add	sp, #8
 8003cb8:	4718      	bx	r3
 8003cba:	2382      	movs	r3, #130	; 0x82
 8003cbc:	466a      	mov	r2, sp
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	8293      	strh	r3, [r2, #20]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9002      	str	r0, [sp, #8]
 8003cc6:	9006      	str	r0, [sp, #24]
 8003cc8:	4299      	cmp	r1, r3
 8003cca:	d000      	beq.n	8003cce <sniprintf+0x36>
 8003ccc:	1e4b      	subs	r3, r1, #1
 8003cce:	9304      	str	r3, [sp, #16]
 8003cd0:	9307      	str	r3, [sp, #28]
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	466a      	mov	r2, sp
 8003cd6:	425b      	negs	r3, r3
 8003cd8:	82d3      	strh	r3, [r2, #22]
 8003cda:	0028      	movs	r0, r5
 8003cdc:	ab21      	add	r3, sp, #132	; 0x84
 8003cde:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ce0:	a902      	add	r1, sp, #8
 8003ce2:	9301      	str	r3, [sp, #4]
 8003ce4:	f000 f9aa 	bl	800403c <_svfiprintf_r>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	da01      	bge.n	8003cf0 <sniprintf+0x58>
 8003cec:	238b      	movs	r3, #139	; 0x8b
 8003cee:	602b      	str	r3, [r5, #0]
 8003cf0:	2c00      	cmp	r4, #0
 8003cf2:	d0dd      	beq.n	8003cb0 <sniprintf+0x18>
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	9b02      	ldr	r3, [sp, #8]
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e7d9      	b.n	8003cb0 <sniprintf+0x18>
 8003cfc:	20000058 	.word	0x20000058

08003d00 <memset>:
 8003d00:	0003      	movs	r3, r0
 8003d02:	1882      	adds	r2, r0, r2
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d100      	bne.n	8003d0a <memset+0xa>
 8003d08:	4770      	bx	lr
 8003d0a:	7019      	strb	r1, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	e7f9      	b.n	8003d04 <memset+0x4>

08003d10 <__errno>:
 8003d10:	4b01      	ldr	r3, [pc, #4]	; (8003d18 <__errno+0x8>)
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	4770      	bx	lr
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	20000058 	.word	0x20000058

08003d1c <__libc_init_array>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	2600      	movs	r6, #0
 8003d20:	4c0c      	ldr	r4, [pc, #48]	; (8003d54 <__libc_init_array+0x38>)
 8003d22:	4d0d      	ldr	r5, [pc, #52]	; (8003d58 <__libc_init_array+0x3c>)
 8003d24:	1b64      	subs	r4, r4, r5
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	42a6      	cmp	r6, r4
 8003d2a:	d109      	bne.n	8003d40 <__libc_init_array+0x24>
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	f000 fc6d 	bl	800460c <_init>
 8003d32:	4c0a      	ldr	r4, [pc, #40]	; (8003d5c <__libc_init_array+0x40>)
 8003d34:	4d0a      	ldr	r5, [pc, #40]	; (8003d60 <__libc_init_array+0x44>)
 8003d36:	1b64      	subs	r4, r4, r5
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	42a6      	cmp	r6, r4
 8003d3c:	d105      	bne.n	8003d4a <__libc_init_array+0x2e>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	00b3      	lsls	r3, r6, #2
 8003d42:	58eb      	ldr	r3, [r5, r3]
 8003d44:	4798      	blx	r3
 8003d46:	3601      	adds	r6, #1
 8003d48:	e7ee      	b.n	8003d28 <__libc_init_array+0xc>
 8003d4a:	00b3      	lsls	r3, r6, #2
 8003d4c:	58eb      	ldr	r3, [r5, r3]
 8003d4e:	4798      	blx	r3
 8003d50:	3601      	adds	r6, #1
 8003d52:	e7f2      	b.n	8003d3a <__libc_init_array+0x1e>
 8003d54:	080047e8 	.word	0x080047e8
 8003d58:	080047e8 	.word	0x080047e8
 8003d5c:	080047ec 	.word	0x080047ec
 8003d60:	080047e8 	.word	0x080047e8

08003d64 <__retarget_lock_acquire_recursive>:
 8003d64:	4770      	bx	lr

08003d66 <__retarget_lock_release_recursive>:
 8003d66:	4770      	bx	lr

08003d68 <memcpy>:
 8003d68:	2300      	movs	r3, #0
 8003d6a:	b510      	push	{r4, lr}
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d100      	bne.n	8003d72 <memcpy+0xa>
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	5ccc      	ldrb	r4, [r1, r3]
 8003d74:	54c4      	strb	r4, [r0, r3]
 8003d76:	3301      	adds	r3, #1
 8003d78:	e7f8      	b.n	8003d6c <memcpy+0x4>
	...

08003d7c <_free_r>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	0005      	movs	r5, r0
 8003d80:	2900      	cmp	r1, #0
 8003d82:	d010      	beq.n	8003da6 <_free_r+0x2a>
 8003d84:	1f0c      	subs	r4, r1, #4
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	da00      	bge.n	8003d8e <_free_r+0x12>
 8003d8c:	18e4      	adds	r4, r4, r3
 8003d8e:	0028      	movs	r0, r5
 8003d90:	f000 f8e2 	bl	8003f58 <__malloc_lock>
 8003d94:	4a1d      	ldr	r2, [pc, #116]	; (8003e0c <_free_r+0x90>)
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <_free_r+0x2c>
 8003d9c:	6063      	str	r3, [r4, #4]
 8003d9e:	6014      	str	r4, [r2, #0]
 8003da0:	0028      	movs	r0, r5
 8003da2:	f000 f8e1 	bl	8003f68 <__malloc_unlock>
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	d908      	bls.n	8003dbe <_free_r+0x42>
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	1821      	adds	r1, r4, r0
 8003db0:	428b      	cmp	r3, r1
 8003db2:	d1f3      	bne.n	8003d9c <_free_r+0x20>
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	1809      	adds	r1, r1, r0
 8003dba:	6021      	str	r1, [r4, #0]
 8003dbc:	e7ee      	b.n	8003d9c <_free_r+0x20>
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <_free_r+0x4e>
 8003dc6:	42a3      	cmp	r3, r4
 8003dc8:	d9f9      	bls.n	8003dbe <_free_r+0x42>
 8003dca:	6811      	ldr	r1, [r2, #0]
 8003dcc:	1850      	adds	r0, r2, r1
 8003dce:	42a0      	cmp	r0, r4
 8003dd0:	d10b      	bne.n	8003dea <_free_r+0x6e>
 8003dd2:	6820      	ldr	r0, [r4, #0]
 8003dd4:	1809      	adds	r1, r1, r0
 8003dd6:	1850      	adds	r0, r2, r1
 8003dd8:	6011      	str	r1, [r2, #0]
 8003dda:	4283      	cmp	r3, r0
 8003ddc:	d1e0      	bne.n	8003da0 <_free_r+0x24>
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	1841      	adds	r1, r0, r1
 8003de4:	6011      	str	r1, [r2, #0]
 8003de6:	6053      	str	r3, [r2, #4]
 8003de8:	e7da      	b.n	8003da0 <_free_r+0x24>
 8003dea:	42a0      	cmp	r0, r4
 8003dec:	d902      	bls.n	8003df4 <_free_r+0x78>
 8003dee:	230c      	movs	r3, #12
 8003df0:	602b      	str	r3, [r5, #0]
 8003df2:	e7d5      	b.n	8003da0 <_free_r+0x24>
 8003df4:	6820      	ldr	r0, [r4, #0]
 8003df6:	1821      	adds	r1, r4, r0
 8003df8:	428b      	cmp	r3, r1
 8003dfa:	d103      	bne.n	8003e04 <_free_r+0x88>
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	1809      	adds	r1, r1, r0
 8003e02:	6021      	str	r1, [r4, #0]
 8003e04:	6063      	str	r3, [r4, #4]
 8003e06:	6054      	str	r4, [r2, #4]
 8003e08:	e7ca      	b.n	8003da0 <_free_r+0x24>
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	20000224 	.word	0x20000224

08003e10 <sbrk_aligned>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	4e0f      	ldr	r6, [pc, #60]	; (8003e50 <sbrk_aligned+0x40>)
 8003e14:	000d      	movs	r5, r1
 8003e16:	6831      	ldr	r1, [r6, #0]
 8003e18:	0004      	movs	r4, r0
 8003e1a:	2900      	cmp	r1, #0
 8003e1c:	d102      	bne.n	8003e24 <sbrk_aligned+0x14>
 8003e1e:	f000 fba1 	bl	8004564 <_sbrk_r>
 8003e22:	6030      	str	r0, [r6, #0]
 8003e24:	0029      	movs	r1, r5
 8003e26:	0020      	movs	r0, r4
 8003e28:	f000 fb9c 	bl	8004564 <_sbrk_r>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d00a      	beq.n	8003e46 <sbrk_aligned+0x36>
 8003e30:	2303      	movs	r3, #3
 8003e32:	1cc5      	adds	r5, r0, #3
 8003e34:	439d      	bics	r5, r3
 8003e36:	42a8      	cmp	r0, r5
 8003e38:	d007      	beq.n	8003e4a <sbrk_aligned+0x3a>
 8003e3a:	1a29      	subs	r1, r5, r0
 8003e3c:	0020      	movs	r0, r4
 8003e3e:	f000 fb91 	bl	8004564 <_sbrk_r>
 8003e42:	3001      	adds	r0, #1
 8003e44:	d101      	bne.n	8003e4a <sbrk_aligned+0x3a>
 8003e46:	2501      	movs	r5, #1
 8003e48:	426d      	negs	r5, r5
 8003e4a:	0028      	movs	r0, r5
 8003e4c:	bd70      	pop	{r4, r5, r6, pc}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	20000228 	.word	0x20000228

08003e54 <_malloc_r>:
 8003e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e56:	2203      	movs	r2, #3
 8003e58:	1ccb      	adds	r3, r1, #3
 8003e5a:	4393      	bics	r3, r2
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	0006      	movs	r6, r0
 8003e60:	001f      	movs	r7, r3
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	d238      	bcs.n	8003ed8 <_malloc_r+0x84>
 8003e66:	270c      	movs	r7, #12
 8003e68:	42b9      	cmp	r1, r7
 8003e6a:	d837      	bhi.n	8003edc <_malloc_r+0x88>
 8003e6c:	0030      	movs	r0, r6
 8003e6e:	f000 f873 	bl	8003f58 <__malloc_lock>
 8003e72:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <_malloc_r+0x100>)
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	001c      	movs	r4, r3
 8003e7a:	2c00      	cmp	r4, #0
 8003e7c:	d133      	bne.n	8003ee6 <_malloc_r+0x92>
 8003e7e:	0039      	movs	r1, r7
 8003e80:	0030      	movs	r0, r6
 8003e82:	f7ff ffc5 	bl	8003e10 <sbrk_aligned>
 8003e86:	0004      	movs	r4, r0
 8003e88:	1c43      	adds	r3, r0, #1
 8003e8a:	d15e      	bne.n	8003f4a <_malloc_r+0xf6>
 8003e8c:	9b00      	ldr	r3, [sp, #0]
 8003e8e:	681c      	ldr	r4, [r3, #0]
 8003e90:	0025      	movs	r5, r4
 8003e92:	2d00      	cmp	r5, #0
 8003e94:	d14e      	bne.n	8003f34 <_malloc_r+0xe0>
 8003e96:	2c00      	cmp	r4, #0
 8003e98:	d051      	beq.n	8003f3e <_malloc_r+0xea>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	0029      	movs	r1, r5
 8003e9e:	18e3      	adds	r3, r4, r3
 8003ea0:	0030      	movs	r0, r6
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	f000 fb5e 	bl	8004564 <_sbrk_r>
 8003ea8:	9b01      	ldr	r3, [sp, #4]
 8003eaa:	4283      	cmp	r3, r0
 8003eac:	d147      	bne.n	8003f3e <_malloc_r+0xea>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	0030      	movs	r0, r6
 8003eb2:	1aff      	subs	r7, r7, r3
 8003eb4:	0039      	movs	r1, r7
 8003eb6:	f7ff ffab 	bl	8003e10 <sbrk_aligned>
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d03f      	beq.n	8003f3e <_malloc_r+0xea>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	19db      	adds	r3, r3, r7
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	9b00      	ldr	r3, [sp, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d040      	beq.n	8003f4e <_malloc_r+0xfa>
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	42a2      	cmp	r2, r4
 8003ed0:	d133      	bne.n	8003f3a <_malloc_r+0xe6>
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	e014      	b.n	8003f02 <_malloc_r+0xae>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	dac5      	bge.n	8003e68 <_malloc_r+0x14>
 8003edc:	230c      	movs	r3, #12
 8003ede:	2500      	movs	r5, #0
 8003ee0:	6033      	str	r3, [r6, #0]
 8003ee2:	0028      	movs	r0, r5
 8003ee4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ee6:	6821      	ldr	r1, [r4, #0]
 8003ee8:	1bc9      	subs	r1, r1, r7
 8003eea:	d420      	bmi.n	8003f2e <_malloc_r+0xda>
 8003eec:	290b      	cmp	r1, #11
 8003eee:	d918      	bls.n	8003f22 <_malloc_r+0xce>
 8003ef0:	19e2      	adds	r2, r4, r7
 8003ef2:	6027      	str	r7, [r4, #0]
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	d112      	bne.n	8003f1e <_malloc_r+0xca>
 8003ef8:	9b00      	ldr	r3, [sp, #0]
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	6863      	ldr	r3, [r4, #4]
 8003efe:	6011      	str	r1, [r2, #0]
 8003f00:	6053      	str	r3, [r2, #4]
 8003f02:	0030      	movs	r0, r6
 8003f04:	0025      	movs	r5, r4
 8003f06:	f000 f82f 	bl	8003f68 <__malloc_unlock>
 8003f0a:	2207      	movs	r2, #7
 8003f0c:	350b      	adds	r5, #11
 8003f0e:	1d23      	adds	r3, r4, #4
 8003f10:	4395      	bics	r5, r2
 8003f12:	1aea      	subs	r2, r5, r3
 8003f14:	429d      	cmp	r5, r3
 8003f16:	d0e4      	beq.n	8003ee2 <_malloc_r+0x8e>
 8003f18:	1b5b      	subs	r3, r3, r5
 8003f1a:	50a3      	str	r3, [r4, r2]
 8003f1c:	e7e1      	b.n	8003ee2 <_malloc_r+0x8e>
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	e7ec      	b.n	8003efc <_malloc_r+0xa8>
 8003f22:	6862      	ldr	r2, [r4, #4]
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	d1d5      	bne.n	8003ed4 <_malloc_r+0x80>
 8003f28:	9b00      	ldr	r3, [sp, #0]
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e7e9      	b.n	8003f02 <_malloc_r+0xae>
 8003f2e:	0023      	movs	r3, r4
 8003f30:	6864      	ldr	r4, [r4, #4]
 8003f32:	e7a2      	b.n	8003e7a <_malloc_r+0x26>
 8003f34:	002c      	movs	r4, r5
 8003f36:	686d      	ldr	r5, [r5, #4]
 8003f38:	e7ab      	b.n	8003e92 <_malloc_r+0x3e>
 8003f3a:	0013      	movs	r3, r2
 8003f3c:	e7c4      	b.n	8003ec8 <_malloc_r+0x74>
 8003f3e:	230c      	movs	r3, #12
 8003f40:	0030      	movs	r0, r6
 8003f42:	6033      	str	r3, [r6, #0]
 8003f44:	f000 f810 	bl	8003f68 <__malloc_unlock>
 8003f48:	e7cb      	b.n	8003ee2 <_malloc_r+0x8e>
 8003f4a:	6027      	str	r7, [r4, #0]
 8003f4c:	e7d9      	b.n	8003f02 <_malloc_r+0xae>
 8003f4e:	605b      	str	r3, [r3, #4]
 8003f50:	deff      	udf	#255	; 0xff
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	20000224 	.word	0x20000224

08003f58 <__malloc_lock>:
 8003f58:	b510      	push	{r4, lr}
 8003f5a:	4802      	ldr	r0, [pc, #8]	; (8003f64 <__malloc_lock+0xc>)
 8003f5c:	f7ff ff02 	bl	8003d64 <__retarget_lock_acquire_recursive>
 8003f60:	bd10      	pop	{r4, pc}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	20000220 	.word	0x20000220

08003f68 <__malloc_unlock>:
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	4802      	ldr	r0, [pc, #8]	; (8003f74 <__malloc_unlock+0xc>)
 8003f6c:	f7ff fefb 	bl	8003d66 <__retarget_lock_release_recursive>
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	20000220 	.word	0x20000220

08003f78 <__ssputs_r>:
 8003f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	9203      	str	r2, [sp, #12]
 8003f80:	688e      	ldr	r6, [r1, #8]
 8003f82:	9a01      	ldr	r2, [sp, #4]
 8003f84:	0007      	movs	r7, r0
 8003f86:	000c      	movs	r4, r1
 8003f88:	680b      	ldr	r3, [r1, #0]
 8003f8a:	4296      	cmp	r6, r2
 8003f8c:	d831      	bhi.n	8003ff2 <__ssputs_r+0x7a>
 8003f8e:	898a      	ldrh	r2, [r1, #12]
 8003f90:	2190      	movs	r1, #144	; 0x90
 8003f92:	00c9      	lsls	r1, r1, #3
 8003f94:	420a      	tst	r2, r1
 8003f96:	d029      	beq.n	8003fec <__ssputs_r+0x74>
 8003f98:	2003      	movs	r0, #3
 8003f9a:	6921      	ldr	r1, [r4, #16]
 8003f9c:	1a5b      	subs	r3, r3, r1
 8003f9e:	9302      	str	r3, [sp, #8]
 8003fa0:	6963      	ldr	r3, [r4, #20]
 8003fa2:	4343      	muls	r3, r0
 8003fa4:	0fdd      	lsrs	r5, r3, #31
 8003fa6:	18ed      	adds	r5, r5, r3
 8003fa8:	9b01      	ldr	r3, [sp, #4]
 8003faa:	9802      	ldr	r0, [sp, #8]
 8003fac:	3301      	adds	r3, #1
 8003fae:	181b      	adds	r3, r3, r0
 8003fb0:	106d      	asrs	r5, r5, #1
 8003fb2:	42ab      	cmp	r3, r5
 8003fb4:	d900      	bls.n	8003fb8 <__ssputs_r+0x40>
 8003fb6:	001d      	movs	r5, r3
 8003fb8:	0552      	lsls	r2, r2, #21
 8003fba:	d529      	bpl.n	8004010 <__ssputs_r+0x98>
 8003fbc:	0029      	movs	r1, r5
 8003fbe:	0038      	movs	r0, r7
 8003fc0:	f7ff ff48 	bl	8003e54 <_malloc_r>
 8003fc4:	1e06      	subs	r6, r0, #0
 8003fc6:	d02d      	beq.n	8004024 <__ssputs_r+0xac>
 8003fc8:	9a02      	ldr	r2, [sp, #8]
 8003fca:	6921      	ldr	r1, [r4, #16]
 8003fcc:	f7ff fecc 	bl	8003d68 <memcpy>
 8003fd0:	89a2      	ldrh	r2, [r4, #12]
 8003fd2:	4b19      	ldr	r3, [pc, #100]	; (8004038 <__ssputs_r+0xc0>)
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	81a3      	strh	r3, [r4, #12]
 8003fdc:	9b02      	ldr	r3, [sp, #8]
 8003fde:	6126      	str	r6, [r4, #16]
 8003fe0:	18f6      	adds	r6, r6, r3
 8003fe2:	6026      	str	r6, [r4, #0]
 8003fe4:	6165      	str	r5, [r4, #20]
 8003fe6:	9e01      	ldr	r6, [sp, #4]
 8003fe8:	1aed      	subs	r5, r5, r3
 8003fea:	60a5      	str	r5, [r4, #8]
 8003fec:	9b01      	ldr	r3, [sp, #4]
 8003fee:	429e      	cmp	r6, r3
 8003ff0:	d900      	bls.n	8003ff4 <__ssputs_r+0x7c>
 8003ff2:	9e01      	ldr	r6, [sp, #4]
 8003ff4:	0032      	movs	r2, r6
 8003ff6:	9903      	ldr	r1, [sp, #12]
 8003ff8:	6820      	ldr	r0, [r4, #0]
 8003ffa:	f000 fa9f 	bl	800453c <memmove>
 8003ffe:	2000      	movs	r0, #0
 8004000:	68a3      	ldr	r3, [r4, #8]
 8004002:	1b9b      	subs	r3, r3, r6
 8004004:	60a3      	str	r3, [r4, #8]
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	199b      	adds	r3, r3, r6
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	b005      	add	sp, #20
 800400e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004010:	002a      	movs	r2, r5
 8004012:	0038      	movs	r0, r7
 8004014:	f000 fac3 	bl	800459e <_realloc_r>
 8004018:	1e06      	subs	r6, r0, #0
 800401a:	d1df      	bne.n	8003fdc <__ssputs_r+0x64>
 800401c:	0038      	movs	r0, r7
 800401e:	6921      	ldr	r1, [r4, #16]
 8004020:	f7ff feac 	bl	8003d7c <_free_r>
 8004024:	230c      	movs	r3, #12
 8004026:	2001      	movs	r0, #1
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	89a2      	ldrh	r2, [r4, #12]
 800402c:	3334      	adds	r3, #52	; 0x34
 800402e:	4313      	orrs	r3, r2
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	4240      	negs	r0, r0
 8004034:	e7ea      	b.n	800400c <__ssputs_r+0x94>
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	fffffb7f 	.word	0xfffffb7f

0800403c <_svfiprintf_r>:
 800403c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403e:	b0a1      	sub	sp, #132	; 0x84
 8004040:	9003      	str	r0, [sp, #12]
 8004042:	001d      	movs	r5, r3
 8004044:	898b      	ldrh	r3, [r1, #12]
 8004046:	000f      	movs	r7, r1
 8004048:	0016      	movs	r6, r2
 800404a:	061b      	lsls	r3, r3, #24
 800404c:	d511      	bpl.n	8004072 <_svfiprintf_r+0x36>
 800404e:	690b      	ldr	r3, [r1, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10e      	bne.n	8004072 <_svfiprintf_r+0x36>
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	f7ff fefd 	bl	8003e54 <_malloc_r>
 800405a:	6038      	str	r0, [r7, #0]
 800405c:	6138      	str	r0, [r7, #16]
 800405e:	2800      	cmp	r0, #0
 8004060:	d105      	bne.n	800406e <_svfiprintf_r+0x32>
 8004062:	230c      	movs	r3, #12
 8004064:	9a03      	ldr	r2, [sp, #12]
 8004066:	3801      	subs	r0, #1
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	b021      	add	sp, #132	; 0x84
 800406c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800406e:	2340      	movs	r3, #64	; 0x40
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	2300      	movs	r3, #0
 8004074:	ac08      	add	r4, sp, #32
 8004076:	6163      	str	r3, [r4, #20]
 8004078:	3320      	adds	r3, #32
 800407a:	7663      	strb	r3, [r4, #25]
 800407c:	3310      	adds	r3, #16
 800407e:	76a3      	strb	r3, [r4, #26]
 8004080:	9507      	str	r5, [sp, #28]
 8004082:	0035      	movs	r5, r6
 8004084:	782b      	ldrb	r3, [r5, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <_svfiprintf_r+0x52>
 800408a:	2b25      	cmp	r3, #37	; 0x25
 800408c:	d148      	bne.n	8004120 <_svfiprintf_r+0xe4>
 800408e:	1bab      	subs	r3, r5, r6
 8004090:	9305      	str	r3, [sp, #20]
 8004092:	42b5      	cmp	r5, r6
 8004094:	d00b      	beq.n	80040ae <_svfiprintf_r+0x72>
 8004096:	0032      	movs	r2, r6
 8004098:	0039      	movs	r1, r7
 800409a:	9803      	ldr	r0, [sp, #12]
 800409c:	f7ff ff6c 	bl	8003f78 <__ssputs_r>
 80040a0:	3001      	adds	r0, #1
 80040a2:	d100      	bne.n	80040a6 <_svfiprintf_r+0x6a>
 80040a4:	e0af      	b.n	8004206 <_svfiprintf_r+0x1ca>
 80040a6:	6963      	ldr	r3, [r4, #20]
 80040a8:	9a05      	ldr	r2, [sp, #20]
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	6163      	str	r3, [r4, #20]
 80040ae:	782b      	ldrb	r3, [r5, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d100      	bne.n	80040b6 <_svfiprintf_r+0x7a>
 80040b4:	e0a7      	b.n	8004206 <_svfiprintf_r+0x1ca>
 80040b6:	2201      	movs	r2, #1
 80040b8:	2300      	movs	r3, #0
 80040ba:	4252      	negs	r2, r2
 80040bc:	6062      	str	r2, [r4, #4]
 80040be:	a904      	add	r1, sp, #16
 80040c0:	3254      	adds	r2, #84	; 0x54
 80040c2:	1852      	adds	r2, r2, r1
 80040c4:	1c6e      	adds	r6, r5, #1
 80040c6:	6023      	str	r3, [r4, #0]
 80040c8:	60e3      	str	r3, [r4, #12]
 80040ca:	60a3      	str	r3, [r4, #8]
 80040cc:	7013      	strb	r3, [r2, #0]
 80040ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80040d0:	4b55      	ldr	r3, [pc, #340]	; (8004228 <_svfiprintf_r+0x1ec>)
 80040d2:	2205      	movs	r2, #5
 80040d4:	0018      	movs	r0, r3
 80040d6:	7831      	ldrb	r1, [r6, #0]
 80040d8:	9305      	str	r3, [sp, #20]
 80040da:	f000 fa55 	bl	8004588 <memchr>
 80040de:	1c75      	adds	r5, r6, #1
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d11f      	bne.n	8004124 <_svfiprintf_r+0xe8>
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	06d3      	lsls	r3, r2, #27
 80040e8:	d504      	bpl.n	80040f4 <_svfiprintf_r+0xb8>
 80040ea:	2353      	movs	r3, #83	; 0x53
 80040ec:	a904      	add	r1, sp, #16
 80040ee:	185b      	adds	r3, r3, r1
 80040f0:	2120      	movs	r1, #32
 80040f2:	7019      	strb	r1, [r3, #0]
 80040f4:	0713      	lsls	r3, r2, #28
 80040f6:	d504      	bpl.n	8004102 <_svfiprintf_r+0xc6>
 80040f8:	2353      	movs	r3, #83	; 0x53
 80040fa:	a904      	add	r1, sp, #16
 80040fc:	185b      	adds	r3, r3, r1
 80040fe:	212b      	movs	r1, #43	; 0x2b
 8004100:	7019      	strb	r1, [r3, #0]
 8004102:	7833      	ldrb	r3, [r6, #0]
 8004104:	2b2a      	cmp	r3, #42	; 0x2a
 8004106:	d016      	beq.n	8004136 <_svfiprintf_r+0xfa>
 8004108:	0035      	movs	r5, r6
 800410a:	2100      	movs	r1, #0
 800410c:	200a      	movs	r0, #10
 800410e:	68e3      	ldr	r3, [r4, #12]
 8004110:	782a      	ldrb	r2, [r5, #0]
 8004112:	1c6e      	adds	r6, r5, #1
 8004114:	3a30      	subs	r2, #48	; 0x30
 8004116:	2a09      	cmp	r2, #9
 8004118:	d94e      	bls.n	80041b8 <_svfiprintf_r+0x17c>
 800411a:	2900      	cmp	r1, #0
 800411c:	d111      	bne.n	8004142 <_svfiprintf_r+0x106>
 800411e:	e017      	b.n	8004150 <_svfiprintf_r+0x114>
 8004120:	3501      	adds	r5, #1
 8004122:	e7af      	b.n	8004084 <_svfiprintf_r+0x48>
 8004124:	9b05      	ldr	r3, [sp, #20]
 8004126:	6822      	ldr	r2, [r4, #0]
 8004128:	1ac0      	subs	r0, r0, r3
 800412a:	2301      	movs	r3, #1
 800412c:	4083      	lsls	r3, r0
 800412e:	4313      	orrs	r3, r2
 8004130:	002e      	movs	r6, r5
 8004132:	6023      	str	r3, [r4, #0]
 8004134:	e7cc      	b.n	80040d0 <_svfiprintf_r+0x94>
 8004136:	9b07      	ldr	r3, [sp, #28]
 8004138:	1d19      	adds	r1, r3, #4
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	9107      	str	r1, [sp, #28]
 800413e:	2b00      	cmp	r3, #0
 8004140:	db01      	blt.n	8004146 <_svfiprintf_r+0x10a>
 8004142:	930b      	str	r3, [sp, #44]	; 0x2c
 8004144:	e004      	b.n	8004150 <_svfiprintf_r+0x114>
 8004146:	425b      	negs	r3, r3
 8004148:	60e3      	str	r3, [r4, #12]
 800414a:	2302      	movs	r3, #2
 800414c:	4313      	orrs	r3, r2
 800414e:	6023      	str	r3, [r4, #0]
 8004150:	782b      	ldrb	r3, [r5, #0]
 8004152:	2b2e      	cmp	r3, #46	; 0x2e
 8004154:	d10a      	bne.n	800416c <_svfiprintf_r+0x130>
 8004156:	786b      	ldrb	r3, [r5, #1]
 8004158:	2b2a      	cmp	r3, #42	; 0x2a
 800415a:	d135      	bne.n	80041c8 <_svfiprintf_r+0x18c>
 800415c:	9b07      	ldr	r3, [sp, #28]
 800415e:	3502      	adds	r5, #2
 8004160:	1d1a      	adds	r2, r3, #4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	9207      	str	r2, [sp, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	db2b      	blt.n	80041c2 <_svfiprintf_r+0x186>
 800416a:	9309      	str	r3, [sp, #36]	; 0x24
 800416c:	4e2f      	ldr	r6, [pc, #188]	; (800422c <_svfiprintf_r+0x1f0>)
 800416e:	2203      	movs	r2, #3
 8004170:	0030      	movs	r0, r6
 8004172:	7829      	ldrb	r1, [r5, #0]
 8004174:	f000 fa08 	bl	8004588 <memchr>
 8004178:	2800      	cmp	r0, #0
 800417a:	d006      	beq.n	800418a <_svfiprintf_r+0x14e>
 800417c:	2340      	movs	r3, #64	; 0x40
 800417e:	1b80      	subs	r0, r0, r6
 8004180:	4083      	lsls	r3, r0
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	3501      	adds	r5, #1
 8004186:	4313      	orrs	r3, r2
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	7829      	ldrb	r1, [r5, #0]
 800418c:	2206      	movs	r2, #6
 800418e:	4828      	ldr	r0, [pc, #160]	; (8004230 <_svfiprintf_r+0x1f4>)
 8004190:	1c6e      	adds	r6, r5, #1
 8004192:	7621      	strb	r1, [r4, #24]
 8004194:	f000 f9f8 	bl	8004588 <memchr>
 8004198:	2800      	cmp	r0, #0
 800419a:	d03c      	beq.n	8004216 <_svfiprintf_r+0x1da>
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <_svfiprintf_r+0x1f8>)
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d125      	bne.n	80041ee <_svfiprintf_r+0x1b2>
 80041a2:	2207      	movs	r2, #7
 80041a4:	9b07      	ldr	r3, [sp, #28]
 80041a6:	3307      	adds	r3, #7
 80041a8:	4393      	bics	r3, r2
 80041aa:	3308      	adds	r3, #8
 80041ac:	9307      	str	r3, [sp, #28]
 80041ae:	6963      	ldr	r3, [r4, #20]
 80041b0:	9a04      	ldr	r2, [sp, #16]
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	6163      	str	r3, [r4, #20]
 80041b6:	e764      	b.n	8004082 <_svfiprintf_r+0x46>
 80041b8:	4343      	muls	r3, r0
 80041ba:	0035      	movs	r5, r6
 80041bc:	2101      	movs	r1, #1
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	e7a6      	b.n	8004110 <_svfiprintf_r+0xd4>
 80041c2:	2301      	movs	r3, #1
 80041c4:	425b      	negs	r3, r3
 80041c6:	e7d0      	b.n	800416a <_svfiprintf_r+0x12e>
 80041c8:	2300      	movs	r3, #0
 80041ca:	200a      	movs	r0, #10
 80041cc:	001a      	movs	r2, r3
 80041ce:	3501      	adds	r5, #1
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	7829      	ldrb	r1, [r5, #0]
 80041d4:	1c6e      	adds	r6, r5, #1
 80041d6:	3930      	subs	r1, #48	; 0x30
 80041d8:	2909      	cmp	r1, #9
 80041da:	d903      	bls.n	80041e4 <_svfiprintf_r+0x1a8>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0c5      	beq.n	800416c <_svfiprintf_r+0x130>
 80041e0:	9209      	str	r2, [sp, #36]	; 0x24
 80041e2:	e7c3      	b.n	800416c <_svfiprintf_r+0x130>
 80041e4:	4342      	muls	r2, r0
 80041e6:	0035      	movs	r5, r6
 80041e8:	2301      	movs	r3, #1
 80041ea:	1852      	adds	r2, r2, r1
 80041ec:	e7f1      	b.n	80041d2 <_svfiprintf_r+0x196>
 80041ee:	aa07      	add	r2, sp, #28
 80041f0:	9200      	str	r2, [sp, #0]
 80041f2:	0021      	movs	r1, r4
 80041f4:	003a      	movs	r2, r7
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <_svfiprintf_r+0x1fc>)
 80041f8:	9803      	ldr	r0, [sp, #12]
 80041fa:	e000      	b.n	80041fe <_svfiprintf_r+0x1c2>
 80041fc:	bf00      	nop
 80041fe:	9004      	str	r0, [sp, #16]
 8004200:	9b04      	ldr	r3, [sp, #16]
 8004202:	3301      	adds	r3, #1
 8004204:	d1d3      	bne.n	80041ae <_svfiprintf_r+0x172>
 8004206:	89bb      	ldrh	r3, [r7, #12]
 8004208:	980d      	ldr	r0, [sp, #52]	; 0x34
 800420a:	065b      	lsls	r3, r3, #25
 800420c:	d400      	bmi.n	8004210 <_svfiprintf_r+0x1d4>
 800420e:	e72c      	b.n	800406a <_svfiprintf_r+0x2e>
 8004210:	2001      	movs	r0, #1
 8004212:	4240      	negs	r0, r0
 8004214:	e729      	b.n	800406a <_svfiprintf_r+0x2e>
 8004216:	aa07      	add	r2, sp, #28
 8004218:	9200      	str	r2, [sp, #0]
 800421a:	0021      	movs	r1, r4
 800421c:	003a      	movs	r2, r7
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <_svfiprintf_r+0x1fc>)
 8004220:	9803      	ldr	r0, [sp, #12]
 8004222:	f000 f87b 	bl	800431c <_printf_i>
 8004226:	e7ea      	b.n	80041fe <_svfiprintf_r+0x1c2>
 8004228:	080047b4 	.word	0x080047b4
 800422c:	080047ba 	.word	0x080047ba
 8004230:	080047be 	.word	0x080047be
 8004234:	00000000 	.word	0x00000000
 8004238:	08003f79 	.word	0x08003f79

0800423c <_printf_common>:
 800423c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800423e:	0016      	movs	r6, r2
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	688a      	ldr	r2, [r1, #8]
 8004244:	690b      	ldr	r3, [r1, #16]
 8004246:	000c      	movs	r4, r1
 8004248:	9000      	str	r0, [sp, #0]
 800424a:	4293      	cmp	r3, r2
 800424c:	da00      	bge.n	8004250 <_printf_common+0x14>
 800424e:	0013      	movs	r3, r2
 8004250:	0022      	movs	r2, r4
 8004252:	6033      	str	r3, [r6, #0]
 8004254:	3243      	adds	r2, #67	; 0x43
 8004256:	7812      	ldrb	r2, [r2, #0]
 8004258:	2a00      	cmp	r2, #0
 800425a:	d001      	beq.n	8004260 <_printf_common+0x24>
 800425c:	3301      	adds	r3, #1
 800425e:	6033      	str	r3, [r6, #0]
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	069b      	lsls	r3, r3, #26
 8004264:	d502      	bpl.n	800426c <_printf_common+0x30>
 8004266:	6833      	ldr	r3, [r6, #0]
 8004268:	3302      	adds	r3, #2
 800426a:	6033      	str	r3, [r6, #0]
 800426c:	6822      	ldr	r2, [r4, #0]
 800426e:	2306      	movs	r3, #6
 8004270:	0015      	movs	r5, r2
 8004272:	401d      	ands	r5, r3
 8004274:	421a      	tst	r2, r3
 8004276:	d027      	beq.n	80042c8 <_printf_common+0x8c>
 8004278:	0023      	movs	r3, r4
 800427a:	3343      	adds	r3, #67	; 0x43
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	1e5a      	subs	r2, r3, #1
 8004280:	4193      	sbcs	r3, r2
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	0692      	lsls	r2, r2, #26
 8004286:	d430      	bmi.n	80042ea <_printf_common+0xae>
 8004288:	0022      	movs	r2, r4
 800428a:	9901      	ldr	r1, [sp, #4]
 800428c:	9800      	ldr	r0, [sp, #0]
 800428e:	9d08      	ldr	r5, [sp, #32]
 8004290:	3243      	adds	r2, #67	; 0x43
 8004292:	47a8      	blx	r5
 8004294:	3001      	adds	r0, #1
 8004296:	d025      	beq.n	80042e4 <_printf_common+0xa8>
 8004298:	2206      	movs	r2, #6
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	2500      	movs	r5, #0
 800429e:	4013      	ands	r3, r2
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d105      	bne.n	80042b0 <_printf_common+0x74>
 80042a4:	6833      	ldr	r3, [r6, #0]
 80042a6:	68e5      	ldr	r5, [r4, #12]
 80042a8:	1aed      	subs	r5, r5, r3
 80042aa:	43eb      	mvns	r3, r5
 80042ac:	17db      	asrs	r3, r3, #31
 80042ae:	401d      	ands	r5, r3
 80042b0:	68a3      	ldr	r3, [r4, #8]
 80042b2:	6922      	ldr	r2, [r4, #16]
 80042b4:	4293      	cmp	r3, r2
 80042b6:	dd01      	ble.n	80042bc <_printf_common+0x80>
 80042b8:	1a9b      	subs	r3, r3, r2
 80042ba:	18ed      	adds	r5, r5, r3
 80042bc:	2600      	movs	r6, #0
 80042be:	42b5      	cmp	r5, r6
 80042c0:	d120      	bne.n	8004304 <_printf_common+0xc8>
 80042c2:	2000      	movs	r0, #0
 80042c4:	e010      	b.n	80042e8 <_printf_common+0xac>
 80042c6:	3501      	adds	r5, #1
 80042c8:	68e3      	ldr	r3, [r4, #12]
 80042ca:	6832      	ldr	r2, [r6, #0]
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	42ab      	cmp	r3, r5
 80042d0:	ddd2      	ble.n	8004278 <_printf_common+0x3c>
 80042d2:	0022      	movs	r2, r4
 80042d4:	2301      	movs	r3, #1
 80042d6:	9901      	ldr	r1, [sp, #4]
 80042d8:	9800      	ldr	r0, [sp, #0]
 80042da:	9f08      	ldr	r7, [sp, #32]
 80042dc:	3219      	adds	r2, #25
 80042de:	47b8      	blx	r7
 80042e0:	3001      	adds	r0, #1
 80042e2:	d1f0      	bne.n	80042c6 <_printf_common+0x8a>
 80042e4:	2001      	movs	r0, #1
 80042e6:	4240      	negs	r0, r0
 80042e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042ea:	2030      	movs	r0, #48	; 0x30
 80042ec:	18e1      	adds	r1, r4, r3
 80042ee:	3143      	adds	r1, #67	; 0x43
 80042f0:	7008      	strb	r0, [r1, #0]
 80042f2:	0021      	movs	r1, r4
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	3145      	adds	r1, #69	; 0x45
 80042f8:	7809      	ldrb	r1, [r1, #0]
 80042fa:	18a2      	adds	r2, r4, r2
 80042fc:	3243      	adds	r2, #67	; 0x43
 80042fe:	3302      	adds	r3, #2
 8004300:	7011      	strb	r1, [r2, #0]
 8004302:	e7c1      	b.n	8004288 <_printf_common+0x4c>
 8004304:	0022      	movs	r2, r4
 8004306:	2301      	movs	r3, #1
 8004308:	9901      	ldr	r1, [sp, #4]
 800430a:	9800      	ldr	r0, [sp, #0]
 800430c:	9f08      	ldr	r7, [sp, #32]
 800430e:	321a      	adds	r2, #26
 8004310:	47b8      	blx	r7
 8004312:	3001      	adds	r0, #1
 8004314:	d0e6      	beq.n	80042e4 <_printf_common+0xa8>
 8004316:	3601      	adds	r6, #1
 8004318:	e7d1      	b.n	80042be <_printf_common+0x82>
	...

0800431c <_printf_i>:
 800431c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431e:	b08b      	sub	sp, #44	; 0x2c
 8004320:	9206      	str	r2, [sp, #24]
 8004322:	000a      	movs	r2, r1
 8004324:	3243      	adds	r2, #67	; 0x43
 8004326:	9307      	str	r3, [sp, #28]
 8004328:	9005      	str	r0, [sp, #20]
 800432a:	9204      	str	r2, [sp, #16]
 800432c:	7e0a      	ldrb	r2, [r1, #24]
 800432e:	000c      	movs	r4, r1
 8004330:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004332:	2a78      	cmp	r2, #120	; 0x78
 8004334:	d809      	bhi.n	800434a <_printf_i+0x2e>
 8004336:	2a62      	cmp	r2, #98	; 0x62
 8004338:	d80b      	bhi.n	8004352 <_printf_i+0x36>
 800433a:	2a00      	cmp	r2, #0
 800433c:	d100      	bne.n	8004340 <_printf_i+0x24>
 800433e:	e0be      	b.n	80044be <_printf_i+0x1a2>
 8004340:	497c      	ldr	r1, [pc, #496]	; (8004534 <_printf_i+0x218>)
 8004342:	9103      	str	r1, [sp, #12]
 8004344:	2a58      	cmp	r2, #88	; 0x58
 8004346:	d100      	bne.n	800434a <_printf_i+0x2e>
 8004348:	e093      	b.n	8004472 <_printf_i+0x156>
 800434a:	0026      	movs	r6, r4
 800434c:	3642      	adds	r6, #66	; 0x42
 800434e:	7032      	strb	r2, [r6, #0]
 8004350:	e022      	b.n	8004398 <_printf_i+0x7c>
 8004352:	0010      	movs	r0, r2
 8004354:	3863      	subs	r0, #99	; 0x63
 8004356:	2815      	cmp	r0, #21
 8004358:	d8f7      	bhi.n	800434a <_printf_i+0x2e>
 800435a:	f7fb fed3 	bl	8000104 <__gnu_thumb1_case_shi>
 800435e:	0016      	.short	0x0016
 8004360:	fff6001f 	.word	0xfff6001f
 8004364:	fff6fff6 	.word	0xfff6fff6
 8004368:	001ffff6 	.word	0x001ffff6
 800436c:	fff6fff6 	.word	0xfff6fff6
 8004370:	fff6fff6 	.word	0xfff6fff6
 8004374:	003600a3 	.word	0x003600a3
 8004378:	fff60083 	.word	0xfff60083
 800437c:	00b4fff6 	.word	0x00b4fff6
 8004380:	0036fff6 	.word	0x0036fff6
 8004384:	fff6fff6 	.word	0xfff6fff6
 8004388:	0087      	.short	0x0087
 800438a:	0026      	movs	r6, r4
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	3642      	adds	r6, #66	; 0x42
 8004390:	1d11      	adds	r1, r2, #4
 8004392:	6019      	str	r1, [r3, #0]
 8004394:	6813      	ldr	r3, [r2, #0]
 8004396:	7033      	strb	r3, [r6, #0]
 8004398:	2301      	movs	r3, #1
 800439a:	e0a2      	b.n	80044e2 <_printf_i+0x1c6>
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	6809      	ldr	r1, [r1, #0]
 80043a0:	1d02      	adds	r2, r0, #4
 80043a2:	060d      	lsls	r5, r1, #24
 80043a4:	d50b      	bpl.n	80043be <_printf_i+0xa2>
 80043a6:	6805      	ldr	r5, [r0, #0]
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	2d00      	cmp	r5, #0
 80043ac:	da03      	bge.n	80043b6 <_printf_i+0x9a>
 80043ae:	232d      	movs	r3, #45	; 0x2d
 80043b0:	9a04      	ldr	r2, [sp, #16]
 80043b2:	426d      	negs	r5, r5
 80043b4:	7013      	strb	r3, [r2, #0]
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <_printf_i+0x218>)
 80043b8:	270a      	movs	r7, #10
 80043ba:	9303      	str	r3, [sp, #12]
 80043bc:	e01b      	b.n	80043f6 <_printf_i+0xda>
 80043be:	6805      	ldr	r5, [r0, #0]
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	0649      	lsls	r1, r1, #25
 80043c4:	d5f1      	bpl.n	80043aa <_printf_i+0x8e>
 80043c6:	b22d      	sxth	r5, r5
 80043c8:	e7ef      	b.n	80043aa <_printf_i+0x8e>
 80043ca:	680d      	ldr	r5, [r1, #0]
 80043cc:	6819      	ldr	r1, [r3, #0]
 80043ce:	1d08      	adds	r0, r1, #4
 80043d0:	6018      	str	r0, [r3, #0]
 80043d2:	062e      	lsls	r6, r5, #24
 80043d4:	d501      	bpl.n	80043da <_printf_i+0xbe>
 80043d6:	680d      	ldr	r5, [r1, #0]
 80043d8:	e003      	b.n	80043e2 <_printf_i+0xc6>
 80043da:	066d      	lsls	r5, r5, #25
 80043dc:	d5fb      	bpl.n	80043d6 <_printf_i+0xba>
 80043de:	680d      	ldr	r5, [r1, #0]
 80043e0:	b2ad      	uxth	r5, r5
 80043e2:	4b54      	ldr	r3, [pc, #336]	; (8004534 <_printf_i+0x218>)
 80043e4:	2708      	movs	r7, #8
 80043e6:	9303      	str	r3, [sp, #12]
 80043e8:	2a6f      	cmp	r2, #111	; 0x6f
 80043ea:	d000      	beq.n	80043ee <_printf_i+0xd2>
 80043ec:	3702      	adds	r7, #2
 80043ee:	0023      	movs	r3, r4
 80043f0:	2200      	movs	r2, #0
 80043f2:	3343      	adds	r3, #67	; 0x43
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	6863      	ldr	r3, [r4, #4]
 80043f8:	60a3      	str	r3, [r4, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	db03      	blt.n	8004406 <_printf_i+0xea>
 80043fe:	2104      	movs	r1, #4
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	438a      	bics	r2, r1
 8004404:	6022      	str	r2, [r4, #0]
 8004406:	2d00      	cmp	r5, #0
 8004408:	d102      	bne.n	8004410 <_printf_i+0xf4>
 800440a:	9e04      	ldr	r6, [sp, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <_printf_i+0x10e>
 8004410:	9e04      	ldr	r6, [sp, #16]
 8004412:	0028      	movs	r0, r5
 8004414:	0039      	movs	r1, r7
 8004416:	f7fb ff05 	bl	8000224 <__aeabi_uidivmod>
 800441a:	9b03      	ldr	r3, [sp, #12]
 800441c:	3e01      	subs	r6, #1
 800441e:	5c5b      	ldrb	r3, [r3, r1]
 8004420:	7033      	strb	r3, [r6, #0]
 8004422:	002b      	movs	r3, r5
 8004424:	0005      	movs	r5, r0
 8004426:	429f      	cmp	r7, r3
 8004428:	d9f3      	bls.n	8004412 <_printf_i+0xf6>
 800442a:	2f08      	cmp	r7, #8
 800442c:	d109      	bne.n	8004442 <_printf_i+0x126>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	07db      	lsls	r3, r3, #31
 8004432:	d506      	bpl.n	8004442 <_printf_i+0x126>
 8004434:	6862      	ldr	r2, [r4, #4]
 8004436:	6923      	ldr	r3, [r4, #16]
 8004438:	429a      	cmp	r2, r3
 800443a:	dc02      	bgt.n	8004442 <_printf_i+0x126>
 800443c:	2330      	movs	r3, #48	; 0x30
 800443e:	3e01      	subs	r6, #1
 8004440:	7033      	strb	r3, [r6, #0]
 8004442:	9b04      	ldr	r3, [sp, #16]
 8004444:	1b9b      	subs	r3, r3, r6
 8004446:	6123      	str	r3, [r4, #16]
 8004448:	9b07      	ldr	r3, [sp, #28]
 800444a:	0021      	movs	r1, r4
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	9805      	ldr	r0, [sp, #20]
 8004450:	9b06      	ldr	r3, [sp, #24]
 8004452:	aa09      	add	r2, sp, #36	; 0x24
 8004454:	f7ff fef2 	bl	800423c <_printf_common>
 8004458:	3001      	adds	r0, #1
 800445a:	d147      	bne.n	80044ec <_printf_i+0x1d0>
 800445c:	2001      	movs	r0, #1
 800445e:	4240      	negs	r0, r0
 8004460:	b00b      	add	sp, #44	; 0x2c
 8004462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004464:	2220      	movs	r2, #32
 8004466:	6809      	ldr	r1, [r1, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	2278      	movs	r2, #120	; 0x78
 800446e:	4932      	ldr	r1, [pc, #200]	; (8004538 <_printf_i+0x21c>)
 8004470:	9103      	str	r1, [sp, #12]
 8004472:	0021      	movs	r1, r4
 8004474:	3145      	adds	r1, #69	; 0x45
 8004476:	700a      	strb	r2, [r1, #0]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	6822      	ldr	r2, [r4, #0]
 800447c:	c920      	ldmia	r1!, {r5}
 800447e:	0610      	lsls	r0, r2, #24
 8004480:	d402      	bmi.n	8004488 <_printf_i+0x16c>
 8004482:	0650      	lsls	r0, r2, #25
 8004484:	d500      	bpl.n	8004488 <_printf_i+0x16c>
 8004486:	b2ad      	uxth	r5, r5
 8004488:	6019      	str	r1, [r3, #0]
 800448a:	07d3      	lsls	r3, r2, #31
 800448c:	d502      	bpl.n	8004494 <_printf_i+0x178>
 800448e:	2320      	movs	r3, #32
 8004490:	4313      	orrs	r3, r2
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	2710      	movs	r7, #16
 8004496:	2d00      	cmp	r5, #0
 8004498:	d1a9      	bne.n	80043ee <_printf_i+0xd2>
 800449a:	2220      	movs	r2, #32
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	4393      	bics	r3, r2
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	e7a4      	b.n	80043ee <_printf_i+0xd2>
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	680d      	ldr	r5, [r1, #0]
 80044a8:	1d10      	adds	r0, r2, #4
 80044aa:	6949      	ldr	r1, [r1, #20]
 80044ac:	6018      	str	r0, [r3, #0]
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	062e      	lsls	r6, r5, #24
 80044b2:	d501      	bpl.n	80044b8 <_printf_i+0x19c>
 80044b4:	6019      	str	r1, [r3, #0]
 80044b6:	e002      	b.n	80044be <_printf_i+0x1a2>
 80044b8:	066d      	lsls	r5, r5, #25
 80044ba:	d5fb      	bpl.n	80044b4 <_printf_i+0x198>
 80044bc:	8019      	strh	r1, [r3, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	9e04      	ldr	r6, [sp, #16]
 80044c2:	6123      	str	r3, [r4, #16]
 80044c4:	e7c0      	b.n	8004448 <_printf_i+0x12c>
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	1d11      	adds	r1, r2, #4
 80044ca:	6019      	str	r1, [r3, #0]
 80044cc:	6816      	ldr	r6, [r2, #0]
 80044ce:	2100      	movs	r1, #0
 80044d0:	0030      	movs	r0, r6
 80044d2:	6862      	ldr	r2, [r4, #4]
 80044d4:	f000 f858 	bl	8004588 <memchr>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d001      	beq.n	80044e0 <_printf_i+0x1c4>
 80044dc:	1b80      	subs	r0, r0, r6
 80044de:	6060      	str	r0, [r4, #4]
 80044e0:	6863      	ldr	r3, [r4, #4]
 80044e2:	6123      	str	r3, [r4, #16]
 80044e4:	2300      	movs	r3, #0
 80044e6:	9a04      	ldr	r2, [sp, #16]
 80044e8:	7013      	strb	r3, [r2, #0]
 80044ea:	e7ad      	b.n	8004448 <_printf_i+0x12c>
 80044ec:	0032      	movs	r2, r6
 80044ee:	6923      	ldr	r3, [r4, #16]
 80044f0:	9906      	ldr	r1, [sp, #24]
 80044f2:	9805      	ldr	r0, [sp, #20]
 80044f4:	9d07      	ldr	r5, [sp, #28]
 80044f6:	47a8      	blx	r5
 80044f8:	3001      	adds	r0, #1
 80044fa:	d0af      	beq.n	800445c <_printf_i+0x140>
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	079b      	lsls	r3, r3, #30
 8004500:	d415      	bmi.n	800452e <_printf_i+0x212>
 8004502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004504:	68e0      	ldr	r0, [r4, #12]
 8004506:	4298      	cmp	r0, r3
 8004508:	daaa      	bge.n	8004460 <_printf_i+0x144>
 800450a:	0018      	movs	r0, r3
 800450c:	e7a8      	b.n	8004460 <_printf_i+0x144>
 800450e:	0022      	movs	r2, r4
 8004510:	2301      	movs	r3, #1
 8004512:	9906      	ldr	r1, [sp, #24]
 8004514:	9805      	ldr	r0, [sp, #20]
 8004516:	9e07      	ldr	r6, [sp, #28]
 8004518:	3219      	adds	r2, #25
 800451a:	47b0      	blx	r6
 800451c:	3001      	adds	r0, #1
 800451e:	d09d      	beq.n	800445c <_printf_i+0x140>
 8004520:	3501      	adds	r5, #1
 8004522:	68e3      	ldr	r3, [r4, #12]
 8004524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	42ab      	cmp	r3, r5
 800452a:	dcf0      	bgt.n	800450e <_printf_i+0x1f2>
 800452c:	e7e9      	b.n	8004502 <_printf_i+0x1e6>
 800452e:	2500      	movs	r5, #0
 8004530:	e7f7      	b.n	8004522 <_printf_i+0x206>
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	080047c5 	.word	0x080047c5
 8004538:	080047d6 	.word	0x080047d6

0800453c <memmove>:
 800453c:	b510      	push	{r4, lr}
 800453e:	4288      	cmp	r0, r1
 8004540:	d902      	bls.n	8004548 <memmove+0xc>
 8004542:	188b      	adds	r3, r1, r2
 8004544:	4298      	cmp	r0, r3
 8004546:	d303      	bcc.n	8004550 <memmove+0x14>
 8004548:	2300      	movs	r3, #0
 800454a:	e007      	b.n	800455c <memmove+0x20>
 800454c:	5c8b      	ldrb	r3, [r1, r2]
 800454e:	5483      	strb	r3, [r0, r2]
 8004550:	3a01      	subs	r2, #1
 8004552:	d2fb      	bcs.n	800454c <memmove+0x10>
 8004554:	bd10      	pop	{r4, pc}
 8004556:	5ccc      	ldrb	r4, [r1, r3]
 8004558:	54c4      	strb	r4, [r0, r3]
 800455a:	3301      	adds	r3, #1
 800455c:	429a      	cmp	r2, r3
 800455e:	d1fa      	bne.n	8004556 <memmove+0x1a>
 8004560:	e7f8      	b.n	8004554 <memmove+0x18>
	...

08004564 <_sbrk_r>:
 8004564:	2300      	movs	r3, #0
 8004566:	b570      	push	{r4, r5, r6, lr}
 8004568:	4d06      	ldr	r5, [pc, #24]	; (8004584 <_sbrk_r+0x20>)
 800456a:	0004      	movs	r4, r0
 800456c:	0008      	movs	r0, r1
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	f7fd fc48 	bl	8001e04 <_sbrk>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d103      	bne.n	8004580 <_sbrk_r+0x1c>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d000      	beq.n	8004580 <_sbrk_r+0x1c>
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	bd70      	pop	{r4, r5, r6, pc}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	2000021c 	.word	0x2000021c

08004588 <memchr>:
 8004588:	b2c9      	uxtb	r1, r1
 800458a:	1882      	adds	r2, r0, r2
 800458c:	4290      	cmp	r0, r2
 800458e:	d101      	bne.n	8004594 <memchr+0xc>
 8004590:	2000      	movs	r0, #0
 8004592:	4770      	bx	lr
 8004594:	7803      	ldrb	r3, [r0, #0]
 8004596:	428b      	cmp	r3, r1
 8004598:	d0fb      	beq.n	8004592 <memchr+0xa>
 800459a:	3001      	adds	r0, #1
 800459c:	e7f6      	b.n	800458c <memchr+0x4>

0800459e <_realloc_r>:
 800459e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045a0:	0007      	movs	r7, r0
 80045a2:	000e      	movs	r6, r1
 80045a4:	0014      	movs	r4, r2
 80045a6:	2900      	cmp	r1, #0
 80045a8:	d105      	bne.n	80045b6 <_realloc_r+0x18>
 80045aa:	0011      	movs	r1, r2
 80045ac:	f7ff fc52 	bl	8003e54 <_malloc_r>
 80045b0:	0005      	movs	r5, r0
 80045b2:	0028      	movs	r0, r5
 80045b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045b6:	2a00      	cmp	r2, #0
 80045b8:	d103      	bne.n	80045c2 <_realloc_r+0x24>
 80045ba:	f7ff fbdf 	bl	8003d7c <_free_r>
 80045be:	0025      	movs	r5, r4
 80045c0:	e7f7      	b.n	80045b2 <_realloc_r+0x14>
 80045c2:	f000 f81b 	bl	80045fc <_malloc_usable_size_r>
 80045c6:	9001      	str	r0, [sp, #4]
 80045c8:	4284      	cmp	r4, r0
 80045ca:	d803      	bhi.n	80045d4 <_realloc_r+0x36>
 80045cc:	0035      	movs	r5, r6
 80045ce:	0843      	lsrs	r3, r0, #1
 80045d0:	42a3      	cmp	r3, r4
 80045d2:	d3ee      	bcc.n	80045b2 <_realloc_r+0x14>
 80045d4:	0021      	movs	r1, r4
 80045d6:	0038      	movs	r0, r7
 80045d8:	f7ff fc3c 	bl	8003e54 <_malloc_r>
 80045dc:	1e05      	subs	r5, r0, #0
 80045de:	d0e8      	beq.n	80045b2 <_realloc_r+0x14>
 80045e0:	9b01      	ldr	r3, [sp, #4]
 80045e2:	0022      	movs	r2, r4
 80045e4:	429c      	cmp	r4, r3
 80045e6:	d900      	bls.n	80045ea <_realloc_r+0x4c>
 80045e8:	001a      	movs	r2, r3
 80045ea:	0031      	movs	r1, r6
 80045ec:	0028      	movs	r0, r5
 80045ee:	f7ff fbbb 	bl	8003d68 <memcpy>
 80045f2:	0031      	movs	r1, r6
 80045f4:	0038      	movs	r0, r7
 80045f6:	f7ff fbc1 	bl	8003d7c <_free_r>
 80045fa:	e7da      	b.n	80045b2 <_realloc_r+0x14>

080045fc <_malloc_usable_size_r>:
 80045fc:	1f0b      	subs	r3, r1, #4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	1f18      	subs	r0, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	da01      	bge.n	800460a <_malloc_usable_size_r+0xe>
 8004606:	580b      	ldr	r3, [r1, r0]
 8004608:	18c0      	adds	r0, r0, r3
 800460a:	4770      	bx	lr

0800460c <_init>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr

08004618 <_fini>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr
